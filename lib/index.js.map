{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/account.ts","webpack:///./src/claim/attestNotifyEvent.ts","webpack:///./src/claim/claim.ts","webpack:///./src/claim/index.ts","webpack:///./src/claim/message.ts","webpack:///./src/common/bigInt.ts","webpack:///./src/common/fixed64.ts","webpack:///./src/consts.ts","webpack:///./src/crypto/AnonymousCredential.ts","webpack:///./src/crypto/CurveLabel.ts","webpack:///./src/crypto/Ecies.ts","webpack:///./src/crypto/Key.ts","webpack:///./src/crypto/KeyType.ts","webpack:///./src/crypto/PrivateKey.ts","webpack:///./src/crypto/PrivateKeyFactory.ts","webpack:///./src/crypto/PublicKey.ts","webpack:///./src/crypto/Signature.ts","webpack:///./src/crypto/SignatureScheme.ts","webpack:///./src/crypto/address.ts","webpack:///./src/crypto/index.ts","webpack:///./src/error.ts","webpack:///./src/identity.ts","webpack:///./src/index.ts","webpack:///./src/neocore/InvocationTransaction.ts","webpack:///./src/neocore/NeoRpc.ts","webpack:///./src/neocore/Program.ts","webpack:///./src/neocore/SmartContract.ts","webpack:///./src/neocore/TransactionInput.ts","webpack:///./src/neocore/TransactionNeo.ts","webpack:///./src/neocore/TransactionOutput.ts","webpack:///./src/neocore/index.ts","webpack:///./src/network/rest/restClient.ts","webpack:///./src/network/rest/urlConsts.ts","webpack:///./src/network/rpc/rpcClient.ts","webpack:///./src/network/websocket/deferred.ts","webpack:///./src/network/websocket/websocketBuilder.ts","webpack:///./src/network/websocket/websocketClient.ts","webpack:///./src/network/websocket/websocketSender.ts","webpack:///./src/scrypt.ts","webpack:///./src/sdk/index.ts","webpack:///./src/smartcontract/abi/abiFunction.ts","webpack:///./src/smartcontract/abi/abiInfo.ts","webpack:///./src/smartcontract/abi/nativeVmParamsBuilder.ts","webpack:///./src/smartcontract/abi/parameter.ts","webpack:///./src/smartcontract/abi/struct.ts","webpack:///./src/smartcontract/data/attestClaim.ts","webpack:///./src/smartcontract/nativevm/governanceContractTxBuilder.ts","webpack:///./src/smartcontract/nativevm/ontAssetTxBuilder.ts","webpack:///./src/smartcontract/nativevm/ontidContractTxBuilder.ts","webpack:///./src/smartcontract/nativevm/token.ts","webpack:///./src/smartcontract/neovm/attestClaimTxBuilder.ts","webpack:///./src/smartcontract/neovm/oep4TxBuilder.ts","webpack:///./src/smartcontract/neovm/oep5TxBuilder.ts","webpack:///./src/smartcontract/neovm/oep8TxBuilder.ts","webpack:///./src/transaction/ddo.ts","webpack:///./src/transaction/opcode.ts","webpack:///./src/transaction/payload/deployCode.ts","webpack:///./src/transaction/payload/invokeCode.ts","webpack:///./src/transaction/payload/payload.ts","webpack:///./src/transaction/program.ts","webpack:///./src/transaction/scriptBuilder.ts","webpack:///./src/transaction/transaction.ts","webpack:///./src/transaction/transactionBuilder.ts","webpack:///./src/transaction/transfer.ts","webpack:///./src/transaction/txAttribute.ts","webpack:///./src/transaction/txSignature.ts","webpack:///./src/utils.ts","webpack:///./src/wallet.ts","webpack:///external \"@ont-community/hdkey-secp256r1\"","webpack:///external \"@ont-community/html5-websocket\"","webpack:///external \"axios\"","webpack:///external \"base-58\"","webpack:///external \"base64-url\"","webpack:///external \"bignumber.js\"","webpack:///external \"bip39\"","webpack:///external \"crypto\"","webpack:///external \"crypto-js\"","webpack:///external \"elliptic\"","webpack:///external \"js-sha3\"","webpack:///external \"long\"","webpack:///external \"milagro-crypto-js\"","webpack:///external \"pkcs7\"","webpack:///external \"scrypt-async\"","webpack:///external \"secure-random\"","webpack:///external \"sm.js\"","webpack:///external \"uuid\"","webpack:///external \"websocket-as-promised\"","webpack:///external \"wif\""],"names":[],"mappings":"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,GAAG,WAAH,EAApB;AACA,YAAI,cAAc,CAAlB,EAAqB;AACjB,gBAAI,QAAJ,GAAe,GAAG,IAAH,CAAQ,WAAR,CAAf;AACH;AACD,eAAO,GAAP;AACH;AAzBC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFN,IAAK,MAAL;AAAA,WAAK,MAAL,EAAW;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACH;AACG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,CAtID,EAAK,oBAAM,EAAN,CAAL;AAwIA,+DAAe,MAAf,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzIA;AAOA;AAEA;;;AAGc,yBAA0B,gDAA1B,CAAiC;AA+B3C;;;AAGA,cAAS;AACL,QAAI,SAAS,EAAb;AAEA;AACA,cAAU,4DAAa,KAAK,IAAlB,CAAV;AAEA,cAAU,4DAAa,KAAK,WAAlB,CAAV;AAEA,cAAU,4DAAa,KAAK,IAAlB,CAAV;AAEA,cAAU,4DAAa,KAAK,OAAlB,CAAV;AAEA,cAAU,4DAAa,KAAK,MAAlB,CAAV;AAEA,cAAU,4DAAa,KAAK,KAAlB,CAAV;AAEA,cAAU,4DAAa,KAAK,WAA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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport * as bip39 from 'bip39';\r\nimport { ONT_BIP44_PATH } from './consts';\r\nimport { Address, PrivateKey } from './crypto';\r\nimport { deserializeFromJson } from './crypto/PrivateKeyFactory';\r\nimport { ERROR_CODE } from './error';\r\nimport { ScryptParams } from './scrypt';\r\nimport { Transaction } from './transaction/transaction';\r\nimport { signTransaction } from './transaction/transactionBuilder';\r\nimport { ab2hexstring, generateRandomArray, randomBytes } from './utils';\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst HDKey = require('@ont-community/hdkey-secp256r1');\r\n\r\nexport class Account {\r\n    /**\r\n     * Import account\r\n     * @param label Account's label\r\n     * @param encryptedPrivateKey Encrypted private key\r\n     * @param password User's password to decrypt private key\r\n     * @param address Account's address\r\n     * @param saltBase64 Salt to decrypt\r\n     * @param params Params used to decrypt\r\n     */\r\n    static importAccount(\r\n        label: string ,\r\n        encryptedPrivateKey: PrivateKey,\r\n        password: string,\r\n        address: Address,\r\n        saltBase64: string,\r\n        params?: ScryptParams\r\n    ): Account {\r\n        const account = new Account();\r\n        const salt = Buffer.from(saltBase64, 'base64').toString('hex');\r\n        const privateKey = encryptedPrivateKey.decrypt(password, address, salt, params);\r\n\r\n        if (!label) {\r\n            label = ab2hexstring(generateRandomArray(4));\r\n        }\r\n        account.label = label;\r\n        account.lock = false;\r\n        account.isDefault = false;\r\n        account.salt = saltBase64;\r\n\r\n        account.encryptedKey = encryptedPrivateKey;\r\n\r\n        const publicKey = privateKey.getPublicKey();\r\n        account.publicKey = publicKey.key;\r\n\r\n        account.address = Address.fromPubKey(publicKey);\r\n\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * Import account with mnemonic\r\n     * @param label Account's label\r\n     * @param mnemonic User's mnemonic\r\n     * @param password user's password to encrypt the private key\r\n     * @param params Params used to encrypt the private key.\r\n     */\r\n    static importWithMnemonic(\r\n        label: string,\r\n        mnemonic: string,\r\n        password: string,\r\n        params?: ScryptParams\r\n    ): Account {\r\n        mnemonic = mnemonic.trim();\r\n        if (!bip39.validateMnemonic(mnemonic)) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\r\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\r\n        const pri = hdkey.derive(ONT_BIP44_PATH);\r\n        const key = Buffer.from(pri.privateKey).toString('hex');\r\n        const privateKey = new PrivateKey(key);\r\n        const account = Account.create(privateKey, password, label, params);\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * Creates Account object encrypting specified private key.\r\n     *\r\n     * The account does not need to be registered on blockchain.\r\n     *\r\n     * @param privateKey Private key associated with the account\r\n     * @param password Password use to encrypt the private key\r\n     * @param label Custom label\r\n     * @param params Optional scrypt params\r\n     */\r\n    static create(\r\n        privateKey: PrivateKey,\r\n        password: string,\r\n        label?: string,\r\n        params?: ScryptParams\r\n    ): Account {\r\n        const account = new Account();\r\n        if (!label) {\r\n            label = ab2hexstring(generateRandomArray(4));\r\n        }\r\n        account.label = label;\r\n        account.lock = false;\r\n        account.isDefault = false;\r\n\r\n        const salt = randomBytes(16);\r\n        const publicKey = privateKey.getPublicKey();\r\n        const address = Address.fromPubKey(publicKey);\r\n        account.publicKey = publicKey.serializeHex();\r\n        account.address = address;\r\n        account.encryptedKey = privateKey.encrypt(password, address, salt, params);\r\n        account.salt = Buffer.from(salt, 'hex').toString('base64');\r\n        return account;\r\n    }\r\n\r\n    static parseJson(json: string): Account {\r\n        return Account.parseJsonObj(JSON.parse(json));\r\n    }\r\n\r\n    /**\r\n     * Deserializes JSON object.\r\n     *\r\n     * Object should be real object, not stringified.\r\n     *\r\n     * @param obj JSON object\r\n     */\r\n    static parseJsonObj(obj: any): Account {\r\n        const account = new Account();\r\n        account.address = new Address(obj.address);\r\n        account.label = obj.label;\r\n        account.lock = obj.lock;\r\n        account.isDefault = obj.isDefault;\r\n        account.publicKey = obj.publicKey;\r\n        account.hash = obj.hash;\r\n        account.salt = obj.salt;\r\n        account.encryptedKey = deserializeFromJson({\r\n            algorithm: obj.algorithm,\r\n            parameters: obj.parameters,\r\n            key: obj.key,\r\n            external: obj.external\r\n        });\r\n        // account.contract = obj.contract\r\n        account.extra = obj.extra;\r\n        return account;\r\n    }\r\n\r\n    address: Address;\r\n    label: string;\r\n    lock: boolean;\r\n    encryptedKey: PrivateKey;\r\n    extra: null;\r\n\r\n    // to compatible with cli wallet\r\n    'enc-alg': string = 'aes-256-gcm';\r\n    hash: string = 'sha256';\r\n    salt: string;\r\n\r\n    publicKey: string;\r\n    isDefault: boolean;\r\n\r\n    toJson(): string {\r\n        return JSON.stringify(this.toJsonObj());\r\n    }\r\n\r\n    /**\r\n     * Serializes to JSON object.\r\n     *\r\n     * Returned object will not be stringified.\r\n     *\r\n     */\r\n    toJsonObj(): any {\r\n        const obj = {\r\n            'address': this.address.toBase58(),\r\n            'label': this.label,\r\n            'lock': this.lock,\r\n            ...this.encryptedKey.serializeJson(),\r\n            'enc-alg': this['enc-alg'],\r\n            'hash': this.hash,\r\n            'salt': this.salt,\r\n            'isDefault': this.isDefault,\r\n            'publicKey': this.publicKey,\r\n            'signatureScheme': this.encryptedKey.algorithm.defaultSchema.label\r\n        };\r\n        return obj;\r\n    }\r\n\r\n    exportPrivateKey(password: string, params?: ScryptParams) {\r\n        return this.encryptedKey.decrypt(password, this.address, this.salt, params);\r\n    }\r\n\r\n    signTransaction(password: string, tx: Transaction, params?: ScryptParams) {\r\n        const pri = this.exportPrivateKey(password, params);\r\n        signTransaction(tx, pri, pri.algorithm.defaultSchema);\r\n        return tx;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { hexstr2str } from '../utils';\r\n\r\n/**\r\n * Represents Notify event of attest creation of revocation.\r\n */\r\nexport class AttestNotifyEvent {\r\n    /**\r\n     * Deserializes Notify event.\r\n     *\r\n     * States in events are hex encoded.\r\n     *\r\n     * @param e encoded event\r\n     */\r\n    static deserialize(e: any): AttestNotifyEvent {\r\n        const event = new AttestNotifyEvent();\r\n\r\n        event.Action = e.Action;\r\n        event.Error = e.Error;\r\n        event.Desc = e.Desc;\r\n        event.Result = Result.deserialize(e.Result);\r\n\r\n        return event;\r\n    }\r\n\r\n    Action: string = 'Notify';\r\n    Desc: string;\r\n    Error: number;\r\n    Result: Result;\r\n}\r\n\r\n/**\r\n * Result of Notify event.\r\n */\r\nexport class Result {\r\n    /**\r\n     * Deserializes result from event.\r\n     *\r\n     * States are hex encoded.\r\n     *\r\n     * @param r encoded result\r\n     */\r\n    static deserialize(r: any): Result {\r\n        const result = new Result();\r\n\r\n        result.TxHash = r.TxHash;\r\n        result.State = r.State;\r\n        result.GasConsumed = r.GasConsumed;\r\n        result.Notify = r.Notify.map((n: any) => {\r\n            return {\r\n                ContractAddress: n.ContractAddress,\r\n                States: n.States.map( (s: any) => typeof s === 'string' ? hexstr2str(s) : s)\r\n            };\r\n        });\r\n        result.Version = r.Version;\r\n        return result;\r\n    }\r\n\r\n    TxHash: string;\r\n    /**\r\n     * State = 1 : smartcontract executation success\r\n     * State = 0 : smartcontract executation failure\r\n     */\r\n    State: number;\r\n    GasConsumed: number;\r\n    Notify: [{\r\n        ContractAddress: string;\r\n        /**\r\n         * The value of States are usually hex string\r\n         */\r\n        States: any[];\r\n    }];\r\n    Version: string;\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport * as b64 from 'base64-url';\r\nimport { Address, PrivateKey, Signature, SignatureScheme } from '../crypto';\r\nimport RestClient from '../network/rest/restClient';\r\nimport { WebsocketClient } from '../network/websocket/websocketClient';\r\nimport {\r\n    buildCommitRecordTx,\r\n    buildGetRecordStatusTx,\r\n    buildRevokeRecordTx\r\n} from '../smartcontract/neovm/attestClaimTxBuilder';\r\nimport { signTransactionAsync } from '../transaction/transactionBuilder';\r\nimport { hexstr2str, StringReader } from '../utils';\r\nimport { AttestNotifyEvent } from './attestNotifyEvent';\r\nimport { ClaimProof } from './claimProof';\r\nimport { Message, Metadata } from './message';\r\n\r\n/**\r\n * Type of revocation.\r\n */\r\nexport enum RevocationType {\r\n    AttestContract = 'AttestContract',\r\n    RevocationList = 'RevocationList'\r\n}\r\n\r\n/**\r\n * Revocation definition.\r\n */\r\nexport interface Revocation {\r\n    /**\r\n     * Type of revocation.\r\n     */\r\n    type: RevocationType;\r\n\r\n    /**\r\n     * Url of revocation list if type is RevocationList\r\n     */\r\n    url?: string;\r\n\r\n    /**\r\n     * Address of attest contract if type is AttestContract\r\n     */\r\n    addr?: string;\r\n}\r\n\r\n/**\r\n * Verifiable claim.\r\n *\r\n * TODO: override verify to add claim proof verification.\r\n */\r\nexport class Claim extends Message {\r\n    static deserialize(jwt: string): Claim {\r\n        return super.deserializeInternal(jwt, (m: any, s: any) => new Claim(m, s));\r\n    }\r\n\r\n    version: string;\r\n    context: string;\r\n    content: any;\r\n    revocation?: Revocation;\r\n\r\n    useProof: boolean;\r\n    proof?: ClaimProof;\r\n\r\n    constructor(metadata: Metadata, signature?: Signature | undefined, useProof?: boolean) {\r\n        super(metadata, signature);\r\n        this.useProof = useProof === true;\r\n    }\r\n\r\n    /**\r\n     * Overrides default message verification with added attest verification.\r\n     *\r\n     * TODO: return more than boolean\r\n     *\r\n     * const VerifyOntidClaimResult = {\r\n     *   CLAIM_NOT_ONCHAIN : 'CLAIM_NOT_ONCHAIN',\r\n     *   INVALID_SIGNATURE : 'INVALID_SIGNATURE',\r\n     *   PK_IN_REVOKED     : 'PK_IN_REVOKED',\r\n     *   NO_ISSUER_PK      : 'NO_ISSUER_PK',\r\n     *   EXPIRED_CLAIM     : 'EXPIRED_CLAIM',\r\n     *   REVOKED_CLAIM     : 'REVOKED_CLAIM',\r\n     *   VALID_CLAIM       : 'VALID_CLAIM'\r\n     * };\r\n     *\r\n     * @param url Restful endpoint of Ontology node\r\n     * @param checkAttest Should be the attest tested\r\n     */\r\n    async verify(url: string, checkAttest = true): Promise<boolean> {\r\n        const result = await super.verify(url);\r\n\r\n        if (result && checkAttest) {\r\n            return this.getStatus(url);\r\n        } else {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the claim into JWT/JWT-X format.\r\n     *\r\n     * Override default implementation by adding proof if available.\r\n     */\r\n    serialize(): string {\r\n        if (this.useProof) {\r\n            const jwt = super.serialize();\r\n            const proof = this.serializeProof();\r\n\r\n            return jwt + '.' + proof;\r\n        } else {\r\n            return super.serialize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attests the claim onto blockchain.\r\n     *\r\n     * @param url Websocket endpoint of Ontology node\r\n     * @param privateKey Private key to sign the transaction\r\n     * @param gasPrice gasPrice\r\n     * @param gasLimit gasLimit\r\n     * @param payer payer\r\n     */\r\n    async attest(url: string, gasPrice: string, gasLimit: string,\r\n                 payer: Address, privateKey: PrivateKey): Promise<boolean> {\r\n        const attesterId = this.metadata.issuer;\r\n        const subjectId = this.metadata.subject;\r\n        const claimId = this.metadata.messageId;\r\n        if (claimId === undefined) {\r\n            throw new Error('Claim id not specified.');\r\n        }\r\n\r\n        const client = new WebsocketClient(url);\r\n        const tx = buildCommitRecordTx(claimId, attesterId, subjectId, gasPrice, gasLimit, payer);\r\n        await signTransactionAsync(tx, privateKey);\r\n        const response = await client.sendRawTransaction(tx.serialize(), false, true);\r\n\r\n        const event = AttestNotifyEvent.deserialize(response);\r\n        // tslint:disable-next-line:no-console\r\n        console.log(JSON.stringify(event));\r\n        return event.Result.Notify[0].States[0] === 'Push';\r\n    }\r\n\r\n    /**\r\n     * Revokes claim attest from blockchain.\r\n     *\r\n     * @param gas the cost of the transactoin\r\n     * @param payer the payer of the cost\r\n     * @param privateKey Private key to sign the transaction\r\n     * @param url Websocket endpoint of Ontology node\r\n     * @param gasPrice gasPrice\r\n     * @param gasLimit gasLimit\r\n     * @param payer payer\r\n     */\r\n    async revoke(url: string, gasPrice: string,\r\n                 gasLimit: string, payer: Address, privateKey: PrivateKey): Promise<boolean> {\r\n        const attesterId = this.metadata.issuer;\r\n        const claimId = this.metadata.messageId;\r\n        if (claimId === undefined) {\r\n            throw new Error('Claim id not specified.');\r\n        }\r\n        const client = new WebsocketClient(url);\r\n        const tx = buildRevokeRecordTx(claimId, attesterId, gasPrice, gasLimit, payer);\r\n        await signTransactionAsync(tx, privateKey);\r\n        const response = await client.sendRawTransaction(tx.serialize(), false, true);\r\n\r\n        const event = AttestNotifyEvent.deserialize(response);\r\n\r\n        return event.Result.Notify[0].States[0] === 'Push';\r\n    }\r\n\r\n    /**\r\n     * Gets status of the claim attest.\r\n     *\r\n     * @param url Restful endpoint of Ontology node\r\n     */\r\n    async getStatus(url: string): Promise<boolean> {\r\n        const attesterId = this.metadata.issuer;\r\n        const claimId = this.metadata.messageId;\r\n        if (claimId === undefined) {\r\n            throw new Error('Claim id not specified.');\r\n        }\r\n\r\n        const client = new RestClient(url);\r\n        const tx = buildGetRecordStatusTx(claimId);\r\n\r\n        const response = await client.sendRawTransaction(tx.serialize(), true);\r\n\r\n        const result = GetStatusResponse.deserialize(response);\r\n        // tslint:disable-next-line:no-console\r\n        console.log(result);\r\n\r\n        return result.status === Status.ATTESTED && result.issuerId === attesterId;\r\n    }\r\n\r\n    protected payloadToJSON(): any {\r\n        return {\r\n            'ver': this.version,\r\n            '@context': this.context,\r\n            'clm': this.content,\r\n            'clm-rev': this.revocation\r\n        };\r\n    }\r\n\r\n    protected payloadFromJSON(json: any): void {\r\n        this.version = json.ver;\r\n        this.context = json['@context'];\r\n        this.content = json.clm;\r\n        this.revocation = json['clm-rev'];\r\n    }\r\n\r\n    /**\r\n     * Serializes the header into JWT/JWT-X encoded header.\r\n     *\r\n     * Override default implementation by adding proof if available.\r\n     *\r\n     * @param algorithm Signature algorithm used\r\n     * @param publicKeyId The ID of a signature public key\r\n     */\r\n    protected serializeHeader(algorithm: SignatureScheme | undefined, publicKeyId: string | undefined): string {\r\n        if (this.useProof) {\r\n            if (algorithm === undefined || publicKeyId === undefined) {\r\n                throw new Error('Signature is needed fow JWT-X.');\r\n            } else {\r\n                const header = {\r\n                    alg: algorithm.labelJWS,\r\n                    typ: 'JWT-X',\r\n                    kid: publicKeyId\r\n                };\r\n\r\n                const stringified = JSON.stringify(header);\r\n                return b64.encode(stringified, 'utf-8');\r\n            }\r\n        } else {\r\n            return super.serializeHeader(algorithm, publicKeyId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the proof into JWT-X.\r\n     */\r\n    protected serializeProof(): string {\r\n        const stringified = JSON.stringify(this.proof);\r\n        return b64.encode(stringified, 'utf-8');\r\n    }\r\n}\r\n\r\n/**\r\n * Helper class for deserializing GetStatus response.\r\n * fixme: Ontology node changed the response\r\n */\r\nexport class GetStatusResponse {\r\n    static deserialize(r: any): GetStatusResponse {\r\n        const response = new GetStatusResponse();\r\n\r\n        if (r.Result !== undefined && r.Result.Result === '') {\r\n            response.status = Status.NOTFOUND;\r\n            return response;\r\n        }\r\n        const sr = new StringReader(r.Result.Result);\r\n        sr.read(1); // data type\r\n        sr.readNextLen(); // data length\r\n        sr.read(1); // data type\r\n        const claimId = hexstr2str(sr.readNextBytes());\r\n        sr.read(1); // data type\r\n        const issuerId = hexstr2str(sr.readNextBytes());\r\n        sr.read(1); // data type\r\n        const subjectId = hexstr2str(sr.readNextBytes());\r\n        sr.read(1); // data type\r\n        let status = sr.readNextBytes();\r\n        response.claimId = claimId;\r\n        response.issuerId = issuerId;\r\n        response.subjectId = subjectId;\r\n        if (!status) {// status is revoked\r\n            status = '00';\r\n        }\r\n        response.status =  status as Status;\r\n        return response;\r\n    }\r\n\r\n    claimId: string;\r\n    issuerId: string;\r\n    subjectId: string;\r\n    status: Status;\r\n    // status: Status;\r\n    // attesterId: string;\r\n    // time: string;\r\n}\r\n\r\nexport enum Status {\r\n    REVOKED = '00',\r\n    ATTESTED = '01',\r\n    NOTFOUND = '-1'\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nexport { Claim, Revocation, RevocationType } from './claim';\r\nexport { Message, Metadata } from './message';\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as b64 from 'base64-url';\r\nimport * as uuid from 'uuid';\r\nimport { PrivateKey, PublicKey, PublicKeyStatus, Signature, SignatureScheme } from '../crypto';\r\nimport RestClient from '../network/rest/restClient';\r\nimport { buildGetDDOTx, buildGetPublicKeyStateTx } from '../smartcontract/nativevm/ontidContractTxBuilder';\r\nimport { DDO } from '../transaction/ddo';\r\nimport { now } from '../utils';\r\n\r\n/**\r\n * Factory method type used for creating concrete instances of Message.\r\n */\r\nexport type MessageFactory<T extends Message> = (\r\n    metadata: Metadata,\r\n    signature: Signature | undefined\r\n) => T;\r\n\r\n/**\r\n * Metadata about the message.\r\n */\r\nexport interface Metadata {\r\n    /**\r\n     * Message id.\r\n     *\r\n     * Will be assigned if not provided.\r\n     */\r\n    messageId?: string;\r\n\r\n    /**\r\n     * Issuer.\r\n     */\r\n    issuer: string;\r\n\r\n    /**\r\n     * Recipient.\r\n     */\r\n    subject: string;\r\n\r\n    /**\r\n     * Creation time.\r\n     */\r\n    issuedAt: number;\r\n\r\n    /**\r\n     * Expiration time.\r\n     */\r\n    expireAt?: number;\r\n}\r\n\r\n/**\r\n * Common representation of Message in JWT form.\r\n */\r\nexport abstract class Message {\r\n\r\n    /**\r\n     * Deserializes the message from JWT format.\r\n     *\r\n     * A concrete instance will be creater through the message factory method. This method\r\n     * is called from concrete class.\r\n     *\r\n     * @param jwt Encoded message\r\n     * @param creator Factory method\r\n     */\r\n    protected static deserializeInternal<T extends Message>(jwt: string, creator: MessageFactory<T>): T {\r\n        const parts = jwt.split('.', 3);\r\n\r\n        if (parts.length < 2) {\r\n            throw new Error('Invalid message.');\r\n        }\r\n\r\n        const header = Message.deserializeHeader(parts[0]);\r\n        const payload = Message.deserializePayload(parts[1]);\r\n        let signature: Signature | undefined;\r\n\r\n        if (parts.length > 2) {\r\n            if (header.algorithm !== undefined && header.publicKeyId !== undefined) {\r\n                signature = Signature.deserializeJWT(parts[2], header.algorithm, header.publicKeyId);\r\n            } else {\r\n                throw new Error('Signature scheme was not specified.');\r\n            }\r\n        }\r\n\r\n        const msg = creator(payload.metadata, signature);\r\n        msg.payloadFromJSON(payload.rest);\r\n        return msg;\r\n    }\r\n\r\n    /**\r\n     * Deserializes payload part of JWT message.\r\n     *\r\n     * @param encoded JWT encoded payload\r\n     */\r\n    private static deserializePayload(encoded: string) {\r\n        const stringified = b64.decode(encoded);\r\n        const { jti, iss, sub, iat, exp, ...rest } = JSON.parse(stringified);\r\n\r\n        return {\r\n            metadata: {\r\n                messageId: jti,\r\n                issuer: iss,\r\n                subject: sub,\r\n                issuedAt: iat,\r\n                expireAt: exp\r\n            } as Metadata,\r\n            rest\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Deserializes the header from JWT encoded header.\r\n     *\r\n     * @param encoded JWT encoded header\r\n     */\r\n    private static deserializeHeader(encoded: string) {\r\n        const stringified = b64.decode(encoded);\r\n        const header = JSON.parse(stringified);\r\n\r\n        return {\r\n            algorithm: header.alg !== undefined ? SignatureScheme.fromLabelJWS(header.alg) : undefined,\r\n            publicKeyId: header.kid\r\n        };\r\n    }\r\n\r\n    metadata: Metadata;\r\n    signature?: Signature;\r\n\r\n    constructor(metadata: Metadata, signature: Signature | undefined) {\r\n        this.metadata = metadata;\r\n        this.signature = signature;\r\n\r\n        if (this.metadata.messageId === undefined) {\r\n            this.metadata.messageId = uuid();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Signs the message and store the signature inside the request.\r\n     *\r\n     * If the algorithm is not specified, then default algorithm for Private key type is used.\r\n     *\r\n     * @param url Restful endpoint of Ontology node\r\n     * @param publicKeyId The ID of a signature public key\r\n     * @param privateKey Private key to sign the request with\r\n     * @param algorithm Signature algorithm used\r\n     */\r\n    async sign(\r\n        url: string,\r\n        publicKeyId: string,\r\n        privateKey: PrivateKey,\r\n        algorithm?: SignatureScheme\r\n    ): Promise<void> {\r\n        await retrievePublicKey(publicKeyId, url);\r\n\r\n        if (algorithm === undefined) {\r\n            algorithm = privateKey.algorithm.defaultSchema;\r\n        }\r\n\r\n        const msg = this.serializeUnsigned(algorithm, publicKeyId);\r\n        this.signature = await privateKey.signAsync(msg, algorithm, publicKeyId);\r\n    }\r\n\r\n    /**\r\n     * Verifies the signature and check ownership of specified ONT ID through smart contract call.\r\n     *\r\n     * @param url Restful endpoint of Ontology node\r\n     * @returns Boolean if the ownership is confirmed\r\n     */\r\n    async verify(url: string): Promise<boolean> {\r\n        const signature = this.signature;\r\n\r\n        if (signature !== undefined && signature.publicKeyId !== undefined) {\r\n            try {\r\n                if (!this.verifyKeyOwnership()) {\r\n                    return false;\r\n                }\r\n\r\n                if (!this.verifyExpiration()) {\r\n                    return false;\r\n                }\r\n\r\n                const state = await retrievePublicKeyState(signature.publicKeyId, url);\r\n                if (state === PublicKeyStatus.REVOKED) {\r\n                    return false;\r\n                }\r\n\r\n                const publicKey = await retrievePublicKey(signature.publicKeyId, url);\r\n\r\n                const msg = this.serializeUnsigned(signature.algorithm, signature.publicKeyId);\r\n                return publicKey.verify(msg, signature);\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the message without signature into JWT format.\r\n     *\r\n     * Header might contain algorithm and public key id.\r\n     *\r\n     * @param algorithm Signature algorithm used\r\n     * @param publicKeyId The ID of a signature public key\r\n     */\r\n    serializeUnsigned(algorithm?: SignatureScheme, publicKeyId?: string): string {\r\n        const headerEncoded = this.serializeHeader(algorithm, publicKeyId);\r\n        const payloadEncoded = this.serializePayload();\r\n\r\n        return headerEncoded + '.' + payloadEncoded;\r\n    }\r\n\r\n    /**\r\n     * Serializes the message into JWT format.\r\n     *\r\n     */\r\n    serialize(): string {\r\n        const signature = this.signature;\r\n\r\n        if (signature !== undefined) {\r\n            const signatureEncoded = signature.serializeJWT();\r\n            return this.serializeUnsigned(signature.algorithm, signature.publicKeyId) + '.' + signatureEncoded;\r\n        } else {\r\n            return this.serializeUnsigned();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the header into JWT encoded header.\r\n     *\r\n     * @param algorithm Signature algorithm used\r\n     * @param publicKeyId The ID of a signature public key\r\n     */\r\n    protected serializeHeader(\r\n        algorithm: SignatureScheme | undefined,\r\n        publicKeyId: string | undefined\r\n    ): string {\r\n        let header;\r\n        if (algorithm !== undefined) {\r\n            header = {\r\n                alg: algorithm.labelJWS,\r\n                typ: 'JWT',\r\n                kid: publicKeyId\r\n            };\r\n        } else {\r\n            header = {\r\n                typ: 'JWT'\r\n            };\r\n        }\r\n\r\n        const stringified = JSON.stringify(header);\r\n        return b64.encode(stringified, 'utf-8');\r\n    }\r\n\r\n    /**\r\n     * Converts claim data to JSON for serialization.\r\n     */\r\n    protected abstract payloadToJSON(): any;\r\n\r\n    /**\r\n     * Retrieves data from JSON.\r\n     *\r\n     * @param json JSON object with data\r\n     */\r\n    protected abstract payloadFromJSON(json: any): void;\r\n\r\n    /**\r\n     * Verifies if the expiration date has passed\r\n     */\r\n    private verifyExpiration(): boolean {\r\n        if (this.metadata.expireAt !== undefined) {\r\n            return now() < this.metadata.expireAt;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies if the declared public key id belongs to issuer.\r\n     */\r\n    private verifyKeyOwnership(): boolean {\r\n        const signature = this.signature;\r\n\r\n        if (signature !== undefined && signature.publicKeyId !== undefined) {\r\n            const ontId = extractOntId(signature.publicKeyId);\r\n\r\n            return ontId === this.metadata.issuer;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes payload part of JWT message.\r\n     */\r\n    private serializePayload(): string {\r\n        const metadata = {\r\n            jti: this.metadata.messageId,\r\n            iss: this.metadata.issuer,\r\n            sub: this.metadata.subject,\r\n            iat: this.metadata.issuedAt,\r\n            exp: this.metadata.expireAt\r\n        };\r\n        const rest = this.payloadToJSON();\r\n\r\n        const stringified = JSON.stringify({...metadata, ...rest});\r\n        return b64.encode(stringified, 'utf-8');\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the public key associated with ONT ID from blockchain.\r\n *\r\n * @param publicKeyId The ID of a signature public key\r\n * @param url Restful endpoint of Ontology node\r\n */\r\nexport async function retrievePublicKey(publicKeyId: string, url: string): Promise<PublicKey> {\r\n    const ontId = extractOntId(publicKeyId);\r\n    const keyId = extractKeyId(publicKeyId);\r\n\r\n    const client = new RestClient(url);\r\n    const tx = buildGetDDOTx(ontId);\r\n    const response = await client.sendRawTransaction(tx.serialize(), true);\r\n\r\n    if (response.Result && response.Result.Result) {\r\n        const ddo = DDO.deserialize(response.Result.Result);\r\n\r\n        const publicKey = ddo.publicKeys.find((pk) => pk.id === keyId);\r\n\r\n        if (publicKey === undefined) {\r\n            throw new Error('Not found');\r\n        }\r\n\r\n        return publicKey.pk;\r\n    } else {\r\n        throw new Error('Not found');\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the state of public key associated with ONT ID from blockchain.\r\n *\r\n * @param publicKeyId The ID of a signature public key\r\n * @param url Restful endpoint of Ontology node\r\n */\r\nexport async function retrievePublicKeyState(publicKeyId: string, url: string): Promise<PublicKeyStatus> {\r\n    const ontId = extractOntId(publicKeyId);\r\n    const keyId = extractKeyId(publicKeyId);\r\n\r\n    const client = new RestClient(url);\r\n    const tx = buildGetPublicKeyStateTx(ontId, keyId);\r\n    const response = await client.sendRawTransaction(tx.serialize(), true);\r\n\r\n    if (response.Result && response.Result.Result) {\r\n        return PublicKeyStatus.fromHexLabel(response.Result.Result);\r\n    } else {\r\n        throw new Error('Not found');\r\n    }\r\n}\r\n\r\n/**\r\n * Extracts ONT ID from public key Id.\r\n *\r\n * @param publicKeyId The ID of a signature public key\r\n */\r\nexport function extractOntId(publicKeyId: string): string {\r\n    const index = publicKeyId.indexOf('#keys-');\r\n\r\n    if (index === -1) {\r\n        throw new Error('Is not a publicKeId.');\r\n    }\r\n\r\n    return publicKeyId.substr(0, index);\r\n}\r\n\r\n/**\r\n * Extracts key id from public key Id.\r\n *\r\n * @param publicKeyId The ID of a signature public key\r\n */\r\nexport function extractKeyId(publicKeyId: string): number {\r\n    const index = publicKeyId.indexOf('#keys-');\r\n\r\n    if (index === -1) {\r\n        throw new Error('Is not a publicKeId.');\r\n    }\r\n\r\n    // return num2hexstring(\r\n    //     Number(publicKeyId.substr(index + '#keys-'.length))\r\n    // );\r\n    return Number(publicKeyId.substr(index + '#keys-'.length));\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport * as Long from 'long';\r\nimport { ERROR_CODE } from './../error';\r\nimport { bigIntToBytes, reverseHex } from './../utils';\r\n\r\n// const SIZE = 8;\r\n/**\r\n * Big positive integer base on BigNumber\r\n */\r\nexport default class BigInt {\r\n    /**\r\n     * Create BigInt from string\r\n     * @param hex Byte string value\r\n     */\r\n    static fromHexstr(hex: string): BigInt {\r\n        hex = reverseHex(hex);\r\n        const bi = new BigNumber(hex, 16).toString();\r\n        return new BigInt(bi);\r\n    }\r\n\r\n    value: string | number;\r\n\r\n    constructor(value: string | number) {\r\n        const bi = new BigNumber(value);\r\n        if (!bi.isInteger() || bi.isNegative()) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * Create hex string from BigInt\r\n     */\r\n    toHexstr(): string {\r\n        const bi = Long.fromValue(this.value);\r\n        const hex = bigIntToBytes(bi);\r\n        return hex;\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { reverseHex, StringReader } from '../utils';\r\n\r\nconst Fixed64Size = 8;\r\nexport default class Fixed64 {\r\n    static deserialize(sr: StringReader) {\r\n        const f = new Fixed64();\r\n        let v = sr.read(8);\r\n        // f.value = hexstr2str(v)\r\n        v = reverseHex(v);\r\n        while (v.substr(0, 2) === '00' ) {\r\n            v = v.substring(2);\r\n        }\r\n        f.value = new BigNumber(v, 16).toString();\r\n        return f;\r\n    }\r\n\r\n    // 8 bytes\r\n    value: string;\r\n    constructor(value?: string) {\r\n        if (value && value.length > 16 || value && !/^[0-9]\\d*$/.test(value)) {\r\n            throw new Error('Invalid value.' + value);\r\n        }\r\n        this.value = value || '0000000000000000';\r\n    }\r\n\r\n    serialize() {\r\n        // return str2hexstr(this.value)\r\n        let hexstring = new BigNumber(this.value).toString(16);\r\n        const size = Fixed64Size * 2;\r\n\r\n        hexstring = hexstring.length % size === 0\r\n            ? hexstring\r\n            : ('0'.repeat(size) + hexstring).substring(hexstring.length);\r\n\r\n        hexstring = reverseHex(hexstring);\r\n        return hexstring;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n// export const ADDR_VERSION = '41';\r\nexport const ADDR_VERSION = \"17\";\r\n\r\nexport const DEFAULT_SCRYPT = {\r\n  cost: 4096, // 除以2时间减半\r\n  blockSize: 8,\r\n  parallel: 8,\r\n  size: 64\r\n};\r\n\r\n// specified by oep, same as bip38\r\nexport const OEP_HEADER = \"0142\";\r\n\r\nexport const OEP_FLAG = \"e0\";\r\n\r\n// Ont://nativeMethod?param1=xxx&param2=yyy\r\nexport const WEBVIEW_SCHEME = \"Ont\";\r\n\r\nexport const DEFAULT_ALGORITHM = {\r\n  algorithm: \"ECDSA\",\r\n  parameters: {\r\n    curve: \"P-256\" // also called secp256r1\r\n  }\r\n};\r\n\r\nexport const DEFAULT_SM2_ID = \"1234567812345678\";\r\n\r\nexport const TEST_NODE = \"polaris1.ont.io\"; // 0.9\r\n// export const TEST_NODE = '139.219.129.26'; // 0.81\r\n// export const TEST_NODE = '192.168.50.74';\r\n// export const TEST_NODE = '127.0.0.1';\r\n\r\nexport const MAIN_NODE = \"dappnode1.ont.io\";\r\n\r\nexport const HTTP_REST_PORT = \"20334\";\r\nexport const HTTP_WS_PORT = \"20335\";\r\nexport const HTTP_JSON_PORT = \"20336\";\r\n\r\nexport const REST_API = {\r\n  getBalance: \"/api/v1/balance\",\r\n  sendRawTx: \"/api/v1/transaction\",\r\n  getMerkleProof: \"/api/v1/merkleproof\" // end with /txHash\r\n};\r\n\r\nexport const ONT_NETWORK = {\r\n  MAIN: \"MainNet\",\r\n  TEST: \"TestNet\"\r\n};\r\n\r\nexport const TEST_ONT_URL = {\r\n  SOCKET_URL: `ws://${TEST_NODE}:${HTTP_WS_PORT}`,\r\n\r\n  RPC_URL: `http://${TEST_NODE}:${HTTP_JSON_PORT}`,\r\n\r\n  REST_URL: `http://${TEST_NODE}:${HTTP_REST_PORT}`,\r\n\r\n  sendRawTxByRestful: `http://${TEST_NODE}:${HTTP_REST_PORT}${\r\n    REST_API.sendRawTx\r\n  }`\r\n};\r\n\r\nexport const MAIN_ONT_URL = {\r\n  SOCKET_URL: `ws://${MAIN_NODE}:${HTTP_WS_PORT}`,\r\n\r\n  RPC_URL: `http://${MAIN_NODE}:${HTTP_JSON_PORT}/`,\r\n\r\n  REST_URL: `http://${MAIN_NODE}:${HTTP_REST_PORT}/`,\r\n\r\n  sendRawTxByRestful: `http://${TEST_NODE}:${HTTP_REST_PORT}${\r\n    REST_API.sendRawTx\r\n  }`\r\n};\r\n\r\nexport const TOKEN_TYPE = {\r\n  ONT: \"ONYX\",\r\n  ONG: \"OXG\"\r\n};\r\n\r\nexport const DEFAULT_GAS_LIMIT = 30000;\r\n\r\nexport const NATIVE_INVOKE_NAME = \"OnyxChain.Native.Invoke\";\r\n\r\nexport const TX_MAX_SIG_SIZE = 16;\r\n\r\n// tslint:disable-next-line:quotemark\r\nexport const ONT_BIP44_PATH = \"m/44'/1024'/0'/0/0\";\r\n\r\nexport const UNBOUND_GENERATION_AMOUNT = [\r\n  5,\r\n  4,\r\n  3,\r\n  3,\r\n  2,\r\n  2,\r\n  2,\r\n  1,\r\n  1,\r\n  1,\r\n  1,\r\n  1,\r\n  1,\r\n  1,\r\n  1,\r\n  1,\r\n  1,\r\n  1\r\n];\r\n\r\nexport const UNBOUND_TIME_INTERVAL = 31536000;\r\n\r\nexport const ONT_TOTAL_SUPPLY = 1000000000;\r\n\r\nexport const GENESIS_BLOCK_TIMESTAMP = 1530316800;\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as CTX from 'milagro-crypto-js';\r\nimport * as utils from '../utils';\r\n\r\n/**\r\n * Issuer\r\n *  Issuer in Anonymous Credential\r\n */\r\nexport class Issuer {\r\n\r\n    sk: SecretKey;\r\n    pk: IssuerPublicKey;\r\n    // AttrMap: Map<string, number>;\r\n    AttributeName: string[];\r\n\r\n    param: CryptoSuite;\r\n\r\n    constructor(curve: string) {\r\n        this.param = new CryptoSuite(curve);\r\n        this.sk = new SecretKey(this.param);\r\n    }\r\n\r\n    /* GenerateSk():SecretKey\r\n     *  generate a random secret key\r\n     */\r\n    GenerateSk(): SecretKey {\r\n        this.sk.Rand();\r\n        return this.sk;\r\n    }\r\n\r\n    /* GenerateKeyPair()\r\n     *  generate a random secret key\r\n     */\r\n    GenerateKeyPair() {\r\n        this.sk = SecretKey.GenerateSk(this.param);\r\n        this.pk = this.sk.GenerateIssuerPublicKey();\r\n    }\r\n\r\n    /* SetAttributeSet(AttributeName:string[])\r\n     *  generate a random secret key\r\n     */\r\n    SetAttributeSet(AttributeName: string[]) {\r\n        this.AttributeName = AttributeName;\r\n        this.pk.GenerateAttr(AttributeName);\r\n    }\r\n\r\n    /* Sign(Nym, attrs):Credential\r\n     *  sign a credential for a user\r\n     */\r\n    Sign(Nym: any, attrs: any[]): Credential {\r\n        // random e, s\r\n        const e = this.param.getRandBN();\r\n        const s = this.param.getRandBN();\r\n        const B = new this.param.ECP(); // B = g1 · HRand^s · Nym · MulAll(HAttrs[i]^(Attrs[i]))\r\n        B.copy(this.param.g1);\r\n        B.add(this.param.PAIR.G1mul(this.pk.h0, s));\r\n        B.add(Nym);\r\n        for (let i = 0; i < this.pk.attr.length; i++) {\r\n            B.add(this.param.PAIR.G1mul(this.pk.h[i], attrs[i]));\r\n        }\r\n\r\n        let A = new this.param.ECP(); // A = B^(1/(e+x))\r\n        const tmp = new this.param.BIG(); // tmp = (1/(e+x))\r\n        tmp.copy(e);\r\n        tmp.add(this.sk.value); // !!!!!!!!!!!\r\n        tmp.invmodp(this.param.order);\r\n\r\n        A = this.param.PAIR.G1mul(B, tmp);\r\n\r\n        const cred = new Credential(this.param);\r\n        cred.Set(A, B, e, s, attrs);\r\n        return cred;\r\n    }\r\n\r\n    /* GetPk()\r\n     *  get issuer's public key\r\n     */\r\n    GetPk(): IssuerPublicKey {\r\n        return IssuerPublicKey.COPY(this.pk);\r\n    }\r\n\r\n    /* GenerateSk():SecretKey\r\n     *  generate a random secret key\r\n     */\r\n    GenerateNonce(): any {\r\n        const nonce = this.param.getRandBN();\r\n        return nonce;\r\n    }\r\n\r\n    VerifyCredentialRequest(CR: any): boolean {\r\n        return this.pk.VerifyCredentialRequest(CR);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * User\r\n *  An user in Anonymous Credential\r\n *  Prover and Verifier are all user.\r\n */\r\nexport class User {\r\n\r\n    attrs: any[];\r\n\r\n    private sk: SecretKey;\r\n    private Nym: any;\r\n    // private pi: {\r\n    //     C: any,\r\n    //     S: any\r\n    // };\r\n\r\n    private Cred: Credential;\r\n\r\n    private ipk: IssuerPublicKey;\r\n\r\n    private param: CryptoSuite;\r\n\r\n    constructor(curve: string) {\r\n        this.param = new CryptoSuite(curve);\r\n    }\r\n\r\n    /* GenerateSk():SecretKey\r\n     *  generate a random secret key\r\n     */\r\n    GenerateSk(): SecretKey {\r\n        this.sk = SecretKey.GenerateSk(this.param);\r\n        return this.sk;\r\n    }\r\n\r\n    /* SetIpk(ipk:IssuerPublicKey)\r\n     *  save issuer's public key\r\n     */\r\n    SetIpk(ipk: IssuerPublicKey) {\r\n        this.ipk = IssuerPublicKey.COPY(ipk);\r\n    }\r\n\r\n    GenerateCrendentialRequest(nonce: any): any {\r\n        if (this.ipk === undefined) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log('Please set ipk first.');\r\n            return;\r\n        }\r\n\r\n        const ipk = this.ipk;\r\n        const Nym = this.param.PAIR.G1mul(ipk.h_sk, this.sk.value); // Nym\r\n\r\n        const r = this.param.getRandBN(); // r\r\n        const t1 = this.param.PAIR.G1mul(ipk.h_sk, r); // t1\r\n\r\n        const C = this.param.hashToBN(t1, ipk.h_sk, Nym, nonce);\r\n\r\n        const S = this.param.BIG.modmul(C, this.sk.value, this.param.order);\r\n        S.add(r);\r\n        S.mod(this.param.order);\r\n\r\n        const pi = {\r\n            C,\r\n            S\r\n        };\r\n\r\n        const attrs = this.param.genAttrBN(ipk.attr);\r\n\r\n        this.Nym = Nym;\r\n        this.attrs = attrs;\r\n\r\n        const CR = {\r\n            Nym,\r\n            pi,\r\n            nonce,\r\n            attrs\r\n        };\r\n\r\n        return CR;\r\n    }\r\n\r\n    VerifyBBSplus(Cred: Credential): boolean {\r\n        // pk   <- ipk.w\r\n        // m    <- attrs\r\n        // sig  <- (A,E,s)\r\n\r\n        // check if\r\n        // e(A, g2^E * pk) == e(B, g2)\r\n        // and if\r\n        // B == g1 * HRand^s * Nym * (h1^m1 * ... * hL^mL)\r\n\r\n        const wg2e = new this.param.ECP2();\r\n        wg2e.copy(this.ipk.w);\r\n        wg2e.add(this.param.PAIR.G2mul(this.param.g2, Cred.sig.e));\r\n        wg2e.affine(); // ~!!!!use affine() after ECP's mul operation, for pairing.\r\n\r\n        const A = new this.param.ECP();\r\n        A.copy(Cred.sig.A);\r\n        A.affine();\r\n\r\n        let left = this.param.PAIR.ate(wg2e, A);\r\n        left = this.param.PAIR.fexp(left);\r\n\r\n        const B = new this.param.ECP();\r\n        B.copy(this.param.g1);\r\n        B.add(this.param.PAIR.G1mul(this.ipk.h0, Cred.sig.s));\r\n        B.add(this.Nym);\r\n\r\n        for (let i = 0; i < Cred.attrs.length; i++) {\r\n            B.add(this.param.PAIR.G1mul(this.ipk.h[i], Cred.attrs[i]));\r\n        }\r\n\r\n        B.affine();\r\n        let right = this.param.PAIR.ate(this.param.g2, B);\r\n        right = this.param.PAIR.fexp(right);\r\n\r\n        return left.equals(right);\r\n    }\r\n\r\n    SetCredential(Cred: Credential) {\r\n        this.Cred = new Credential(this.param);\r\n        this.Cred.Copy(Cred);\r\n        return true;\r\n    }\r\n\r\n    Prove(D: any[]) {\r\n        const ipk = this.ipk;\r\n        const Cred = this.Cred;\r\n\r\n        const r1 = this.param.getRandBN(); // r1\r\n\r\n        const A_ = this.param.PAIR.G1mul(Cred.sig.A, r1); // A'\r\n\r\n        const r3 = new this.param.BIG(0); // r3\r\n        r3.copy(r1);\r\n        r3.invmodp(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        let _e = new this.param.BIG(0); // -e\r\n        _e.copy(Cred.sig.e);\r\n        _e = this.param.BIG.modneg(_e, this.param.order);\r\n\r\n        const _A = this.param.PAIR.G1mul(A_, _e); // _A\r\n        _A.add(this.param.PAIR.G1mul(Cred.sig.B, r1));\r\n\r\n        const r2 = this.param.getRandBN(); // r2\r\n        // tslint:disable-next-line:variable-name\r\n        let _r2 = new this.param.BIG(0); // -r2\r\n        _r2.copy(r2);\r\n        _r2 = this.param.BIG.modneg(_r2, this.param.order);\r\n\r\n        const B_ = this.param.PAIR.G1mul(Cred.sig.B, r1); // B'\r\n        B_.add(this.param.PAIR.G1mul(ipk.h0, _r2));\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        let s_ = this.param.BIG.modmul(r2, r3, this.param.order); // s'\r\n        s_ = this.param.BIG.modneg(s_, this.param.order);\r\n        s_.add(Cred.sig.s);\r\n        s_.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const r_a = []; // r_a[]\r\n        for (let i = 0; i < D.length; i++) {\r\n            if (D[i] === 0) {\r\n                r_a[i] = this.param.getRandBN();\r\n            } else {\r\n                r_a[i] = false;\r\n            }\r\n        }\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const r_e = this.param.getRandBN();\r\n        // tslint:disable-next-line:variable-name\r\n        const r_r2 = this.param.getRandBN();\r\n        // tslint:disable-next-line:variable-name\r\n        const r_r3 = this.param.getRandBN();\r\n        // tslint:disable-next-line:variable-name\r\n        const r_s_ = this.param.getRandBN();\r\n        // tslint:disable-next-line:variable-name\r\n        const r_sk = this.param.getRandBN();\r\n\r\n        const E = this.param.PAIR.G1mul(ipk.h_sk, r_sk); // E\r\n\r\n        const t1 = this.param.PAIR.G1mul(A_, r_e); // t1\r\n        t1.add(this.param.PAIR.G1mul(ipk.h0, r_r2));\r\n\r\n        const t2 = this.param.PAIR.G1mul(B_, r_r3); // t2\r\n        t2.add(this.param.PAIR.G1mul(ipk.h0, r_s_));\r\n        t2.add(this.param.PAIR.G1mul(E, new this.param.BIG(-1)));\r\n        for (let i = 0; i < r_a.length; i++) {\r\n            if (r_a[i] !== false) {\r\n                t2.add(this.param.PAIR.G1mul(ipk.h[i], r_a[i]));\r\n            }\r\n        }\r\n\r\n        // c' = H(A', _A, B', Nym, t1, t2, g1, HRand, h1, ... , hL, w)\r\n        // tslint:disable-next-line:variable-name\r\n        const c_ = this.param.hashToBN(\r\n            A_,\r\n            _A,\r\n            B_,\r\n            this.Nym,\r\n            t1,\r\n            t2,\r\n            this.param.g1,\r\n            ipk.h0,\r\n            ipk.h,\r\n            ipk.w\r\n        );\r\n\r\n        const nonce = this.param.getRandBN();\r\n        // c = H(nonce, c', (D, I))\r\n        const c = this.param.hashToBN(nonce, c_, D, this.attrs);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_sk = new this.param.BIG(0);\r\n        s_sk.copy(r_sk);\r\n        s_sk.add(this.param.BIG.modmul(c, this.sk.value, this.param.order));\r\n        s_sk.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_a = [];\r\n        for (let i = 0; i < D.length; i++) {\r\n            if (D[i] === 0) {\r\n                s_a[i] = new this.param.BIG(0);\r\n                s_a[i].copy(r_a[i]);\r\n                s_a[i].sub(this.param.BIG.modmul(c, this.attrs[i], this.param.order));\r\n                s_a[i].mod(this.param.order);\r\n            } else {\r\n                s_a[i] = false;\r\n            }\r\n        }\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_e = new this.param.BIG(0);\r\n        s_e.copy(r_e);\r\n        s_e.sub(this.param.BIG.modmul(c, Cred.sig.e, this.param.order));\r\n        s_e.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_r2 = new this.param.BIG(0);\r\n        s_r2.copy(r_r2);\r\n        s_r2.add(this.param.BIG.modmul(c, r2, this.param.order));\r\n        s_r2.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_r3 = new this.param.BIG(0);\r\n        s_r3.copy(r_r3);\r\n        s_r3.add(this.param.BIG.modmul(c, r3, this.param.order));\r\n        s_r3.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_s_ = new this.param.BIG(0);\r\n        s_s_.copy(r_s_);\r\n        s_s_.sub(this.param.BIG.modmul(c, s_, this.param.order));\r\n        s_s_.mod(this.param.order);\r\n\r\n        const pi = {\r\n            c,\r\n            s_sk,\r\n            s_a,\r\n            s_e,\r\n            s_r2,\r\n            s_r3,\r\n            s_s_,\r\n            nonce\r\n        };\r\n\r\n        const proof = {\r\n            A_,\r\n            _A,\r\n            B_,\r\n            Nym: this.Nym,\r\n            pi\r\n        };\r\n\r\n        return proof;\r\n    }\r\n\r\n    Verify(proof: any, D: any[], attrs: any[]): boolean {\r\n        const ipk = this.ipk;\r\n\r\n        // make sure A is not infinity\r\n        const O = new this.param.ECP(0); // Add\r\n        // let O = new this.param.ECP(1); // Muliply\r\n        if (proof.A_.equals(O)) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log('A\\' == O return true, verify failed.');\r\n            return false;\r\n        }\r\n\r\n        const A_ = new this.param.ECP();\r\n        A_.copy(proof.A_);\r\n        const w = new this.param.ECP2();\r\n        w.copy(ipk.w);\r\n        const _A = new this.param.ECP();\r\n        _A.copy(proof._A);\r\n        const g2Dup = new this.param.ECP2();\r\n        g2Dup.copy(this.param.g2);\r\n\r\n        A_.affine();\r\n        w.affine();\r\n        _A.affine();\r\n        g2Dup.affine();\r\n\r\n        let left = this.param.PAIR.ate(w, A_);\r\n        let right = this.param.PAIR.ate(g2Dup, _A);\r\n\r\n        left = this.param.PAIR.fexp(left);\r\n        right = this.param.PAIR.fexp(right);\r\n\r\n        if (!left.equals(right)) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log('e(A\\', w) == e(_A, g2) return false, verify failed.');\r\n            return false;\r\n        }\r\n\r\n        _A.copy(proof._A);\r\n        // tslint:disable-next-line:variable-name\r\n        const _t1 = this.param.PAIR.G1mul(A_, proof.pi.s_e);\r\n        _t1.add(this.param.PAIR.G1mul(ipk.h0, proof.pi.s_r2));\r\n        _A.sub(proof.B_);\r\n        _t1.add(this.param.PAIR.G1mul(_A, this.param.BIG.modneg(proof.pi.c, this.param.order)));\r\n\r\n        // ~t2 : (B')^s_r3 · HRand^s_s' · HSk^(-s_sk) · MulAll(hi^(-s_ai)) · (g1·MulAll(hi^ai))^(-c)\r\n        // tslint:disable-next-line:variable-name\r\n        const _t2 = this.param.PAIR.G1mul(proof.B_, proof.pi.s_r3);\r\n        _t2.add(this.param.PAIR.G1mul(ipk.h0, proof.pi.s_s_));\r\n        _t2.add(\r\n            this.param.PAIR.G1mul(ipk.h_sk, this.param.BIG.modneg(proof.pi.s_sk, this.param.order))\r\n        );\r\n\r\n        const sum = new this.param.ECP();\r\n        sum.copy(this.param.g1);\r\n        for (let i = 0; i < D.length; i++) {\r\n            if (D[i] === 0) {\r\n                _t2.add(this.param.PAIR.G1mul(ipk.h[i], proof.pi.s_a[i]));\r\n            } else {\r\n                sum.add(this.param.PAIR.G1mul(ipk.h[i], attrs[i]));\r\n            }\r\n        }\r\n\r\n        _t2.add(this.param.PAIR.G1mul(sum, this.param.BIG.modneg(proof.pi.c, this.param.order)));\r\n\r\n        const c1 = this.param.hashToBN(\r\n            proof.A_,\r\n            proof._A,\r\n            proof.B_,\r\n            proof.Nym,\r\n            _t1,\r\n            _t2,\r\n            this.param.g1,\r\n            ipk.h0,\r\n            ipk.h,\r\n            ipk.w\r\n        );\r\n        const c2 = this.param.hashToBN(proof.pi.nonce, c1, D, attrs);\r\n\r\n        if (this.param.BIG.comp(c2, proof.pi.c) !== 0) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log(\r\n                // tslint:disable-next-line:max-line-length\r\n                'c == H(nonce, H(A\\', _A, B\\', Nym, ~t1, ~t2, g1, HRand, h1, ... , hL, w), (D, I)) return false, verify failed.'\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * CryptoSuite\r\n *  contains everything in Paring Based Cryptography\r\n */\r\nexport class CryptoSuite {\r\n    curve: string;\r\n    ctx: any;\r\n    order: any;\r\n    PAIR: any;\r\n    ECP: any;\r\n    ECP2: any;\r\n    BIG: any;\r\n    rng: any;\r\n    g1: any;\r\n    g2: any;\r\n\r\n    constructor(curve: string) {\r\n        this.curve = curve;\r\n        this.ctx = new CTX(curve);\r\n\r\n        this.PAIR = this.ctx.PAIR;          // Set pairing interface\r\n        this.ECP = this.ctx.ECP;            // Set G1 interface\r\n        this.ECP2 = this.ctx.ECP2;          // Set G2 interface\r\n        this.BIG = this.ctx.BIG;            // Set BN interface\r\n        this.rng = new this.ctx.RAND();     // new random number generator\r\n\r\n        this.g1 = this.getG1Generator();       // g1\r\n        this.g2 = this.getG2Generator();       // g2\r\n        this.order = this.getOrder(); // n\r\n    }\r\n\r\n    getG1Generator() {\r\n        const g1 = new this.ctx.ECP(0);    // new G1\r\n        const x = new this.ctx.BIG(0);\r\n        const y = new this.ctx.BIG(0);\r\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Gx);\r\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Gy);\r\n        g1.setxy(x, y);\r\n        return g1;\r\n    }\r\n\r\n    getG2Generator() {\r\n        const g2 = new this.ctx.ECP2(0);\r\n        const x = new this.ctx.BIG(0);\r\n        const y = new this.ctx.BIG(0);\r\n        const qx = new this.ctx.FP2(0);\r\n        const qy = new this.ctx.FP2(0);\r\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Pxa);\r\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Pxb);\r\n        qx.bset(x, y);\r\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Pya);\r\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Pyb);\r\n        qy.bset(x, y);\r\n        g2.setxy(qx, qy);\r\n        return g2;\r\n    }\r\n\r\n    getOrder() {\r\n        const r = new this.ctx.BIG(0);     // new BN\r\n        r.rcopy(this.ctx.ROM_CURVE.CURVE_Order);\r\n        return r;\r\n    }\r\n\r\n    getRandBN(): any {\r\n        const buf = utils.generateRandomArray(256);\r\n        this.rng.clean();\r\n        this.rng.seed(256, buf);\r\n        const r = this.BIG.randomnum(this.order, this.rng);\r\n        return r;\r\n    }\r\n\r\n    getRandG1(): any {\r\n        const r = this.getRandBN();\r\n        const g = this.PAIR.G1mul(this.g1, r);\r\n        return g;\r\n    }\r\n\r\n    getRandG2(): any {\r\n        const r = this.getRandBN();\r\n        const g = this.PAIR.G2mul(this.g2, r);\r\n        return g;\r\n    }\r\n\r\n    hashToBN(...points: any[]): any {\r\n        let all: any[] = [];\r\n        let tmp: ConcatArray<any> = [];\r\n        points.forEach((p) => {\r\n            if (Array.isArray(p)) {\r\n                if (typeof p[0] === 'number') {\r\n                    all = all.concat(p);\r\n                    tmp = [];\r\n                } else {\r\n                    p.forEach((pp) => {\r\n                        pp.toBytes(tmp);\r\n                        all = all.concat(tmp);\r\n                        tmp = [];\r\n                    });\r\n                }\r\n            } else {\r\n                p.toBytes(tmp);\r\n                all = all.concat(tmp);\r\n                tmp = [];\r\n            }\r\n        });\r\n        const H = new this.ctx.HASH256();\r\n        H.process_array(all);\r\n        const R = H.hash();\r\n        const C = this.BIG.fromBytes(R);\r\n        C.mod(this.order);\r\n        return C;\r\n    }\r\n\r\n    genAttrBN(attrs: any): any {\r\n        const HAttr = [];\r\n\r\n        for (let i = 0; i < attrs.length; i++) {\r\n            const t = this.getRandBN();\r\n            HAttr[i] = t;\r\n        }\r\n\r\n        return HAttr;\r\n    }\r\n\r\n    genAttrElement(attrs: any): any {\r\n        const HAttr = [];\r\n\r\n        for (let i = 0; i < attrs.length; i++) {\r\n            const t = this.getRandG1();\r\n            HAttr[i] = t;\r\n        }\r\n\r\n        return HAttr;\r\n    }\r\n}\r\n\r\n/**\r\n * CryptoBase\r\n *  contains a refrence to a CryptoSuite instance.\r\n */\r\nexport class CryptoBase {\r\n    param: CryptoSuite;\r\n    constructor(param: CryptoSuite) {\r\n        this.param = param;\r\n    }\r\n}\r\n\r\nexport class SecretKey extends CryptoBase {\r\n    /*\r\n     * GenerateSk():SecretKey\r\n     * Generate a random secret key.\r\n     */\r\n    static GenerateSk(param: CryptoSuite): SecretKey {\r\n        const x = param.getRandBN(); // isk\r\n        const sk = new SecretKey(param);\r\n        sk.setValue(x);\r\n        return sk;\r\n    }\r\n\r\n    value: any;\r\n\r\n    constructor(param: CryptoSuite) {\r\n        super(param);\r\n        this.value = new this.param.BIG(0);\r\n    }\r\n\r\n    setValue(v: any) {\r\n        this.value.copy(v);\r\n    }\r\n\r\n    GenerateIssuerPublicKey(): IssuerPublicKey {\r\n        const x = this.value;\r\n        const w = this.param.PAIR.G2mul(this.param.g2, x); // w\r\n        let r = this.param.getRandBN(); // random number\r\n        // tslint:disable-next-line:variable-name\r\n        const _g1 = this.param.PAIR.G1mul(this.param.g1, r);\r\n        // tslint:disable-next-line:variable-name\r\n        const _g2 = this.param.PAIR.G1mul(_g1, x);\r\n\r\n        // zkp - pi\r\n        r = this.param.getRandBN();\r\n        const t1 = this.param.PAIR.G2mul(this.param.g2, r);\r\n        const t2 = this.param.PAIR.G1mul(_g1, r);\r\n\r\n        const C = this.param.hashToBN(t1, t2, this.param.g2, _g1, w, _g2);\r\n\r\n        const S = this.param.BIG.modmul(C, x, this.param.order);\r\n        S.add(r);\r\n        S.mod(this.param.order);\r\n\r\n        const pi = {\r\n            C,\r\n            S\r\n        };\r\n\r\n        const pk = new IssuerPublicKey(this.param);\r\n        pk.SetBasicValue(w, _g1, _g2, pi);\r\n        return pk;\r\n    }\r\n\r\n    /*\r\n     * ToBytes()\r\n     *  convert secret key to string format.\r\n     *  TODO:: add serialize function.\r\n     */\r\n    ToBytes() {\r\n        if (this.value === undefined) {\r\n            return '';\r\n        }\r\n        return this.value.toBytes();\r\n    }\r\n\r\n    /*\r\n     * FromString(s: any)\r\n     *  convert string to a SecretKey.\r\n     *  TODO:: add unserialize function.\r\n     */\r\n    FromBytes(s: any) {\r\n        this.value = this.param.BIG.fromBytes(s);\r\n        return this.value.toString();\r\n    }\r\n\r\n    /*\r\n     * GenerateSk():SecretKey\r\n     * Generate a random secret key.\r\n     */\r\n    Rand() {\r\n        const x = this.param.getRandBN(); // isk\r\n        this.setValue(x);\r\n    }\r\n\r\n}\r\n\r\nexport class IssuerPublicKey extends CryptoBase {\r\n    /*\r\n     * COPY(target: IssuerPublicKey):IssuerPublicKey\r\n     *  copy and return a new public key\r\n     */\r\n    static COPY(target: IssuerPublicKey): IssuerPublicKey {\r\n        const pk = new IssuerPublicKey(target.param);\r\n        pk.SetBasicValue(target.w, target._g1, target._g2, target.pi);\r\n        pk.SetAttrValue(target.h0, target.h_sk, target.h, target.attr);\r\n        return pk;\r\n    }\r\n\r\n    w: any;\r\n    // tslint:disable-next-line:variable-name\r\n    _g1: any;\r\n    // tslint:disable-next-line:variable-name\r\n    _g2: any;\r\n    pi: {\r\n        C: any,\r\n        S: any\r\n    };\r\n    h0: any;\r\n    // tslint:disable-next-line:variable-name\r\n    h_sk: any;\r\n    h: any;\r\n    attr: any[];\r\n\r\n    constructor(param: CryptoSuite) {\r\n        super(param);\r\n\r\n        this.w = new this.param.ECP2();\r\n        this._g1 = new this.param.ECP();\r\n        this._g2 = new this.param.ECP();\r\n\r\n        const C = new this.param.BIG();\r\n        const S = new this.param.BIG();\r\n        this.pi = {C, S};\r\n\r\n        this.h0 = new this.param.ECP();\r\n        this.h_sk = new this.param.ECP();\r\n        this.attr = [];\r\n    }\r\n\r\n    /*\r\n     * SetBasicValue(w, _g1, _g2, pi)\r\n     *  set basic values of the public key\r\n     */\r\n    // tslint:disable-next-line:variable-name\r\n    SetBasicValue(w: any, _g1: any, _g2: any, pi: any) {\r\n        this.w.copy(w);\r\n        this._g1.copy(_g1);\r\n        this._g2.copy(_g2);\r\n        this.pi.C.copy(pi.C);\r\n        this.pi.S.copy(pi.S);\r\n    }\r\n\r\n    /*\r\n     * SetAttrValue(h0, h_sk, h, attr)\r\n     *  set basic values of the public key\r\n     */\r\n    // tslint:disable-next-line:variable-name\r\n    SetAttrValue(h0: any, h_sk: any, h: any[], attr: any[]) {\r\n        this.h0.copy(h0);\r\n        this.h_sk.copy(h_sk);\r\n        this.h = [];\r\n        this.attr = [];\r\n\r\n        for (let i = 0; i < h.length; i++) {\r\n            this.h[i] = new this.param.ECP();\r\n            this.h[i].copy(h[i]);\r\n        }\r\n        for (let i = 0; i < attr.length; i++) {\r\n            this.attr[i] = attr[i];\r\n        }\r\n    }\r\n\r\n    /*\r\n     * GenerateAttr(AttributeName)\r\n     *  generates\r\n     *    ipk.h0: rand G1\r\n     *    ipk.h_sk: rand G1\r\n     *    ipk.h[]: Rand G1 array, match to AttributeName\r\n     */\r\n    GenerateAttr(AttributeName: any) {\r\n        const HAttr = this.param.genAttrElement(AttributeName);\r\n        const h0 = this.param.getRandG1();\r\n        // tslint:disable-next-line:variable-name\r\n        const h_sk = this.param.getRandG1();\r\n        const h: any[] = [];\r\n\r\n        HAttr.forEach((a: any) => {\r\n            h.push(a);\r\n        });\r\n\r\n        this.h0 = h0;\r\n        this.h_sk = h_sk;\r\n        this.h = h;\r\n        this.attr = AttributeName;\r\n    }\r\n\r\n    /*\r\n     * VerifyCredentialRequest(Nym, pi, n)\r\n     *  verifies user's credential request\r\n     */\r\n    VerifyCredentialRequest(CR: any): boolean {\r\n        const C = new this.param.BIG(0);\r\n        C.copy(CR.pi.C);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const _t1 = this.param.PAIR.G1mul(this.h_sk, CR.pi.S);\r\n        _t1.add(this.param.PAIR.G1mul(CR.Nym, this.param.BIG.modneg(C, this.param.order)));\r\n\r\n        const _C = this.param.hashToBN(_t1, this.h_sk, CR.Nym, CR.nonce);\r\n\r\n        return this.param.BIG.comp(CR.pi.C, _C) === 0;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Credential\r\n *  The credential generated from issuer\r\n */\r\nexport class Credential extends CryptoBase {\r\n    sig: {\r\n        A: any,\r\n        B: any,\r\n        e: any,\r\n        s: any\r\n    };\r\n    attrs: any[];\r\n\r\n    constructor(param: CryptoSuite) {\r\n        super(param);\r\n        const A = new this.param.ECP();\r\n        const B = new this.param.ECP();\r\n        const e = new this.param.BIG();\r\n        const s = new this.param.BIG();\r\n        this.sig = {A, B, e, s};\r\n        this.attrs = [];\r\n    }\r\n\r\n    Set(A: any, B: any, e: any, s: any, attrs: any) {\r\n        this.sig.A.copy(A);\r\n        this.sig.B.copy(B);\r\n        this.sig.e.copy(e);\r\n        this.sig.s.copy(s);\r\n\r\n        for (let i = 0; i < attrs.length; i++) {\r\n            this.attrs[i] = new this.param.BIG();\r\n            this.attrs[i].copy(attrs[i]);\r\n        }\r\n    }\r\n\r\n    Copy(target: Credential) {\r\n        this.Set(target.sig.A, target.sig.B, target.sig.e, target.sig.s, target.attrs);\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * Elliptic curve used.\r\n */\r\nexport class CurveLabel {\r\n    static values: CurveLabel[] = [];\r\n\r\n    static SECP224R1 = new CurveLabel('P-224', 1, 'p224');\r\n    static SECP256R1 = new CurveLabel('P-256', 2, 'p256');\r\n    static SECP384R1 = new CurveLabel('P-384', 3, 'p384');\r\n    static SECP521R1 = new CurveLabel('P-521', 4, 'p521');\r\n    static SM2P256V1 = new CurveLabel('sm2p256v1', 20, 'sm2p256v1');\r\n    static ED25519 = new CurveLabel('ed25519', 25, 'ed25519');\r\n\r\n    /**\r\n     * Finds Curvecorresponding to specified hex representation.\r\n     *\r\n     * @param hex Byte hex value\r\n     */\r\n    static fromHex(hex: number): CurveLabel {\r\n        const item = CurveLabel.values.find((v) => v.hex === hex);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Finds Curve corresponding to specified label representation.\r\n     *\r\n     * @param label Label\r\n     */\r\n    static fromLabel(label: string): CurveLabel {\r\n        const item = CurveLabel.values.find((v) => v.label === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    label: string;\r\n    hex: number;\r\n    preset: string;\r\n\r\n    constructor(label: string, hex: number, preset: string) {\r\n        this.label = label;\r\n        this.hex = hex;\r\n        this.preset = preset;\r\n\r\n        CurveLabel.values.push(this);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as crypto from 'crypto';\r\nimport * as elliptic from 'elliptic';\r\nimport * as pkcs7 from 'pkcs7';\r\n\r\nexport class Ecies {\r\n    /**\r\n     * Algorithm used for encryption.\r\n     */\r\n    encAlg: string;\r\n    /**\r\n     * Hash Algorithm used for kdf.\r\n     */\r\n    hashAlg: string;\r\n    /**\r\n     * Hash digest byte size.\r\n     */\r\n    digestSize: number;\r\n    /**\r\n     * Key input and out put format.\r\n     */\r\n    keyFormat: string;\r\n    /**\r\n     * Initialized Vector\r\n     */\r\n    iv: Buffer;\r\n    /**\r\n     * Elliptic Curve instance\r\n     */\r\n    ec: any;\r\n    /**\r\n     * key pair from\r\n     * ec instance\r\n     */\r\n    keyPair: any;\r\n\r\n    /**\r\n     * if true, the pubkey will be\r\n     * in compressed format, begin with '02' or '03'.\r\n     * if false, begin with '04'\r\n     */\r\n    compact: boolean;\r\n\r\n    /**\r\n     * for curve name,\r\n     * go https://github.com/indutny/elliptic\r\n     * for reference\r\n     */\r\n    constructor(Curve: string) {\r\n        // default setting\r\n        this.encAlg = 'aes-256-cbc';\r\n        this.hashAlg = 'sha256';\r\n        this.digestSize = 32;\r\n        this.keyFormat = 'hex';\r\n        this.compact = true;\r\n\r\n        // const curve = Curve || 'secp256r1';\r\n        const curve = Curve || 'p256';\r\n\r\n        this.ec = new elliptic.ec(curve);\r\n        this.keyPair = this.ec.genKeyPair();\r\n        this.iv = Buffer.alloc(0);\r\n    }\r\n    /**\r\n     * generate random key pair\r\n     */\r\n    generateKeyPair(): any {\r\n        this.keyPair = this.ec.genKeyPair();\r\n        return {\r\n            priv: this.keyPair.getPrivate('hex'),\r\n            pub: this.keyPair.getPublic(this.compact, 'hex')\r\n        };\r\n    }\r\n    /**\r\n     * set key pair with private key\r\n     * @param privHex private key in hex coding.\r\n     */\r\n    setKeyPair(privHex: string) {\r\n        this.keyPair = this.ec.keyFromPrivate(privHex, 'hex');\r\n    }\r\n    /**\r\n     * get key pair in use\r\n     * @return = {pri, pub}\r\n     * all in hex coding.\r\n     */\r\n    getKeyPair(): any {\r\n        return {\r\n            priv: this.keyPair.getPrivate('hex'),\r\n            pub: this.keyPair.getPublic(this.compact, 'hex')\r\n        };\r\n    }\r\n\r\n    /**\r\n     * encrypt a message with given\r\n     * public key and initialized vector\r\n     *\r\n     * @param pubkey hex string of public key\r\n     * @param msg byte buffer of message\r\n     * @param keylen byte length of kdf's output.\r\n     */\r\n    // tslint:disable-next-line:variable-name\r\n    enc(pubkey: string, msg: Buffer, keylen: number, _iv?: string): any {\r\n        const publicB = this.ec.keyFromPublic(pubkey, 'hex').getPublic();\r\n\r\n        // generate a random number\r\n        // r = (0, order)\r\n        const tmpKP = this.ec.genKeyPair();\r\n        const r = tmpKP.getPrivate();\r\n\r\n        const gTilde = tmpKP.getPublic();\r\n        const hTilde = publicB.mul(r);\r\n\r\n        const out = gTilde.encode('hex');\r\n        const PEH = hTilde.getX().toString('hex');\r\n        const seed = Buffer.from(out + PEH, 'hex');\r\n\r\n        const derivedKeyArray = this.kdf2(\r\n            seed,\r\n            keylen * 8,\r\n            this.digestSize,\r\n            this.hashAlg\r\n        );\r\n        if (!derivedKeyArray) {\r\n            return;\r\n        }\r\n        const derivedKey = Buffer.concat(derivedKeyArray);\r\n\r\n        let iv = Buffer.alloc(16);\r\n        if (!_iv) {\r\n            // generate a random iv, fixed size\r\n            crypto.randomFillSync(iv);\r\n        } else {\r\n            iv = Buffer.from(_iv, 'hex');\r\n        }\r\n\r\n        const algorithm = this.encAlg;\r\n\r\n        const cipher = crypto.createCipheriv(algorithm, derivedKey, iv);\r\n        cipher.setAutoPadding(false);\r\n\r\n        const msgCipher =\r\n            cipher.update(pkcs7.pad(msg), 'binary', 'hex') +\r\n            cipher.final('hex');\r\n\r\n        return {\r\n            iv: iv.toString('hex'),\r\n            out,\r\n            msgCipher\r\n        };\r\n    }\r\n    /**\r\n     * encrypt a message with given\r\n     * public key and initialized vector\r\n     *\r\n     * @param msgCipher\r\n     * @param out\r\n     * @param iv\r\n     * @param keylen\r\n     */\r\n    dec(msgCipher: string, out: string, iv: any, keylen: number): Buffer {\r\n        const gTilde = this.ec.keyFromPublic(out, 'hex').getPublic();\r\n\r\n        const hTilde = gTilde.mul(this.keyPair.getPrivate());\r\n        const PEH = hTilde.getX().toString('hex');\r\n        const seed = Buffer.from(out + PEH, 'hex');\r\n\r\n        const derivedKeyArray = this.kdf2(\r\n            seed,\r\n            keylen * 8,\r\n            this.digestSize,\r\n            this.hashAlg\r\n        );\r\n        if (!derivedKeyArray) {\r\n            return Buffer.alloc(0);\r\n        }\r\n        const derivedKey = Buffer.concat(derivedKeyArray);\r\n        const iv2 = Buffer.from(iv, 'hex');\r\n\r\n        const algorithm = this.encAlg;\r\n        const decipher = crypto.createDecipheriv(algorithm, derivedKey, iv2);\r\n        decipher.setAutoPadding(false);\r\n        const plain =\r\n            decipher.update(msgCipher, 'hex', 'binary') +\r\n            decipher.final('binary');\r\n\r\n        // un padding\r\n        const unpad = pkcs7.unpad(Buffer.from(plain, 'binary'));\r\n\r\n        return Buffer.from(unpad);\r\n    }\r\n\r\n    /* utils */\r\n    kdf2(\r\n        seed: Buffer,\r\n        len: number,\r\n        digestSize: number,\r\n        hashFunc: string\r\n    ): Buffer[] {\r\n        if (len < 0) {\r\n            return [];\r\n        }\r\n        const byteLen = Math.ceil(len / 8);\r\n        const b = Math.ceil(byteLen / digestSize);\r\n        const key = [];\r\n        const offset = byteLen - (b - 1) * digestSize; // byte offset\r\n\r\n        let counter = 1; // 1 for pbkdf2, 0 for pbkdf1\r\n\r\n        let hashIns;\r\n        while (counter < b) {\r\n            hashIns = crypto.createHash(hashFunc);\r\n            const h = hashIns\r\n                .update(Buffer.concat([seed, this.I2OSP(counter, 4)]))\r\n                .digest();\r\n            key[counter - 1] = Buffer.alloc(offset);\r\n            key[counter - 1] = h;\r\n            counter++;\r\n        }\r\n        hashIns = crypto.createHash(hashFunc);\r\n        const hEnd = hashIns\r\n            .update(Buffer.concat([seed, this.I2OSP(counter, 4)]))\r\n            .digest();\r\n        key[counter - 1] = Buffer.alloc(offset);\r\n        key[counter - 1] = hEnd;\r\n\r\n        return key;\r\n    }\r\n\r\n    I2OSP(num: number, len: number): Buffer {\r\n        const buf = Buffer.allocUnsafe(len);\r\n        buf.writeUIntBE(num, 0, len);\r\n        return buf;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as cryptoJS from 'crypto-js';\r\nimport { sha3_224, sha3_256, sha3_384, sha3_512 } from 'js-sha3';\r\nimport { sm3 } from 'sm.js';\r\nimport { DEFAULT_ALGORITHM } from '../consts';\r\nimport { hexstring2ab } from '../utils';\r\nimport { CurveLabel } from './CurveLabel';\r\nimport { KeyType } from './KeyType';\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n/**\r\n * Specific parameters for the key type.\r\n */\r\nexport class KeyParameters {\r\n    /**\r\n     * Create KeyParameters from json.\r\n     * @param json JsonKeyParameters\r\n     */\r\n    static deserializeJson(json: JsonKeyParameters): KeyParameters {\r\n        return new KeyParameters(\r\n        CurveLabel.fromLabel(json.curve)\r\n        );\r\n    }\r\n    curve: CurveLabel;\r\n\r\n    constructor(curve: CurveLabel) {\r\n        this.curve = curve;\r\n    }\r\n\r\n    /**\r\n     * Serialize KeyParameters to json.\r\n     */\r\n    serializeJson(): JsonKeyParameters {\r\n        return {\r\n            curve: this.curve.label\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Common representation of private or public key\r\n */\r\nexport class Key {\r\n    /**\r\n     * Algorithm used for key generation.\r\n     */\r\n    algorithm: KeyType;\r\n\r\n    /**\r\n     * Parameters of the algorithm.\r\n     */\r\n    parameters: KeyParameters;\r\n\r\n    /**\r\n     * Key data.\r\n     */\r\n    key: string;\r\n\r\n    /**\r\n     * Creates Key.\r\n     *\r\n     * If no algorithm or parameters are specified, default values will be used.\r\n     * This is strongly discurraged, because it will forbid using other Key types.\r\n     * Therefore use it only for testing.\r\n     *\r\n     * @param key Hex encoded key value\r\n     * @param algorithm Key type\r\n     * @param parameters Parameters of the key type\r\n     */\r\n    constructor(key: string, algorithm?: KeyType, parameters?: KeyParameters) {\r\n        this.key = key;\r\n\r\n        if (algorithm === undefined) {\r\n            algorithm = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\r\n        }\r\n\r\n        if (parameters === undefined) {\r\n            parameters = KeyParameters.deserializeJson(DEFAULT_ALGORITHM.parameters);\r\n        }\r\n\r\n        this.algorithm = algorithm;\r\n        this.parameters = parameters;\r\n    }\r\n\r\n    /**\r\n     * Computes hash of message using hashing function of signature schema.\r\n     *\r\n     * @param msg Hex encoded input data\r\n     * @param scheme Signing schema to use\r\n     */\r\n    computeHash(msg: string, scheme: SignatureScheme): string {\r\n        switch (scheme) {\r\n        case SignatureScheme.ECDSAwithSHA224:\r\n            return cryptoJS.SHA224(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.ECDSAwithSHA256:\r\n            return cryptoJS.SHA256(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.ECDSAwithSHA384:\r\n            return cryptoJS.SHA384(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.ECDSAwithSHA512:\r\n        case SignatureScheme.EDDSAwithSHA512:\r\n            return cryptoJS.SHA512(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.ECDSAwithSHA3_224:\r\n            return sha3_224(hexstring2ab(msg));\r\n        case SignatureScheme.ECDSAwithSHA3_256:\r\n            return sha3_256(hexstring2ab(msg));\r\n        case SignatureScheme.ECDSAwithSHA3_384:\r\n            return sha3_384(hexstring2ab(msg));\r\n        case SignatureScheme.ECDSAwithSHA3_512:\r\n            return sha3_512(hexstring2ab(msg));\r\n        case SignatureScheme.ECDSAwithRIPEMD160:\r\n            return cryptoJS.RIPEMD160(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.SM2withSM3:\r\n            return (new sm3()).sum(hexstring2ab(msg), 'hex');\r\n        default:\r\n            throw new Error('Unsupported hash algorithm.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests if signing schema is compatible with key type.\r\n     *\r\n     * @param schema Signing schema to use\r\n     */\r\n    isSchemaSupported(schema: SignatureScheme): boolean {\r\n        switch (schema) {\r\n        case SignatureScheme.ECDSAwithSHA224:\r\n        case SignatureScheme.ECDSAwithSHA256:\r\n        case SignatureScheme.ECDSAwithSHA384:\r\n        case SignatureScheme.ECDSAwithSHA512:\r\n        case SignatureScheme.ECDSAwithSHA3_224:\r\n        case SignatureScheme.ECDSAwithSHA3_256:\r\n        case SignatureScheme.ECDSAwithSHA3_384:\r\n        case SignatureScheme.ECDSAwithSHA3_512:\r\n        case SignatureScheme.ECDSAwithRIPEMD160:\r\n            return this.algorithm === KeyType.ECDSA;\r\n        case SignatureScheme.EDDSAwithSHA512:\r\n            return this.algorithm === KeyType.EDDSA;\r\n        case SignatureScheme.SM2withSM3:\r\n            return this.algorithm === KeyType.SM2;\r\n        default:\r\n            throw new Error('Unsupported signature schema.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets JSON representation of the Key (Public/Private).\r\n     */\r\n    serializeJson(): JsonKey {\r\n        return {\r\n            algorithm: this.algorithm.label,\r\n            parameters: this.parameters.serializeJson(),\r\n            key: this.key\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Json representation of the Key.\r\n */\r\nexport interface JsonKey {\r\n    algorithm: string;\r\n    parameters: JsonKeyParameters;\r\n    key: string | null;\r\n    external?: any | null;\r\n}\r\n\r\n/**\r\n * Json representation of the Key parameters.\r\n */\r\nexport interface JsonKeyParameters {\r\n    curve: string;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n/**\r\n * Type of key. ECDSA is the default one to use.\r\n */\r\nexport class KeyType {\r\n    static values: KeyType[] = [];\r\n\r\n    static ECDSA = new KeyType('ECDSA', 0x12, SignatureScheme.ECDSAwithSHA256);\r\n    static SM2 = new KeyType('SM2', 0x13, SignatureScheme.SM2withSM3);\r\n    static EDDSA = new KeyType('EDDSA', 0x14, SignatureScheme.EDDSAwithSHA512);\r\n\r\n    /**\r\n     * Finds Key type corresponding to specified hex representation.\r\n     *\r\n     * @param hex Byte hex value\r\n     */\r\n    static fromHex(hex: number): KeyType {\r\n        const item = KeyType.values.find((v) => v.hex === hex);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Finds Key type corresponding to specified label representation.\r\n     *\r\n     * @param label Label\r\n     */\r\n    static fromLabel(label: string): KeyType {\r\n        const item = KeyType.values.find((v) => v.label === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    label: string;\r\n    hex: number;\r\n    defaultSchema: SignatureScheme;\r\n\r\n    constructor(label: string, hex: number, defaultSchema: SignatureScheme) {\r\n        this.label = label;\r\n        this.hex = hex;\r\n        this.defaultSchema = defaultSchema;\r\n\r\n        KeyType.values.push(this);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as bip39 from 'bip39';\r\nimport * as elliptic from 'elliptic';\r\nimport * as secureRandom from 'secure-random';\r\nimport { sm2 } from 'sm.js';\r\nimport * as wif from 'wif';\r\nimport { DEFAULT_ALGORITHM, DEFAULT_SM2_ID, ONT_BIP44_PATH } from '../consts';\r\nimport { ERROR_CODE } from '../error';\r\nimport { decryptWithGcm, encryptWithGcm, ScryptParams } from '../scrypt';\r\nimport { ab2hexstring, hexstring2ab, isBase64, str2hexstr } from '../utils';\r\nimport { Address } from './address';\r\nimport { Key, KeyParameters } from './Key';\r\nimport { KeyType } from './KeyType';\r\nimport { PublicKey } from './PublicKey';\r\nimport { Signable } from './signable';\r\nimport { Signature } from './Signature';\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst HDKey = require('@ont-community/hdkey-secp256r1');\r\n\r\nexport class PrivateKey extends Key {\r\n  /**\r\n   * Generates random Private key using supplied Key type and parameters.\r\n   *\r\n   * If no Key type or parameters is supplied, default SDK key type with default parameters will be used.\r\n   *\r\n   * @param keyType The key type\r\n   * @param parameters The parameters for the key type\r\n   */\r\n    static random(keyType?: KeyType, parameters?: KeyParameters): PrivateKey {\r\n        if (keyType === undefined) {\r\n            keyType = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\r\n        }\r\n\r\n        if (parameters === undefined) {\r\n            parameters = KeyParameters.deserializeJson(DEFAULT_ALGORITHM.parameters);\r\n        }\r\n\r\n        return new PrivateKey(ab2hexstring(secureRandom(32)), keyType, parameters);\r\n    }\r\n\r\n    /**\r\n     * Creates PrivateKey from Wallet Import Format (WIF) representation.\r\n     *\r\n     * @param wifkey WIF private key representation\r\n     *\r\n     */\r\n    static deserializeWIF(wifkey: string): PrivateKey {\r\n        const key = ab2hexstring(wif.decode(wifkey, 128).privateKey);\r\n        return new PrivateKey(key);\r\n    }\r\n\r\n    /**\r\n     * Creates PrivateKey from mnemonic according to BIP39 protocol.\r\n     *\r\n     * @param mnemonic Space separated list of words\r\n     *\r\n     */\r\n    static generateFromMnemonic(mnemonic: string, derivePath: string = ONT_BIP44_PATH): PrivateKey {\r\n        if (mnemonic.split(' ').length < 12) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\r\n\r\n        // generate privateKey\r\n        // const pri = seed.substr(0, 64);\r\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\r\n        const pri = hdkey.derive(derivePath);\r\n        const key = Buffer.from(pri.privateKey).toString('hex');\r\n        const privateKey = new PrivateKey(key);\r\n        return privateKey;\r\n    }\r\n\r\n    /**\r\n     * Signs the data with supplied private key using signature schema.\r\n     *\r\n     * If the signature schema is not provided, the default schema for this key type is used.\r\n     *\r\n     * This method is not suitable, if external keys (Ledger, TPM, ...) support is required.\r\n     *\r\n     * @param msg Hex encoded input data or Signable object\r\n     * @param schema Signing schema to use\r\n     * @param publicKeyId Id of public key\r\n     */\r\n    sign(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Signature {\r\n        if (schema === undefined) {\r\n            schema = this.algorithm.defaultSchema;\r\n        }\r\n\r\n        if (!this.isSchemaSupported(schema)) {\r\n            throw new Error('Signature schema does not match key type.');\r\n        }\r\n\r\n        // retrieves content to sign if not provided directly\r\n        if (typeof msg !== 'string') {\r\n            msg = msg.getSignContent();\r\n        }\r\n\r\n        let hash: string;\r\n        if (schema === SignatureScheme.SM2withSM3) {\r\n            // library sm.js (SM2withSM3) has implemented hashing as part of signing, therefore it is skipped\r\n            hash = msg;\r\n        } else {\r\n            hash = this.computeHash(msg, schema);\r\n        }\r\n\r\n        const signed = this.computeSignature(hash, schema);\r\n        return new Signature(schema, signed, publicKeyId);\r\n    }\r\n\r\n    /**\r\n     * Asynchroniously signs the data with supplied private key using signature schema.\r\n     *\r\n     * If the signature schema is not provided, the default schema for this key type is used.\r\n     *\r\n     * This method is suitable, if external keys (Ledger, TPM, ...) support is required.\r\n     *\r\n     * @param msg Hex encoded input data or Signable object\r\n     * @param schema Signing schema to use\r\n     * @param publicKeyId Id of public key\r\n     */\r\n    async signAsync(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Promise<Signature> {\r\n        return this.sign(msg, schema, publicKeyId);\r\n    }\r\n\r\n    /**\r\n     * Derives Public key out of Private key.\r\n     */\r\n    getPublicKey(): PublicKey {\r\n        switch (this.algorithm) {\r\n        case KeyType.ECDSA:\r\n            return this.getEcDSAPublicKey();\r\n        case KeyType.EDDSA:\r\n            return this.getEdDSAPublicKey();\r\n        case KeyType.SM2:\r\n            return this.getSM2PublicKey();\r\n        default:\r\n            throw new Error('Unsupported signature schema.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Decrypts encrypted private key with supplied password.\r\n     *\r\n     * @param keyphrase Password to decrypt with\r\n     * @param address For aad in decryption\r\n     * @param 16 secure random bytes\r\n     * @param params Optional Scrypt params\r\n     */\r\n    decrypt(keyphrase: string, address: Address, salt: string, params?: ScryptParams): PrivateKey {\r\n        // const decrypted = decrypt(this.key, keyphrase, checksum, params);\r\n        if (salt.length === 24 && isBase64(salt)) {\r\n            salt = Buffer.from(salt, 'base64').toString('hex');\r\n        }\r\n        const decrypted = decryptWithGcm(this.key, address, salt, keyphrase, params);\r\n        const decryptedKey = new PrivateKey(decrypted, this.algorithm, this.parameters);\r\n        // checkDecrypted(checksum, decryptedKey.getPublicKey().serializeHex());\r\n        const pk = decryptedKey.getPublicKey();\r\n        const addrTmp = Address.fromPubKey(pk);\r\n        if (addrTmp.toBase58() !== address.toBase58()) {\r\n            throw ERROR_CODE.Decrypto_ERROR;\r\n        }\r\n        return decryptedKey;\r\n    }\r\n\r\n    /**\r\n     * Encrypts private key with supplied password.\r\n     *\r\n     * @param keyphrase Password to encrypt with\r\n     * @param address For aad in encryption\r\n     * @param salt 16 secure random bytes\r\n     * @param params Optional Scrypt params\r\n     */\r\n    encrypt(keyphrase: string, address: Address, salt: string, params?: ScryptParams): PrivateKey {\r\n        // add address check\r\n        const publicKey = this.getPublicKey();\r\n        const addr = Address.fromPubKey(publicKey).toBase58();\r\n        if (addr !== address.toBase58()) {\r\n            throw ERROR_CODE.INVALID_ADDR;\r\n        }\r\n        const encrypted = encryptWithGcm(this.key, address, salt, keyphrase, params);\r\n        return new PrivateKey(encrypted, this.algorithm, this.parameters);\r\n    }\r\n\r\n    /**\r\n     * Derives Public key out of Private key using EcDSA algorithm.\r\n     */\r\n    getEcDSAPublicKey(): PublicKey {\r\n        const ec = new elliptic.ec(this.parameters.curve.preset);\r\n        const keyPair = ec.keyFromPrivate(this.key, 'hex');\r\n        const pk = keyPair.getPublic(true, 'hex');\r\n\r\n        return new PublicKey(pk, this.algorithm, this.parameters);\r\n    }\r\n\r\n    /**\r\n     * Derives Public key out of Private key using EdDSA algorithm.\r\n     */\r\n    getEdDSAPublicKey(): PublicKey {\r\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\r\n        const keyPair = eddsa.keyFromSecret(this.key, 'hex');\r\n        const pk = keyPair.getPublic(true, 'hex');\r\n\r\n        return new PublicKey(pk, this.algorithm, this.parameters);\r\n    }\r\n\r\n    /**\r\n     * Derives Public key out of Private key using SM2 algorithm.\r\n     */\r\n    getSM2PublicKey(): PublicKey {\r\n        const keyPair = sm2.SM2KeyPair(null, this.key);\r\n        const pk = keyPair.pubToString('compress');\r\n\r\n        return new PublicKey(pk, this.algorithm, this.parameters);\r\n    }\r\n\r\n    /**\r\n     * Computes signature of message hash using specified signature schema.\r\n     *\r\n     * @param hash Message hash\r\n     * @param schema Signature schema to use\r\n     */\r\n    computeSignature(hash: string, schema: SignatureScheme): string {\r\n        switch (schema) {\r\n        case SignatureScheme.ECDSAwithSHA224:\r\n        case SignatureScheme.ECDSAwithSHA256:\r\n        case SignatureScheme.ECDSAwithSHA384:\r\n        case SignatureScheme.ECDSAwithSHA512:\r\n        case SignatureScheme.ECDSAwithSHA3_224:\r\n        case SignatureScheme.ECDSAwithSHA3_256:\r\n        case SignatureScheme.ECDSAwithSHA3_384:\r\n        case SignatureScheme.ECDSAwithSHA3_512:\r\n        case SignatureScheme.ECDSAwithRIPEMD160:\r\n            return this.computeEcDSASignature(hash);\r\n        case SignatureScheme.EDDSAwithSHA512:\r\n            return this.computeEdDSASignature(hash);\r\n        case SignatureScheme.SM2withSM3:\r\n            return this.computeSM2Signature(hash);\r\n        default:\r\n            throw new Error('Unsupported signature schema.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Computes EcDSA signature of message hash. Curve name is derrived from private key.\r\n     *\r\n     * @param hash Message hash\r\n     */\r\n    computeEcDSASignature(hash: string): string {\r\n        const ec = new elliptic.ec(this.parameters.curve.preset);\r\n        const signed = ec.sign(hash, this.key, { canonical: true });\r\n        return Buffer.concat([\r\n            signed.r.toArrayLike(Buffer, 'be', 32),\r\n            signed.s.toArrayLike(Buffer, 'be', 32)\r\n        ]).toString('hex');\r\n    }\r\n\r\n    /**\r\n     * Computes EdDSA signature of message hash. Curve name is derrived from private key.\r\n     *\r\n     * @param hash Message hash\r\n     */\r\n    computeEdDSASignature(hash: string): string {\r\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\r\n        const signed = eddsa.sign(hash, this.key, null);\r\n        return Buffer.concat([\r\n            signed.R.toArrayLike(Buffer, 'be', 32),\r\n            signed.S.toArrayLike(Buffer, 'be', 32)\r\n        ]).toString('hex');\r\n    }\r\n\r\n    /**\r\n     * Computes SM2 signature of message hash.\r\n     *\r\n     * Only default SM2 ID is supported.\r\n     *\r\n     * @param hash Message hash\r\n     */\r\n    computeSM2Signature(hash: string): string {\r\n        const keyPair = sm2.SM2KeyPair(null, this.key);\r\n        const signed = keyPair.sign(hexstring2ab(hash));\r\n\r\n        const id = DEFAULT_SM2_ID;\r\n\r\n        return str2hexstr(id + '\\0') + signed.r + signed.s;\r\n    }\r\n\r\n    /**\r\n     * Gets Wallet Import Format (WIF) representation of the PrivateKey.\r\n     *\r\n     */\r\n    serializeWIF(): string {\r\n        return wif.encode(128, Buffer.from(this.key, 'hex'), true);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { JsonKey, KeyParameters } from './Key';\r\nimport { KeyType } from './KeyType';\r\nimport { PrivateKey } from './PrivateKey';\r\n\r\n/**\r\n * Interface for Key deserializers\r\n */\r\nexport interface KeyDeserializer {\r\n    getType(): string;\r\n    deserialize(json: JsonKey): PrivateKey;\r\n}\r\n\r\n/**\r\n * Default private key deserializer.\r\n */\r\nexport class DefaultKeyDeserializer implements KeyDeserializer {\r\n    getType(): string {\r\n        return '';\r\n    }\r\n\r\n    deserialize(json: JsonKey): PrivateKey {\r\n        if (json.key != null) {\r\n            return new PrivateKey(\r\n                json.key,\r\n                KeyType.fromLabel(json.algorithm),\r\n                KeyParameters.deserializeJson(json.parameters)\r\n            );\r\n        } else {\r\n            throw new Error('Unsupported Key type.');\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Registered key deserializers\r\n */\r\nconst keyDeserializers: KeyDeserializer[] = [];\r\nconst defaultKeyDeserializer = new DefaultKeyDeserializer();\r\n\r\n/**\r\n * Registers new external deserializer for private keys.\r\n *\r\n * @param deserializer Deserializer instance\r\n */\r\nexport function registerKeyDeserializer(deserializer: KeyDeserializer) {\r\n    keyDeserializers.push(deserializer);\r\n}\r\n\r\n/**\r\n * Creates PrivateKey from Json representation.\r\n *\r\n * @param json Json private key representation\r\n *\r\n */\r\nexport function deserializeFromJson(json: JsonKey): PrivateKey {\r\n    if (json.external == null) {\r\n        return defaultKeyDeserializer.deserialize(json);\r\n    } else {\r\n        for (const deserializer of keyDeserializers) {\r\n            if (deserializer.getType() === json.external.type) {\r\n                return deserializer.deserialize(json);\r\n            }\r\n        }\r\n\r\n        throw new Error('Unsupported Key type.');\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as elliptic from 'elliptic';\r\nimport { sm2 } from 'sm.js';\r\nimport { DEFAULT_SM2_ID } from '../consts';\r\nimport { hexstr2str, hexstring2ab, num2hexstring, StringReader } from '../utils';\r\nimport { CurveLabel } from './CurveLabel';\r\nimport { Key, KeyParameters } from './Key';\r\nimport { KeyType } from './KeyType';\r\nimport { Signable } from './signable';\r\nimport { Signature } from './Signature';\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n/**\r\n * Class to manage the public key with some userful functions.\r\n */\r\nexport class PublicKey extends Key {\r\n    /**\r\n     * Creates PublicKey from Hex representation.\r\n     *\r\n     * @param sr String reader\r\n     * @param length Byte length of the serialized object\r\n     *\r\n     */\r\n    static deserializeHex(sr: StringReader, length: number = 33): PublicKey {\r\n        if (length === 33) { // ECDSA\r\n            const algorithm = KeyType.ECDSA;\r\n            const curve = CurveLabel.SECP256R1;\r\n            const pk = sr.read(33);\r\n            return new PublicKey(pk, algorithm, new KeyParameters(curve));\r\n        } else {\r\n            const algorithmHex = parseInt(sr.read(1), 16);\r\n            const curveHex = parseInt(sr.read(1), 16);\r\n            const pk = sr.read(length - 2);\r\n\r\n            return new PublicKey(\r\n                pk,\r\n                KeyType.fromHex(algorithmHex),\r\n                new KeyParameters(CurveLabel.fromHex(curveHex))\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies if the signature was created with private key corresponding to supplied public key\r\n     * and was not tampered with using signature schema.\r\n     *\r\n     * @param msg Hex encoded input data or Signable object\r\n     * @param signature Signature object\r\n     */\r\n    verify(msg: string | Signable, signature: Signature): boolean {\r\n        if (!this.isSchemaSupported(signature.algorithm)) {\r\n            throw new Error('Signature schema does not match key type.');\r\n        }\r\n\r\n        // retrieves content to sign if not provided directly\r\n        if (typeof msg !== 'string') {\r\n            msg = msg.getSignContent();\r\n        }\r\n\r\n        let hash: string;\r\n        if (signature.algorithm === SignatureScheme.SM2withSM3) {\r\n            // library sm.js (SM2withSM3) has implemented hashing as part of verification, therefore it is skipped\r\n            hash = msg;\r\n        } else {\r\n            hash = this.computeHash(msg, signature.algorithm);\r\n        }\r\n\r\n        return this.verifySignature(hash, signature.value, signature.algorithm);\r\n    }\r\n\r\n    /**\r\n     * Serializes public key to Hex representation.\r\n     *\r\n     * Length definition is not included.\r\n     */\r\n    serializeHex(): string {\r\n        let result = '';\r\n        switch (this.algorithm) {\r\n        case KeyType.ECDSA:\r\n            result += this.key;\r\n            break;\r\n        case KeyType.EDDSA:\r\n        case KeyType.SM2:\r\n            result += num2hexstring(this.algorithm.hex);\r\n            result += num2hexstring(this.parameters.curve.hex);\r\n            result += this.key;\r\n            break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * For internal use.\r\n     * @param hash Message hash\r\n     * @param signature Hex encoded signature\r\n     * @param schema Signature scheme to use\r\n     */\r\n    verifySignature(hash: string, signature: string, schema: SignatureScheme): boolean {\r\n        switch (schema) {\r\n        case SignatureScheme.ECDSAwithSHA224:\r\n        case SignatureScheme.ECDSAwithSHA256:\r\n        case SignatureScheme.ECDSAwithSHA384:\r\n        case SignatureScheme.ECDSAwithSHA512:\r\n        case SignatureScheme.ECDSAwithSHA3_224:\r\n        case SignatureScheme.ECDSAwithSHA3_256:\r\n        case SignatureScheme.ECDSAwithSHA3_384:\r\n        case SignatureScheme.ECDSAwithSHA3_512:\r\n        case SignatureScheme.ECDSAwithRIPEMD160:\r\n            return this.verifyEcDSASignature(hash, signature);\r\n        case SignatureScheme.EDDSAwithSHA512:\r\n            return this.verifyEdDSASignature(hash, signature);\r\n        case SignatureScheme.SM2withSM3:\r\n            return this.verifySM2Signature(hash, signature);\r\n        default:\r\n            throw new Error('Unsupported signature schema.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies EcDSA signature of message hash. Curve name is derrived from private key.\r\n     *\r\n     * @param hash Message hash\r\n     * @param signature Hex encoded signature\r\n     */\r\n    verifyEcDSASignature(hash: string, signature: string): boolean {\r\n        const r = signature.substr(0, 64);\r\n        const s = signature.substr(64, 64);\r\n\r\n        const ec = new elliptic.ec(this.parameters.curve.preset);\r\n        return ec.verify(hash, { r, s }, this.key, 'hex');\r\n    }\r\n\r\n    /**\r\n     * Verifies EdDSA signature of message hash. Curve name is derrived from private key.\r\n     *\r\n     * @param hash Message hash\r\n     * @param signature Hex encoded signature\r\n     */\r\n    verifyEdDSASignature(hash: string, signature: string): boolean {\r\n        const r = signature.substr(0, 64);\r\n        const s = signature.substr(64, 64);\r\n\r\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\r\n        return eddsa.verify(hash, { r, s }, this.key, 'hex');\r\n    }\r\n\r\n    /**\r\n     * Verifies SM2 signature of message hash.\r\n     *\r\n     * Only default SM2 ID is supported.\r\n     *\r\n     * @param hash Message hash\r\n     * @param signature Hex encoded signature\r\n     */\r\n    verifySM2Signature(hash: string, signature: string): boolean {\r\n        const reader = new StringReader(signature);\r\n\r\n        const id = hexstr2str(reader.readNullTerminated());\r\n        if (id !== DEFAULT_SM2_ID && id !== '') {\r\n            throw new Error('Unsupported SM2 id used.');\r\n        }\r\n\r\n        const r = reader.read(32);\r\n        const s = reader.read(32);\r\n\r\n        const keyPair = sm2.SM2KeyPair(this.key);\r\n        return keyPair.verify(hexstring2ab(hash), r, s);\r\n    }\r\n}\r\n\r\n/**\r\n * Public key status enumaration.\r\n */\r\nexport class PublicKeyStatus {\r\n    static values: PublicKeyStatus[] = [];\r\n\r\n    static IN_USE = new PublicKeyStatus('in use');\r\n\r\n    static REVOKED = new PublicKeyStatus('revoked');\r\n\r\n    /**\r\n     * Finds Public key status corresponding to specified label representation.\r\n     *\r\n     * @param label Hex encoded label\r\n     */\r\n    static fromHexLabel(hexLabel: string): PublicKeyStatus {\r\n        const label = hexstr2str(hexLabel);\r\n\r\n        const item = PublicKeyStatus.values.find((v) => v.label === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    label: string;\r\n\r\n    constructor(label: string) {\r\n        this.label = label;\r\n\r\n        PublicKeyStatus.values.push(this);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as b64 from 'base64-url';\r\nimport { num2hexstring, StringReader } from '../utils';\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n/**\r\n * Signature generated by signing data with Private Key.\r\n */\r\nexport class Signature {\r\n    static deserializeJWT(encoded: string, algorithm: SignatureScheme, publicKeyId: string): Signature {\r\n        const decoded = b64.decode(encoded, 'hex');\r\n\r\n        return new Signature(\r\n        algorithm,\r\n        decoded,\r\n        publicKeyId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Deserializes PgpSignature to Signature.\r\n     * @param pgpSignature PgpSignature\r\n     */\r\n    static deserializePgp(pgpSignature: PgpSignature): Signature {\r\n        const value = new Buffer(pgpSignature.Value, 'base64').toString('hex');\r\n        const deserialzedValue = Signature.deserializeHex(value).value;\r\n        return new Signature(\r\n        SignatureScheme.fromLabel(pgpSignature.Algorithm),\r\n            deserialzedValue\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Deserializes hex representation to Signature\r\n     * @param data hex string\r\n     */\r\n    static deserializeHex(data: string): Signature {\r\n        if (data.length < 4) {\r\n            throw new Error('Invalid params.');\r\n        }\r\n        const sr = new StringReader(data);\r\n        const scheme = parseInt(sr.read(1), 16);\r\n        const sigScheme = SignatureScheme.fromHex(scheme);\r\n        const value = data.substr(2);\r\n        const sig = new Signature(sigScheme, value);\r\n        return sig;\r\n    }\r\n\r\n    algorithm: SignatureScheme;\r\n    value: string;\r\n\r\n    /**\r\n     * Public key Id used for create this signature.\r\n     *\r\n     */\r\n    publicKeyId?: string;\r\n\r\n    constructor(algorithm: SignatureScheme, value: string, publicKeyId?: string) {\r\n        this.algorithm = algorithm;\r\n        this.value = value;\r\n        this.publicKeyId = publicKeyId;\r\n    }\r\n\r\n    /**\r\n     * Serializes signature to Hex representation.\r\n     * For transfer to java backend and verify it.\r\n     */\r\n    serializeHex(): string {\r\n        let result = '';\r\n        result += num2hexstring(this.algorithm.hex);\r\n        result += this.value;\r\n        return result;\r\n\r\n    }\r\n\r\n    /**\r\n     * Serializes signature to PGP representation with optional PublicKeyId.\r\n     *\r\n     * @param keyId Whole Public Key Id in the form <ONTID>#keys-<id>\r\n     */\r\n    serializePgp(keyId?: string): PgpSignature {\r\n        const encoded = new Buffer(this.serializeHex(), 'hex').toString('base64');\r\n        return {\r\n            PublicKeyId: keyId,\r\n            Format: 'pgp',\r\n            Value: encoded,\r\n            Algorithm: this.algorithm.label\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Serializes signature to base64url format.\r\n     */\r\n    serializeJWT(): string {\r\n        return b64.encode(this.value, 'hex');\r\n    }\r\n}\r\n\r\n/**\r\n * PGP representation of the signature with embedded KeyId\r\n */\r\nexport interface PgpSignature {\r\n    PublicKeyId?: string;\r\n    Format: 'pgp';\r\n    Algorithm: string;\r\n    Value: string;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * Schema used during signing and verification of signature.\r\n */\r\nexport class SignatureScheme {\r\n    static values: SignatureScheme[] = [];\r\n\r\n    static ECDSAwithSHA224 = new SignatureScheme('SHA224withECDSA', 0, 'ES224');\r\n    static ECDSAwithSHA256 = new SignatureScheme('SHA256withECDSA', 1, 'ES256');\r\n    static ECDSAwithSHA384 = new SignatureScheme('SHA384withECDSA', 2, 'ES384');\r\n    static ECDSAwithSHA512 = new SignatureScheme('SHA512withECDSA', 3, 'ES512');\r\n    // tslint:disable-next-line:variable-name\r\n    static ECDSAwithSHA3_224 = new SignatureScheme('SHA3-224withECDSA', 4, 'ES3-224');\r\n    // tslint:disable-next-line:variable-name\r\n    static ECDSAwithSHA3_256 = new SignatureScheme('SHA3-256withECDSA', 5, 'ES3-256');\r\n    // tslint:disable-next-line:variable-name\r\n    static ECDSAwithSHA3_384 = new SignatureScheme('SHA3-384withECDSA', 6, 'ES3-384');\r\n    // tslint:disable-next-line:variable-name\r\n    static ECDSAwithSHA3_512 = new SignatureScheme('SHA3-512withECDSA', 7, 'ES3-512');\r\n    static ECDSAwithRIPEMD160 = new SignatureScheme('RIPEMD160withECDSA', 8, 'ER160');\r\n    static SM2withSM3 = new SignatureScheme('SM3withSM2', 9, 'SM');\r\n    static EDDSAwithSHA512 = new SignatureScheme('SHA512withEdDSA', 10, 'EDS512');\r\n\r\n    /**\r\n     * Finds Signature schema corresponding to specified hex representation.\r\n     *\r\n     * @param hex Byte hex value\r\n     */\r\n    static fromHex(hex: number): SignatureScheme {\r\n        const item = SignatureScheme.values.find((v) => v.hex === hex);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Finds Signature schema corresponding to specified label representation.\r\n     *\r\n     * @param label Label\r\n     */\r\n    static fromLabel(label: string): SignatureScheme {\r\n        const item = SignatureScheme.values.find((v) => v.label === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Finds Signature schema corresponding to specified label representation in JWS.\r\n     *\r\n     * @param label Label\r\n     */\r\n    static fromLabelJWS(label: string): SignatureScheme {\r\n        const item = SignatureScheme.values.find((v) => v.labelJWS === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    label: string;\r\n    hex: number;\r\n    labelJWS: string;\r\n\r\n    constructor(label: string, hex: number, labelJWS: string) {\r\n        this.label = label;\r\n        this.hex = hex;\r\n        this.labelJWS = labelJWS;\r\n\r\n        SignatureScheme.values.push(this);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport * as base58 from 'base-58';\r\nimport * as cryptoJS from 'crypto-js';\r\nimport { ADDR_VERSION } from '../consts';\r\nimport { ERROR_CODE } from '../error';\r\nimport opcode from '../transaction/opcode';\r\nimport { comparePublicKeys, programFromPubKey, pushBigInt } from '../transaction/program';\r\nimport { pushHexString } from '../transaction/scriptBuilder';\r\nimport { ab2hexstring, hash160, num2hexstring, sha256, StringReader } from '../utils';\r\nimport { reverseHex } from './../utils';\r\nimport { PublicKey } from './PublicKey';\r\n\r\n/**\r\n * Representation of Address.\r\n *\r\n * There are 4 types of address:\r\n * 1. Public key based\r\n * 2. Multi public key based (m, n)\r\n * 3. Contract based\r\n * 4. ONT ID based\r\n *\r\n * The value is stored as base58 or hex encoded, therefore always use\r\n * toBase58() or serialize() according to requirements.\r\n */\r\nexport class Address {\r\n    static deserialize(sr: StringReader): Address {\r\n        return new Address(sr.read(20));\r\n    }\r\n    /**\r\n     * Generates public key based address.\r\n     *\r\n     * @param publicKey Public key to use\r\n     */\r\n    static fromPubKey(publicKey: PublicKey): Address {\r\n        const program = programFromPubKey(publicKey);\r\n        // const program = publicKey.key + num2hexstring(opcode.CHECKSIG);\r\n        const programHash = hash160(program);\r\n        return new Address(programHash);\r\n    }\r\n\r\n    /**\r\n     * Generates identity based address.\r\n     * @param ontid ONT ID in the form did:ont:AXmQDzzvpEtPkNwBEFsREzApTTDZFW6frD\r\n     */\r\n    static fromOntid(ontid: string): Address {\r\n        const address = ontid.substr(8);\r\n        return new Address(address);\r\n    }\r\n\r\n    /**\r\n     * Generates address from smart contract code.\r\n     *\r\n     * @param vmCode Hex encoded smart contract code\r\n     */\r\n    static fromVmCode(vmCode: string): Address {\r\n        const programHash = hash160(vmCode);\r\n        // programHash = num2hexstring(vmType) + programHash.substring(2);\r\n        return new Address(programHash);\r\n    }\r\n\r\n    /**\r\n     * Generates (m, n) threshold address.\r\n     *\r\n     * m - threshold\r\n     * n - total number of public keys\r\n     *\r\n     * @param m The threshold\r\n     * @param publicKeys Public key\r\n     */\r\n    static fromMultiPubKeys(m: number, publicKeys: PublicKey[]): Address {\r\n        const n = publicKeys.length;\r\n\r\n        if (m <= 0 || m > n || n > 24 ) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n\r\n        // const pkHexStrs = publicKeys.map((p) => p.serializeHex());\r\n        // pkHexStrs.sort();\r\n        publicKeys.sort(comparePublicKeys);\r\n        let result = '';\r\n        result += pushBigInt(m);\r\n        for (const s of publicKeys) {\r\n            result += pushHexString(s.serializeHex());\r\n        }\r\n        result += pushBigInt(n);\r\n        result += num2hexstring(opcode.CHECKMULTISIG);\r\n        const programHash = hash160(result);\r\n        return new Address(programHash);\r\n    }\r\n\r\n    /**\r\n     * Deterministicaly generates ONT ID from this public key.\r\n     */\r\n    static generateOntid(publicKey: PublicKey): string {\r\n        const address = Address.fromPubKey(publicKey);\r\n        const ontid = 'did:ont:' + address.toBase58();\r\n\r\n        return ontid;\r\n    }\r\n\r\n    /**\r\n     * Base58 or Hex encoded address\r\n     */\r\n    value: string;\r\n\r\n    constructor(value: string) {\r\n        if (value.length === 40 || value.length === 34) {\r\n            this.value = value;\r\n        } else {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets Base58 encoded representation of the address.\r\n     */\r\n    toBase58() {\r\n        if (this.value.length === 34) {\r\n            return this.value;\r\n        } else {\r\n            return hexToBase58(this.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets Hex encoded representation of the address.\r\n     */\r\n    toHexString() {\r\n        let val;\r\n        if (this.value.length === 40) {\r\n            val = this.value;\r\n        } else {\r\n            val = base58ToHex(this.value);\r\n        }\r\n        return reverseHex(val);\r\n    }\r\n\r\n    serialize() {\r\n        if (this.value.length === 40) {\r\n            return this.value;\r\n        } else {\r\n            return base58ToHex(this.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Computes the salt from address for decrypt.\r\n     */\r\n    getB58Checksum() {\r\n        const address = this.toBase58();\r\n        const hash = cryptoJS.SHA256(address).toString();\r\n        const hash2 = sha256(hash);\r\n        return hash2.slice(0, 8);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param programhash\r\n */\r\nfunction hexToBase58(hexEncoded: string): string {\r\n    const data = ADDR_VERSION + hexEncoded;\r\n\r\n    const hash = sha256(data);\r\n    const hash2 = sha256(hash);\r\n    const checksum = hash2.slice(0, 8);\r\n\r\n    const datas = data + checksum;\r\n\r\n    return base58.encode(new Buffer(datas, 'hex'));\r\n}\r\n\r\nfunction base58ToHex(base58Encoded: string) {\r\n    const decoded = base58.decode(base58Encoded);\r\n    const hexEncoded = ab2hexstring(decoded).substr(2, 40);\r\n\r\n    if (base58Encoded !== hexToBase58(hexEncoded)) {\r\n        throw new Error('[addressToU160] decode encoded verify failed');\r\n    }\r\n    return hexEncoded;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nexport { Address } from './address';\r\nexport { KeyType } from './KeyType';\r\nexport { CurveLabel } from './CurveLabel';\r\nexport { SignatureScheme } from './SignatureScheme';\r\nexport { KeyParameters, JsonKeyParameters, JsonKey } from './Key';\r\nexport { PrivateKey } from './PrivateKey';\r\nexport { KeyDeserializer, registerKeyDeserializer } from './PrivateKeyFactory';\r\nexport { PublicKey, PublicKeyStatus } from './PublicKey';\r\nexport { Signature, PgpSignature } from './Signature';\r\nexport { Signable } from './signable';\r\nexport { Issuer, User } from './AnonymousCredential';\r\nexport { Ecies } from './Ecies';\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nexport enum ERROR_CODE {\r\n    SUCCESS\t            =     0, // 成功\r\n    SESSION_EXPIRED     = 41001,   // 会话无效或已过期（ 需要重新登录） |\r\n    SERVICE_CEILING     = 41002,   // 达到服务上限 |\r\n    ILLEGAL_DATAFORMAT  = 41003,   // 不合法数据格式 |\r\n    INVALID_VERSION     = 41004,   // 不合法的版本 |\r\n    INVALID_METHOD      = 42001,   // 无效的方法 |\r\n    INVALID_PARAMS      = 42002,   // 无效的参数 |\r\n    INVALID_TRANSACTION = 43001,   // 无效的交易 |\r\n    INVALID_ASSET       = 43002,   // 无效的资产 |\r\n    INVALID_BLOCK       = 43003,   // 无效的块 |\r\n    UNKNOWN_TRANSACTION = 44001,   // 找不到交易 |\r\n    UNKNOWN_ASSET       = 44002,   // 找不到资产 |\r\n    UNKNOWN_BLOCK       = 44003,   // 找不到块 |\r\n    UNKNWN_CONTRACT     = 44004,   // 找不到合约 |\r\n    INTERNAL_ERROR      = 45001,   // 内部错误 |\r\n    SMARTCODE_ERROR     = 47001,   // 智能合约错误 |\r\n\r\n    UNKNOWN_ONTID       = 51000,   // 不存在的ONT ID,\r\n    NETWORK_ERROR       = 52000,   // 网络错误,\r\n    Decrypto_ERROR      = 53000,    // 解密错误,\r\n    INVALID_ADDR        = 53001,   // 地址验证失败\r\n\r\n    PreExec_ERROR = 54000   // 预执行错误\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { Address, JsonKey, PrivateKey } from './crypto';\r\nimport { deserializeFromJson } from './crypto/PrivateKeyFactory';\r\nimport { ScryptParams } from './scrypt';\r\nimport { Transaction } from './transaction/transaction';\r\nimport { signTransaction } from './transaction/transactionBuilder';\r\nimport { ab2hexstring, generateRandomArray, randomBytes } from './utils';\r\n\r\n/**\r\n * Control data of identity\r\n */\r\nexport class ControlData {\r\n    static fromJson(json: any): ControlData {\r\n        const privateKey = deserializeFromJson(json as JsonKey);\r\n        const cd = new ControlData(json.id, privateKey, new Address(json.address), json.salt);\r\n        cd.publicKey = json.publicKey;\r\n        cd.hash = json.hash;\r\n        return cd;\r\n    }\r\n\r\n    /**\r\n     * Id of control data\r\n     */\r\n    id: string;\r\n    /**\r\n     * Encrypted private key\r\n     */\r\n    encryptedKey: PrivateKey;\r\n    /**\r\n     * Address of control data\r\n     */\r\n    address: Address;\r\n    /**\r\n     * Salt of control data\r\n     */\r\n    salt: string;\r\n    /**\r\n     * hash type\r\n     */\r\n    hash: string = 'sha256';\r\n    /**\r\n     * The public key\r\n     */\r\n    publicKey: string;\r\n\r\n    constructor(id: string, encryptedKey: PrivateKey, address: Address, salt: string) {\r\n        this.id = id;\r\n        this.encryptedKey = encryptedKey;\r\n        this.address = address;\r\n        this.salt = salt;\r\n    }\r\n\r\n    toJson(): object {\r\n        return {\r\n            id: this.id,\r\n            ...this.encryptedKey.serializeJson(),\r\n            address: this.address.toBase58(),\r\n            salt: this.salt,\r\n            ['enc-alg']: 'aes-256-gcm',\r\n            hash: this.hash,\r\n            publicKey: this.publicKey\r\n        };\r\n    }\r\n}\r\n\r\nexport class Identity {\r\n    /**\r\n     * Import identity\r\n     * @param label Name of identity\r\n     * @param encryptedPrivateKey Encrypted private key\r\n     * @param password User's password to decrypt\r\n     * @param address Address to decrypt\r\n     * @param saltBase64 Salt to decrypt\r\n     * @param params Optional params to decrypt\r\n     */\r\n    static importIdentity(\r\n        label: string,\r\n        encryptedPrivateKey: PrivateKey,\r\n        password: string,\r\n        address: Address,\r\n        saltBase64: string,\r\n        params?: ScryptParams\r\n    ): Identity {\r\n        // create identity\r\n        const identity = new Identity();\r\n        const salt = Buffer.from(saltBase64, 'base64').toString('hex');\r\n        const privateKey = encryptedPrivateKey.decrypt(password, address, salt, params);\r\n        if (!label) {\r\n            label = ab2hexstring (generateRandomArray(4));\r\n        }\r\n\r\n        // generate ontid from p\r\n        const publicKey = privateKey.getPublicKey();\r\n        identity.ontid = Address.generateOntid(publicKey);\r\n        identity.label = label;\r\n        identity.lock = false;\r\n        identity.isDefault = false;\r\n\r\n        // control\r\n        const control = new ControlData('1', encryptedPrivateKey, Address.fromOntid(identity.ontid), saltBase64);\r\n        control.publicKey = publicKey.serializeHex();\r\n        identity.controls.push(control);\r\n\r\n        return identity;\r\n    }\r\n\r\n    /**\r\n     * Creates Identity object encrypting specified private key.\r\n     *\r\n     * The identity is not registered on the blockchain. Caller needs to register it.\r\n     *\r\n     * @param privateKey Private key associated with the identity\r\n     * @param keyphrase Password use to encrypt the private key\r\n     * @param label Custom label\r\n     * @param params Optional scrypt params\r\n     */\r\n    static create(privateKey: PrivateKey, keyphrase: string, label: string, params?: ScryptParams) {\r\n        const identity = new Identity();\r\n        identity.ontid = '';\r\n        identity.label = label;\r\n        identity.lock = false;\r\n        identity.isDefault = false;\r\n\r\n        // ontid\r\n        const publicKey = privateKey.getPublicKey();\r\n        identity.ontid = Address.generateOntid(publicKey);\r\n        const address = Address.fromOntid(identity.ontid);\r\n        const salt = randomBytes(16);\r\n        const encryptedPrivateKey = privateKey.encrypt(keyphrase, address, salt, params);\r\n        // start from 1\r\n        const saltBase64 = Buffer.from(salt, 'hex').toString('base64');\r\n        const control = new ControlData('1', encryptedPrivateKey, address, saltBase64);\r\n        control.publicKey = publicKey.serializeHex();\r\n        identity.controls.push(control);\r\n\r\n        return identity;\r\n    }\r\n\r\n    static parseJson(json: string): Identity {\r\n        return Identity.parseJsonObj(JSON.parse(json));\r\n    }\r\n\r\n    /**\r\n     * Deserializes JSON object.\r\n     *\r\n     * Object should be real object, not stringified.\r\n     *\r\n     * @param obj JSON object\r\n     */\r\n    static parseJsonObj(obj: any): Identity {\r\n        const id = new Identity();\r\n        id.ontid = obj.ontid;\r\n        id.label = obj.label;\r\n        id.lock = obj.lock;\r\n        id.isDefault = obj.isDefault;\r\n        id.controls = (obj.controls as any[]).map((c) => ControlData.fromJson(c));\r\n        id.extra = obj.extra;\r\n        return id;\r\n    }\r\n\r\n    ontid: string;\r\n    label: string;\r\n    lock: boolean;\r\n    isDefault: boolean;\r\n    controls: ControlData[] = [];\r\n    extra: null;\r\n\r\n    addControl(control: ControlData) {\r\n        for (const c of this.controls) {\r\n            if (c.address.toBase58() === control.address.toBase58()) {\r\n                return;\r\n            }\r\n        }\r\n        control.id = (this.controls.length + 1).toString();\r\n        this.controls.push(control);\r\n    }\r\n\r\n    toJson(): string {\r\n        return JSON.stringify(this.toJsonObj());\r\n    }\r\n\r\n    /**\r\n     * Serializes to JSON object.\r\n     *\r\n     * Returned object will not be stringified.\r\n     *\r\n     */\r\n    toJsonObj(): any {\r\n        const obj = {\r\n            ontid: this.ontid,\r\n            label: this.label,\r\n            lock: this.lock,\r\n            isDefault: this.isDefault,\r\n            controls: this.controls.map((c) => c.toJson()),\r\n            extra: this.extra\r\n        };\r\n        return obj;\r\n    }\r\n\r\n    exportPrivateKey(password: string, params?: ScryptParams) {\r\n        const encryptedKey = this.controls[0].encryptedKey;\r\n        const address = this.controls[0].address;\r\n        const salt = this.controls[0].salt;\r\n        return encryptedKey.decrypt(password, address, salt, params);\r\n    }\r\n\r\n    signTransaction(password: string, tx: Transaction, params?: ScryptParams) {\r\n        const pri = this.exportPrivateKey(password, params);\r\n        signTransaction(tx, pri, pri.algorithm.defaultSchema);\r\n        return tx;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { Account } from './account';\r\nimport { Claim } from './claim';\r\nimport * as CONST from './consts';\r\nimport * as Crypto from './crypto';\r\nimport { Identity } from './identity';\r\nimport * as NeoCore from './neocore';\r\nimport RestClient from './network/rest/restClient';\r\nimport RpcClient from './network/rpc/rpcClient';\r\nimport { WebsocketClient } from './network/websocket/websocketClient';\r\nimport * as scrypt from './scrypt';\r\nimport { SDK } from './sdk/index';\r\nimport AbiFunction from './smartcontract/abi/abiFunction';\r\nimport AbiInfo from './smartcontract/abi/abiInfo';\r\nimport { Parameter, ParameterType } from './smartcontract/abi/parameter';\r\nimport Struct from './smartcontract/abi/struct';\r\nimport * as GovernanceTxBuilder from './smartcontract/nativevm/governanceContractTxBuilder';\r\nimport * as OntAssetTxBuilder from './smartcontract/nativevm/ontAssetTxBuilder';\r\nimport * as OntidContract from './smartcontract/nativevm/ontidContractTxBuilder';\r\nimport * as Token from './smartcontract/nativevm/token';\r\nimport * as Oep4 from './smartcontract/neovm/oep4TxBuilder';\r\nimport * as Oep5 from './smartcontract/neovm/oep5TxBuilder';\r\nimport * as Oep8 from './smartcontract/neovm/oep8TxBuilder';\r\nimport { DDO, DDOAttribute } from './transaction/ddo';\r\nimport * as ScriptBuilder from './transaction/scriptBuilder';\r\nimport { Transaction } from './transaction/transaction';\r\nimport * as TransactionBuilder from './transaction/transactionBuilder';\r\nimport { Transfer } from './transaction/transfer';\r\nimport { TxSignature } from './transaction/txSignature';\r\nimport * as utils from './utils';\r\nimport { Wallet } from './wallet';\r\n\r\nclass ONT {\r\n    Account: any;\r\n    Identity: any;\r\n    Claim: any;\r\n    DDO: any;\r\n    DDOAttribute: any;\r\n    Transaction: any;\r\n    Transfer: any;\r\n    TxSignature: any;\r\n    TransactionBuilder: any;\r\n    OntAssetTxBuilder: any;\r\n    Parameter: any;\r\n    ParameterType: any;\r\n    AbiFunction: any;\r\n    AbiInfo: any;\r\n    utils: any;\r\n    scrypt: any;\r\n    CONST: any;\r\n    Wallet: any;\r\n    SDK: any;\r\n    Token: any;\r\n    OntidContract: any;\r\n    GovernanceTxBuilder: any;\r\n    RestClient: any;\r\n    RpcClient: any;\r\n    WebsocketClient: any;\r\n    Crypto: any;\r\n    Struct: any;\r\n    ScriptBuilder: any;\r\n    NeoCore: any;\r\n    Oep4: any;\r\n    Oep8: any;\r\n    Oep5: any;\r\n\r\n    constructor() {\r\n        this.Account = Account;\r\n        this.Identity = Identity;\r\n        this.Claim = Claim;\r\n        this.DDO = DDO;\r\n        this.DDOAttribute = DDOAttribute;\r\n        this.Transaction = Transaction;\r\n        this.Transfer = Transfer;\r\n        this.TxSignature = TxSignature;\r\n        this.TransactionBuilder = TransactionBuilder;\r\n        this.OntAssetTxBuilder = OntAssetTxBuilder;\r\n        this.GovernanceTxBuilder = GovernanceTxBuilder;\r\n        this.Parameter = Parameter;\r\n        this.ParameterType = ParameterType;\r\n        this.AbiFunction = AbiFunction;\r\n        this.AbiInfo = AbiInfo;\r\n        this.utils = utils;\r\n        this.scrypt = scrypt;\r\n        this.CONST = CONST;\r\n        this.Wallet = Wallet;\r\n        this.SDK = SDK;\r\n        this.Token = Token;\r\n        this.OntidContract = OntidContract;\r\n        this.RestClient = RestClient;\r\n        this.RpcClient = RpcClient;\r\n        this.WebsocketClient = WebsocketClient;\r\n        this.Crypto = Crypto;\r\n        this.Struct = Struct;\r\n        this.ScriptBuilder = ScriptBuilder;\r\n        this.NeoCore = NeoCore;\r\n        this.Oep4 = Oep4;\r\n        this.Oep8 = Oep8;\r\n        this.Oep5 = Oep5;\r\n    }\r\n    setNode(url: string) {\r\n        this.CONST.TEST_NODE = url;\r\n    }\r\n\r\n    setRpcPort(port: string) {\r\n        this.CONST.HTTP_JSON_PORT = port;\r\n    }\r\n\r\n    setRestPort(port: string) {\r\n        this.CONST.HTTP_REST_PORT = port;\r\n    }\r\n\r\n    setSocketPort(port: string) {\r\n        this.CONST.HTTP_WS_PORT = port;\r\n    }\r\n}\r\n\r\nexport default ONT;\r\n\r\nexport {\r\n    Account,\r\n    Identity,\r\n    Claim,\r\n    DDO,\r\n    DDOAttribute,\r\n    Transaction,\r\n    Transfer,\r\n    TxSignature,\r\n    Parameter,\r\n    ParameterType,\r\n    AbiFunction,\r\n    AbiInfo,\r\n    TransactionBuilder,\r\n    OntAssetTxBuilder,\r\n    GovernanceTxBuilder,\r\n    utils,\r\n    scrypt,\r\n    CONST,\r\n    Wallet,\r\n    SDK,\r\n    Token,\r\n    OntidContract,\r\n    RestClient,\r\n    RpcClient,\r\n    WebsocketClient,\r\n    Crypto,\r\n    Struct,\r\n    ScriptBuilder,\r\n    NeoCore,\r\n    Oep4,\r\n    Oep8,\r\n    Oep5\r\n};\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { hex2VarBytes } from '../utils';\r\nimport { TxType } from './../transaction/transaction';\r\nimport { num2hexstring } from './../utils';\r\nimport { TransactionNeo } from './TransactionNeo';\r\n\r\nexport class InvocationTransaction extends TransactionNeo {\r\n    script: string;\r\n    gas: number;\r\n    constructor() {\r\n        super();\r\n        this.type = TxType.Invoke;\r\n    }\r\n\r\n    serializeExclusiveData() {\r\n        let result = '';\r\n        result += hex2VarBytes(this.script);\r\n        result += num2hexstring(this.gas, 8, true);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport axios from 'axios';\r\nimport { Address } from './../crypto/address';\r\n\r\nexport class NeoRpc {\r\n\r\n    static sendRawTransaction(url: string, data: string) {\r\n        const req = this.makeRequest('sendrawtransaction', data);\r\n        return axios.post(url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    static makeRequest(method: string, ...params: any[]) {\r\n        const request = {\r\n            jsonrpc: '2.0',\r\n            method,\r\n            params,\r\n            id: 1\r\n        };\r\n\r\n        return request;\r\n    }\r\n\r\n    static getBalance(url: string, contractAddr: Address, address: Address) {\r\n        const req = this.makeRequest('getstorage', contractAddr.toHexString(), address.serialize());\r\n        return axios.post(url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { PublicKey } from '../crypto/PublicKey';\r\nimport { programFromMultiPubKey, programFromParams, programFromPubKey } from '../transaction/program';\r\nimport { hex2VarBytes, StringReader } from '../utils';\r\n\r\nexport class Program {\r\n    static deserialize(hexstring: string) {\r\n        const sr = new StringReader();\r\n        const program = new Program();\r\n        program.parameter = sr.readNextBytes();\r\n        program.code = sr.readNextBytes();\r\n        return program;\r\n    }\r\n\r\n    static programFromParams(sigData: string[]) {\r\n        return programFromParams(sigData);\r\n    }\r\n\r\n    static programFromPubKey(publicKey: PublicKey) {\r\n        return programFromPubKey(publicKey);\r\n    }\r\n\r\n    static programFromMultiPubKey(m: number, pks: PublicKey[]) {\r\n        return programFromMultiPubKey(pks, m);\r\n    }\r\n\r\n    parameter: string;\r\n\r\n    code: string;\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += hex2VarBytes(this.parameter);\r\n        result += hex2VarBytes(this.code);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport AbiFunction from '../smartcontract/abi/abiFunction';\r\nimport { serializeAbiFunction } from '../transaction/scriptBuilder';\r\nimport { num2hexstring, randomBytes } from '../utils';\r\nimport { Address } from './../crypto/address';\r\nimport { TransactionAttribute, TransactionAttributeUsage } from './../transaction/txAttribute';\r\nimport { InvocationTransaction } from './InvocationTransaction';\r\nexport class SmartContract {\r\n    static makeInvokeTransaction(contractAddr: Address, addr: Address, abiFunction: AbiFunction) {\r\n        let params = serializeAbiFunction(abiFunction);\r\n        params += num2hexstring(0x67);\r\n        params += contractAddr.serialize();\r\n        const tx = this.makeInvocationTransaction(params, addr);\r\n        return tx;\r\n    }\r\n\r\n    static makeInvocationTransaction(params: string, addr: Address) {\r\n        const tx = new InvocationTransaction();\r\n        tx.version = 1;\r\n        tx.attributes = [];\r\n        const attr1 = new TransactionAttribute();\r\n        attr1.usage = TransactionAttributeUsage.Script;\r\n        attr1.data = addr.serialize();\r\n        tx.attributes[0] = attr1;\r\n        const attr2 = new TransactionAttribute();\r\n        attr2.usage = TransactionAttributeUsage.DescriptionUrl;\r\n        attr2.data = randomBytes(16);\r\n        tx.attributes[1] = attr2;\r\n        tx.inputs = [];\r\n        tx.outputs = [];\r\n        tx.script = params;\r\n        tx.gas = 0;\r\n        return tx;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { reverseHex } from '../utils';\r\nimport { num2hexstring, StringReader } from './../utils';\r\n\r\nexport class TransactionInput {\r\n\r\n    static deserialize(hexstr: string) {\r\n        const sr = new StringReader(hexstr);\r\n        const input = new TransactionInput();\r\n        input.prevHash = sr.read(20);\r\n        input.prevIndex = parseInt(reverseHex(sr.read(2)), 16);\r\n        return input;\r\n    }\r\n    /**\r\n     * 32 bytes\r\n     */\r\n    prevHash: string;\r\n\r\n    prevIndex: number;\r\n\r\n    equals(o: any) {\r\n        if (o === this) {\r\n            return true;\r\n        }\r\n        if (null === o) {\r\n            return false;\r\n        }\r\n        if (!(o instanceof TransactionInput)) {\r\n            return false;\r\n        }\r\n        return this.prevHash === o.prevHash && this.prevIndex === o.prevIndex;\r\n    }\r\n\r\n    hashCode() {\r\n        return parseInt(reverseHex(this.prevHash) , 16) + this.prevIndex;\r\n    }\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += this.prevHash;\r\n        result += num2hexstring(this.prevIndex, 2, true);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as cryptoJS from 'crypto-js';\r\nimport { Signable } from '../crypto/index';\r\nimport { PrivateKey } from '../crypto/PrivateKey';\r\nimport { TxType } from '../transaction/transaction';\r\nimport { SignatureScheme } from './../crypto/SignatureScheme';\r\nimport { TransactionAttribute } from './../transaction/txAttribute';\r\nimport { num2hexstring, num2VarInt } from './../utils';\r\nimport { Program } from './Program';\r\nimport { TransactionInput } from './TransactionInput';\r\nimport { TransactionOutput } from './TransactionOutput';\r\n\r\n/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nexport class TransactionNeo implements Signable {\r\n    /**\r\n     * Transaction type\r\n     */\r\n    type: TxType;\r\n\r\n    version: number = 0;\r\n\r\n    nonce: string;\r\n\r\n    attributes: TransactionAttribute[];\r\n\r\n    inputs: TransactionInput[];\r\n\r\n    outputs: TransactionOutput[];\r\n\r\n    scripts: Program[];\r\n\r\n    serialize() {\r\n        let result = this.serializeUnsigned();\r\n        result += num2VarInt(this.scripts.length);\r\n        for (const s of this.scripts) {\r\n            result += s.serialize();\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    serializeUnsigned() {\r\n        let result = '';\r\n        result += num2hexstring(this.type);\r\n        result += num2hexstring(this.version);\r\n\r\n        result += this.serializeExclusiveData();\r\n        result += num2VarInt(this.attributes.length);\r\n        for (const a of this.attributes) {\r\n            result += a.serialize();\r\n        }\r\n\r\n        result += num2VarInt(this.inputs.length);\r\n        for (const i of this.inputs) {\r\n            result += i.serialize();\r\n        }\r\n\r\n        result += num2VarInt(this.outputs.length);\r\n        for (const o of this.outputs) {\r\n            result += o.serialize();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getHash() {\r\n        const data = this.serializeUnsigned();\r\n\r\n        const ProgramHexString = cryptoJS.enc.Hex.parse(data);\r\n        const ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\r\n        const ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\r\n\r\n        return ProgramSha2562;\r\n    }\r\n\r\n    getSignContent() {\r\n        return this.getHashData();\r\n    }\r\n\r\n    serializeUnsignedData() {\r\n        return this.getHashData();\r\n    }\r\n\r\n    getHashData() {\r\n        return this.serializeUnsigned();\r\n    }\r\n\r\n    sign(privateKey: PrivateKey, scheme: SignatureScheme = SignatureScheme.ECDSAwithSHA256) {\r\n        const sig = privateKey.sign(this.getHashData(), scheme).serializeHex();\r\n        const signature = sig.substring(2);\r\n        return signature;\r\n    }\r\n\r\n    protected serializeExclusiveData() {\r\n        return '';\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { Address } from './../crypto/address';\r\nimport { num2hexstring, StringReader } from './../utils';\r\nexport class TransactionOutput {\r\n\r\n    static deserialize(hexstring: string) {\r\n        const sr = new StringReader(hexstring);\r\n        const output = new TransactionOutput();\r\n        output.assetId = sr.read(32);\r\n        output.value = sr.readLong();\r\n        output.scriptHash = new Address(sr.read(20));\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * 32 bytes\r\n     */\r\n    assetId: string;\r\n\r\n    // long\r\n    value: number;\r\n\r\n    scriptHash: Address;\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += this.assetId;\r\n        result += num2hexstring(this.value, 8, true);\r\n        result += this.scriptHash.serialize();\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nexport { InvocationTransaction } from './InvocationTransaction';\r\nexport { NeoRpc } from './NeoRpc';\r\nexport { Program } from './Program';\r\nexport { SmartContract } from './SmartContract';\r\nexport { TransactionInput } from './TransactionInput';\r\nexport { TransactionOutput } from './TransactionOutput';\r\nexport { TransactionNeo } from './TransactionNeo';\r\n","import { ERROR_CODE } from \"./../../error\";\r\n/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport axios from \"axios\";\r\nimport { TEST_ONT_URL } from \"../../consts\";\r\nimport { Address } from \"../../crypto/address\";\r\nimport UrlConsts from \"./urlConsts\";\r\n\r\n/**\r\n * Wrapper class for restful api.\r\n */\r\nexport default class RestClient {\r\n  /**\r\n   * Url of the blockchain node\r\n   */\r\n  url: string;\r\n\r\n  /**\r\n   * Version of restful api\r\n   */\r\n  version: string = \"v1.0.0\";\r\n\r\n  /**\r\n   * Action name of the request\r\n   */\r\n  action: string = \"sendrawtransaction\";\r\n\r\n  constructor(url?: string) {\r\n    this.url = url || TEST_ONT_URL.REST_URL;\r\n    if (this.url[this.url.length - 1] === \"/\") {\r\n      this.url = this.url.substring(0, this.url.length - 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Concat params as the query part\r\n   * @param params\r\n   */\r\n  concatParams(params: Map<string, string>) {\r\n    let result = \"\";\r\n    if (params.size === 0) {\r\n      return \"\";\r\n    }\r\n\r\n    for (const key of params.keys()) {\r\n      let value = params.get(key);\r\n      if (value) {\r\n        value = encodeURIComponent(value);\r\n      }\r\n      result += `&${key}=${value}`;\r\n    }\r\n\r\n    return \"?\" + result.substr(1);\r\n  }\r\n\r\n  /**\r\n   * Get the current blockchain node url\r\n   */\r\n  getUrl() {\r\n    return this.url;\r\n  }\r\n\r\n  /**\r\n   * To send raw transaction to blockchian\r\n   * @param hexData Hex encoded data\r\n   * @param preExec Decides if it is a pre-execute transaction\r\n   * @param userId User's id\r\n   */\r\n  sendRawTransaction(\r\n    hexData: string,\r\n    preExec: boolean = false,\r\n    userId?: string\r\n  ): Promise<any> {\r\n    const param = new Map<string, string>();\r\n\r\n    if (userId) {\r\n      param.set(\"userid\", userId);\r\n    }\r\n\r\n    if (preExec) {\r\n      param.set(\"preExec\", \"1\");\r\n    }\r\n\r\n    let url = this.url + UrlConsts.Url_send_transaction;\r\n    url += this.concatParams(param);\r\n\r\n    const body = {\r\n      Action: this.action,\r\n      Version: this.version,\r\n      Data: hexData\r\n    };\r\n\r\n    return axios.post(url, body).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get raw transaction by transaction hash.\r\n   * The result is hex encoded transaction.\r\n   * @param txHash Transactin hash.Always use the reversed value of transaction hash to query.\r\n   *\r\n   * @example\r\n   *\r\n   * ```typescript\r\n   * import { utils, Transaction } from 'ontology-ts-sdk';\r\n   * const txHash = tx.getHash(); // tx is an instance of Transaction\r\n   * restClient.getRawTransaction(utils.reverseHex(txHash)).then(res => {\r\n   *   const tx = Transaction.deserialize(res.Result)\r\n   * })\r\n   *\r\n   * ````\r\n   */\r\n  getRawTransaction(txHash: string): Promise<any> {\r\n    const param = new Map<string, string>();\r\n\r\n    param.set(\"raw\", \"1\");\r\n    let url = this.url + UrlConsts.Url_get_transaction + txHash;\r\n    url += this.concatParams(param);\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get transaction by transaction hash.\r\n   * The result is transaction in json.\r\n   * @param txHash Reversed transaction hash\r\n   */\r\n  getRawTransactionJson(txHash: string): Promise<any> {\r\n    const param = new Map<string, string>();\r\n    param.set(\"raw\", \"0\");\r\n    let url = this.url + UrlConsts.Url_get_transaction + txHash;\r\n    url += this.concatParams(param);\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /** Deprecated\r\n   * Get the generation time for each block.\r\n   * If the blockchain node runs in vbft, the result is null.\r\n   */\r\n  // getGenerateBlockTime(): Promise<any> {\r\n  //     const url = this.url + UrlConsts.Url_get_generate_block_time;\r\n  //     return axios.get(url).then((res) => {\r\n  //         return res.data;\r\n  //     });\r\n  // }\r\n\r\n  /**\r\n   * Get the nodes count of the blockchain.\r\n   */\r\n  getNodeCount(): Promise<any> {\r\n    const url = this.url + UrlConsts.Url_get_node_count;\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the current height of the blockchain.\r\n   */\r\n  getBlockHeight(): Promise<any> {\r\n    const url = this.url + UrlConsts.Url_get_block_height;\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get block by block's height or hash\r\n   * @param value Block height or block hash\r\n   */\r\n  getBlock(value: number | string): Promise<any> {\r\n    const params = new Map<string, string>();\r\n    params.set(\"raw\", \"1\");\r\n\r\n    let url = \"\";\r\n    if (typeof value === \"number\") {\r\n      url = this.url + UrlConsts.Url_get_block_by_height + value;\r\n    } else if (typeof value === \"string\") {\r\n      url = this.url + UrlConsts.Url_get_block_by_hash + value;\r\n    }\r\n    url += this.concatParams(params);\r\n\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get contract info by code hash.The result is hex encoded string.\r\n   * @param codeHash Code hash of contract.The value is reversed contract address.\r\n   */\r\n  getContract(codeHash: string): Promise<any> {\r\n    const params = new Map<string, string>();\r\n    params.set(\"raw\", \"1\");\r\n\r\n    let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\r\n    url += this.concatParams(params);\r\n\r\n    // console.log('url: '+url);\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get contract info by code hash. The result is json.\r\n   * @param codeHash Code hash of contract.\r\n   */\r\n  getContractJson(codeHash: string): Promise<any> {\r\n    const params = new Map<string, string>();\r\n    params.set(\"raw\", \"0\");\r\n    let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\r\n    url += this.concatParams(params);\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get smart contract event by Block height or reversed transaction hash.\r\n   * If the parameter is block height, the result includes all the transaction event of that block;\r\n   * If the parameter is transaction hash, the result is the event of that transaction.\r\n   * @param value Block height or reversed transaction hash\r\n   */\r\n  getSmartCodeEvent(value: string | number): Promise<any> {\r\n    let url = \"\";\r\n    if (typeof value === \"string\") {\r\n      url = this.url + UrlConsts.Url_get_smartcodeevent_by_txhash + value;\r\n    } else if (typeof value === \"number\") {\r\n      url = this.url + UrlConsts.Url_get_smartcodeevent_txs_by_height + value;\r\n    }\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the block height by reversed transaction hash.\r\n   * @param hash Reversed transaction hash.\r\n   */\r\n  getBlockHeightByTxHash(hash: string): Promise<any> {\r\n    const url = this.url + UrlConsts.Url_get_block_height_by_txhash + hash;\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the stored value in smart contract by the code hash and key.\r\n   * @param codeHash Code hash of the smart contract\r\n   * @param key Key of the stored value\r\n   */\r\n  getStorage(codeHash: string, key: string): Promise<any> {\r\n    const url = this.url + UrlConsts.Url_get_storage + codeHash + \"/\" + key;\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the merkle proof by transaction hash\r\n   * @param hash Reversed transaction hash\r\n   */\r\n  getMerkleProof(hash: string): Promise<any> {\r\n    const url = this.url + UrlConsts.Url_get_merkleproof + hash;\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log(\"url: \" + url);\r\n\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get balance of some address\r\n   * The result contains balance of ONT and ONG\r\n   * @param address Address\r\n   */\r\n  getBalance(address: Address): Promise<any> {\r\n    const url =\r\n      this.url + UrlConsts.Url_get_account_balance + address.toBase58();\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get block info by block's height or hash.\r\n   * @param value Block's height or hash\r\n   */\r\n  getBlockJson(value: number | string): Promise<any> {\r\n    let url = \"\";\r\n    if (typeof value === \"number\") {\r\n      url = this.url + UrlConsts.Url_get_block_by_height + value;\r\n    } else if (typeof value === \"string\") {\r\n      url = this.url + UrlConsts.Url_get_block_by_hash + value;\r\n    }\r\n\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get allowance by address\r\n   * @param asset Asset type. Only ONT or ONG.\r\n   * @param from Address of allowance sender.\r\n   * @param to Address of allowance receiver.\r\n   */\r\n  getAllowance(asset: string, from: Address, to: Address): Promise<any> {\r\n    asset = asset.toLowerCase();\r\n    if (asset !== \"onyx\" && asset !== \"oxg\") {\r\n      throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const url =\r\n      this.url +\r\n      UrlConsts.Url_get_allowance +\r\n      asset.toLowerCase() +\r\n      \"/\" +\r\n      from.toBase58() +\r\n      \"/\" +\r\n      to.toBase58();\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getUnboundOng(address: Address): Promise<any> {\r\n    const url = this.url + UrlConsts.Url_get_unbound_ong + address.toBase58();\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getBlockTxsByHeight(height: number): Promise<any> {\r\n    const url = this.url + UrlConsts.Url_get_block_txs_by_height + height;\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getGasPrice(): Promise<any> {\r\n    const url = this.url + UrlConsts.Url_get_gasprice;\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getGrangOng(address: Address): Promise<any> {\r\n    const url = this.url + UrlConsts.Url_get_grant_ong + address.toBase58();\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getMempoolTxCount(): Promise<any> {\r\n    const url = this.url + UrlConsts.Url_get_mempool_txcount;\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getMempoolTxState(hash: string): Promise<any> {\r\n    const url = this.url + UrlConsts.Url_get_mempool_txstate + hash;\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getVersion(): Promise<any> {\r\n    const url = this.url + UrlConsts.Url_get_version;\r\n    return axios.get(url).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * Restful api\r\n */\r\nexport default {\r\n    Url_send_transaction : '/api/v1/transaction',\r\n    Url_get_transaction : '/api/v1/transaction/',\r\n    Url_get_generate_block_time : '/api/v1/node/generateblocktime',\r\n    Url_get_node_count : '/api/v1/node/connectioncount',\r\n    Url_get_block_height : '/api/v1/block/height',\r\n    Url_get_block_by_height : '/api/v1/block/details/height/',\r\n    Url_get_block_by_hash : '/api/v1/block/details/hash/',\r\n    Url_get_account_balance : '/api/v1/balance/',\r\n    Url_get_contract_state : '/api/v1/contract/',\r\n    Url_get_smartcodeevent_txs_by_height : '/api/v1/smartcode/event/transactions/',\r\n    Url_get_smartcodeevent_by_txhash : '/api/v1/smartcode/event/txhash/',\r\n    Url_get_block_height_by_txhash : '/api/v1/block/height/txhash/',\r\n    Url_get_storage : '/api/v1/storage/',\r\n    Url_get_merkleproof : '/api/v1/merkleproof/',\r\n    Url_get_allowance: '/api/v1/allowance/',\r\n    Url_get_block_txs_by_height: '/api/v1/block/transactions/height/',\r\n    Url_get_unbound_ong: '/api/v1/unboundong/',\r\n    Url_get_grant_ong: '/api/v1/grantong/',\r\n    Url_get_mempool_txcount: '/api/v1/mempool/txcount',\r\n    Url_get_mempool_txstate: '/api/v1/mempool/txstate/',\r\n    Url_get_version: '/api/v1/version',\r\n    Url_get_networkid: '/api/v1/networkid',\r\n    Url_get_gasprice: '/api/v1/gasprice'\r\n};\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport axios from \"axios\";\r\nimport { TEST_ONT_URL } from \"../../consts\";\r\nimport { Address } from \"../../crypto/address\";\r\nimport { ERROR_CODE } from \"../../error\";\r\n\r\n/**\r\n * Wrapper class for RPC apis.\r\n */\r\nexport default class RpcClient {\r\n  /**\r\n   * Url of the blockchain node\r\n   */\r\n  url: string;\r\n\r\n  constructor(url?: string) {\r\n    this.url = url || TEST_ONT_URL.RPC_URL;\r\n  }\r\n\r\n  /**\r\n   * Get the current blockchain node url.\r\n   */\r\n  getUrl() {\r\n    return this.url;\r\n  }\r\n\r\n  /**\r\n   * Make request base on method and parameters\r\n   * @param method Method's name\r\n   * @param params Parameters\r\n   */\r\n  makeRequest(method: string, ...params: any[]) {\r\n    const request = {\r\n      jsonrpc: \"2.0\",\r\n      method,\r\n      params,\r\n      id: 1\r\n    };\r\n\r\n    return request;\r\n  }\r\n\r\n  /**\r\n   * Get the balance of some address.\r\n   * The result contains ONT and ONG.\r\n   * @param address Address\r\n   */\r\n  getBalance(address: Address): Promise<any> {\r\n    const req = this.makeRequest(\"getbalance\", address.toBase58());\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send ran transaction to blockchain.\r\n   * @param data Hex encoded data.\r\n   * @param preExec Decides if it is a pre-execute transaction.\r\n   */\r\n  sendRawTransaction(data: string, preExec: boolean = false): Promise<any> {\r\n    let req;\r\n\r\n    if (preExec) {\r\n      req = this.makeRequest(\"sendrawtransaction\", data, 1);\r\n    } else {\r\n      req = this.makeRequest(\"sendrawtransaction\", data);\r\n    }\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get raw transaction by transaction hash.\r\n   * The result is hex encoded string.\r\n   * @param txHash Reversed transaction hash\r\n   */\r\n  getRawTransaction(txHash: string): Promise<any> {\r\n    const req = this.makeRequest(\"getrawtransaction\", txHash);\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get transaction info by transaction hash.\r\n   * The result is json.\r\n   * @param txHash Reversed transaction hash.\r\n   */\r\n  getRawTransactionJson(txHash: string): Promise<any> {\r\n    const req = this.makeRequest(\"getrawtransaction\", txHash, 1);\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /** Deprecated\r\n   * Get the generation time for each block.\r\n   * If the blockchain node runs in vbft, the result is null cause the time is not fixed.\r\n   */\r\n  // getGenerateBlockTime(): Promise<any> {\r\n  //     const req = this.makeRequest('getgenerateblocktime');\r\n\r\n  //     return axios.post(this.url, req).then((res) => {\r\n  //         return res.data;\r\n  //     });\r\n  // }\r\n\r\n  /**\r\n   * Get the nodes count.\r\n   */\r\n  getNodeCount(): Promise<any> {\r\n    const req = this.makeRequest(\"getconnectioncount\");\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the current block height.\r\n   */\r\n  getBlockHeight(): Promise<any> {\r\n    const req = this.makeRequest(\"getblockcount\");\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      if (res.data && res.data.result) {\r\n        return res.data.result - 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the all blocks count.\r\n   */\r\n  getBlockCount(): Promise<any> {\r\n    const req = this.makeRequest(\"getblockcount\");\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get block info by block's height or hash.\r\n   * The result is json.\r\n   * @param value Block's hash or height\r\n   */\r\n  getBlockJson(value: string | number): Promise<any> {\r\n    const req = this.makeRequest(\"getblock\", value, 1);\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get contract info by contract' code hash.\r\n   * The result is hex encoded string.\r\n   * @param hash Contract's code hash.\r\n   */\r\n  getContract(hash: string): Promise<any> {\r\n    const req = this.makeRequest(\"getcontractstate\", hash);\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get contract info by contract's code hash.\r\n   * The result is json.\r\n   * @param codeHash Contract's code hash.\r\n   */\r\n  getContractJson(codeHash: string): Promise<any> {\r\n    const req = this.makeRequest(\"getcontractstate\", codeHash, 1);\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get block info by block's height or hash.\r\n   * The result is hex encoded string.\r\n   *\r\n   * @param value Block's height or hash\r\n   */\r\n  getBlock(value: string | number): Promise<any> {\r\n    const req = this.makeRequest(\"getblock\", value);\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get smart contract event.\r\n   * If parameter is transaction's hash, the result is the event of that transaction.\r\n   * If parameter is block's height, the result is all the events of that block.\r\n   *\r\n   * @param value Transaction's hash or block's height\r\n   */\r\n  getSmartCodeEvent(value: string | number): Promise<any> {\r\n    const req = this.makeRequest(\"getsmartcodeevent\", value);\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get block height by transaction hash\r\n   * @param txHash Reversed transaction hash\r\n   */\r\n  getBlockHeightByTxHash(txHash: string): Promise<any> {\r\n    const req = this.makeRequest(\"getblockheightbytxhash\", txHash);\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get stored value in smart contract by contract's code hash and the key.\r\n   * @param codeHash Contract's code hash\r\n   * @param key Key of stored value\r\n   */\r\n  getStorage(codeHash: string, key: string): Promise<any> {\r\n    const req = this.makeRequest(\"getstorage\", codeHash, key);\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log(req);\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get merkle proof by transaction hash.\r\n   * @param hash Reversed transaction hash\r\n   */\r\n  getMerkleProof(hash: string): Promise<any> {\r\n    const req = this.makeRequest(\"getmerkleproof\", hash);\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log(this.url);\r\n    // tslint:disable-next-line:no-console\r\n    console.log(req);\r\n\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get allowanece\r\n   * @param asset Asset's type.Only ONT and ONG supported.\r\n   * @param from Address of allowance's sender.\r\n   * @param to Address of allowance's receiver.\r\n   */\r\n  getAllowance(asset: string, from: Address, to: Address): Promise<any> {\r\n    if (asset !== \"onyx\" && asset !== \"oxg\") {\r\n      throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const req = this.makeRequest(\r\n      \"getallowance\",\r\n      asset,\r\n      from.toBase58(),\r\n      to.toBase58()\r\n    );\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getUnboundOng(address: Address): Promise<any> {\r\n    const req = this.makeRequest(\r\n      \"getunboundong\",\r\n      \"oxg\",\r\n      address.toBase58(),\r\n      address.toBase58()\r\n    );\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getBlockTxsByHeight(height: number): Promise<any> {\r\n    const req = this.makeRequest(\"getblocktxsbyheight\", height);\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getGasPrice(): Promise<any> {\r\n    const req = this.makeRequest(\"getgasprice\");\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getGrantOng(address: Address): Promise<any> {\r\n    const req = this.makeRequest(\"getgrantong\", address.toBase58());\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getMempoolTxCount(): Promise<any> {\r\n    const req = this.makeRequest(\"getmempooltxcount\");\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getMempoolTxState(txHash: string): Promise<any> {\r\n    const req = this.makeRequest(\"getmempooltxstate\", txHash);\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  getVersion(): Promise<any> {\r\n    const req = this.makeRequest(\"getversion\");\r\n    return axios.post(this.url, req).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n// tslint:disable:variable-name\r\nexport class Deferred<T> {\r\n    private _promise: Promise<T>;\r\n    private _resolve: (value?: T | PromiseLike<T>) => void;\r\n    private _reject: (reason?: any) => void;\r\n\r\n    constructor() {\r\n        this._promise = new Promise<T>((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n        });\r\n    }\r\n\r\n    get promise(): Promise<T> {\r\n        return this._promise;\r\n    }\r\n\r\n    public resolve = (value?: T | PromiseLike<T>): void => {\r\n        this._resolve(value);\r\n    }\r\n\r\n    public reject = (reason?: any): void => {\r\n        this._reject(reason);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { Address } from '../../crypto/address';\r\n\r\n// const generateReqId = () => {\r\n//     return Math.floor(Math.random() * 10e8);\r\n// };\r\n\r\nexport function sendHeartBeat() {\r\n    const param = {\r\n        Action : 'heartbeat',\r\n        Version : 'V1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function sendSubscribe(\r\n    subscribeEvent: boolean = false,\r\n    subscribeJsonBlock: boolean = false,\r\n    subscribeRawBlock: boolean = false,\r\n    subscribeBlockTxHashes: boolean = false\r\n) {\r\n    const param = {\r\n        Action: 'subscribe',\r\n        Version: '1.0.0',\r\n        SubscribeEvent: subscribeEvent, // optional\r\n        SubscribeJsonBlock: subscribeJsonBlock, // optional\r\n        SubscribeRawBlock: subscribeRawBlock, // optional\r\n        SubscribeBlockTxHashs: subscribeBlockTxHashes // optional\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function sendRawTransaction(hexData: string, preExec: boolean = false) {\r\n    let param = {\r\n        Action: 'sendrawtransaction',\r\n        Version: '1.0.0',\r\n        Data: hexData\r\n    };\r\n    if (preExec) {\r\n        param = Object.assign(param, { PreExec : '1' });\r\n    }\r\n    return param;\r\n}\r\n\r\nexport function getRawTransaction(txHash: string) {\r\n    const param = {\r\n        Action: 'gettransaction',\r\n        Version: '1.0.0',\r\n        Hash: txHash,\r\n        Raw : '1'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getRawTransactionJson(txHash: string) {\r\n    const param = {\r\n        Action: 'gettransaction',\r\n        Version: '1.0.0',\r\n        Hash: txHash,\r\n        Raw: '0'\r\n    };\r\n    return param;\r\n}\r\n\r\n// export function getGenerateBlockTime() {\r\n//     const param = {\r\n//         Action: 'getgenerateblocktime',\r\n//         Version: '1.0.0'\r\n//     };\r\n//     return param;\r\n// }\r\n\r\nexport function getNodeCount() {\r\n    const param = {\r\n        Action: 'getconnectioncount',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getBlockHeight() {\r\n    const param = {\r\n        Action: 'getblockheight',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getBlock(value: number | string) {\r\n    let param = {};\r\n    if (typeof value === 'number') {\r\n        param = {\r\n            Action: 'getblockbyheight',\r\n            Version: '1.0.0',\r\n            Height: value,\r\n            Raw: '1'\r\n        };\r\n    } else if (typeof value === 'string') {\r\n        param = {\r\n            Action: 'getblockbyhash',\r\n            Version: '1.0.0',\r\n            Hash: value,\r\n            Raw: '1'\r\n        };\r\n    }\r\n    return param;\r\n}\r\n\r\nexport function getBlockJson(value: number | string) {\r\n    let param = {};\r\n    if (typeof value === 'number') {\r\n        param = {\r\n            Action: 'getblockbyheight',\r\n            Version: '1.0.0',\r\n            Height: value\r\n        };\r\n    } else if (typeof value === 'string') {\r\n        param = {\r\n            Action: 'getblockbyhash',\r\n            Version: '1.0.0',\r\n            Hash: value\r\n        };\r\n    }\r\n    return param;\r\n}\r\n\r\nexport function getBalance(address: Address) {\r\n    const param = {\r\n        Action: 'getbalance',\r\n        Version: '1.0.0',\r\n        Addr: address.toBase58()\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getUnboundOng(address: Address) {\r\n    const param = {\r\n        Action: 'getunboundong',\r\n        Version: '1.0.0',\r\n        Addr: address.toBase58()\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getContract(hash: string) {\r\n    const param = {\r\n        Action: 'getcontract',\r\n        Version: '1.0.0',\r\n        Hash: hash,\r\n        Raw: '1'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getContractJson(hash: string) {\r\n    const param = {\r\n        Action: 'getcontract',\r\n        Version: '1.0.0',\r\n        Hash: hash,\r\n        Raw: '0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getSmartCodeEvent(value: number | string) {\r\n    let param = {};\r\n    if (typeof value === 'number') {\r\n        param = {\r\n            Action: 'getsmartcodeeventbyheight',\r\n            Version: '1.0.0',\r\n            Height: value\r\n        };\r\n    } else if (typeof value === 'string') {\r\n        param = {\r\n            Action: 'getsmartcodeeventbyhash',\r\n            Version: '1.0.0',\r\n            Hash: value\r\n        };\r\n    }\r\n    return param;\r\n}\r\n\r\nexport function getBlockHeightByTxHash(hash: string) {\r\n    const param = {\r\n        Action: 'getblockheightbytxhash',\r\n        Version: '1.0.0',\r\n        Hash: hash\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getStorage(codeHash: string, key: string) {\r\n    const param = {\r\n        Action: 'getstorage',\r\n        Version: '1.0.0',\r\n        Hash: codeHash,\r\n        Key : key\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getMerkleProof(hash: string) {\r\n    const param = {\r\n        Action: 'getmerkleproof',\r\n        Version: '1.0.0',\r\n        Hash: hash\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getAllowance(asset: string, from: Address, to: Address) {\r\n    const param = {\r\n        Action: 'getallowance',\r\n        Version: '1.0.0',\r\n        Asset: asset,\r\n        From: from.toBase58(),\r\n        To: to.toBase58()\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getBlockHash(value: number) {\r\n    const param = {\r\n        Action: 'getblockhash',\r\n        Version: '1.0.0',\r\n        Height: value\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getBlockTxsByHeight(value: number) {\r\n    const param = {\r\n        Action: 'getblocktxsbyheight',\r\n        Version: '1.0.0',\r\n        Height: value\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getGasPrice() {\r\n    const param = {\r\n        Action: 'getgasprice',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getGrantOng(address: Address) {\r\n    const param = {\r\n        Action: 'getgrantong',\r\n        Version: '1.0.0',\r\n        Addr: address.toBase58()\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getMempoolTxCount() {\r\n    const param = {\r\n        Action: 'getmempooltxcount',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getMempoolTxState(txHash: string) {\r\n    const param = {\r\n        Action: 'getmempooltxstate',\r\n        Version: '1.0.0',\r\n        Hash: txHash\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getVersion() {\r\n    const param = {\r\n        Action: 'getversion',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getNetworkId() {\r\n    const param = {\r\n        Action: 'getnetworkid',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { TEST_ONT_URL } from '../../consts';\r\nimport { Address } from '../../crypto/address';\r\nimport { Deferred } from './deferred';\r\nimport * as Builder from './websocketBuilder';\r\nimport { WebsocketSender } from './websocketSender';\r\n\r\n/**\r\n * Websocket client.\r\n *\r\n * TODO: correlate request and response with id, so socket can be reused.\r\n */\r\nexport class WebsocketClient {\r\n    sender: WebsocketSender;\r\n\r\n    autoClose: boolean;\r\n\r\n    promises: Map<string, Deferred<any>>;\r\n\r\n    constructor(url = TEST_ONT_URL.SOCKET_URL, debug = false, autoClose = true) {\r\n        this.autoClose = autoClose;\r\n        this.promises = new Map();\r\n        this.sender = new WebsocketSender(url, debug);\r\n        this.sender.addListener(this.notifyListener.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Send heart beat request\r\n     */\r\n    async sendHeartBeat(): Promise<any> {\r\n        const raw = Builder.sendHeartBeat();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Send subscribe request\r\n     * @param subscribeEvent\r\n     * @param subscribeJsonBlock\r\n     * @param subscribeRawBlock\r\n     * @param subscribeBlockTxHashes\r\n     */\r\n    async sendSubscribe(\r\n            subscribeEvent = false,\r\n            subscribeJsonBlock = false,\r\n            subscribeRawBlock = false,\r\n            subscribeBlockTxHashes = false\r\n        ): Promise<any> {\r\n        const raw = Builder.sendSubscribe(\r\n                subscribeEvent,\r\n                subscribeJsonBlock,\r\n                subscribeRawBlock,\r\n                subscribeBlockTxHashes\r\n            );\r\n\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Send raw transaction\r\n     * @param hexData Hex encoded data\r\n     * @param preExec Decides if it is a pre-executed transaction\r\n     * @param waitNotify Decides if client waits for notify from blockchain before closing\r\n     */\r\n    async sendRawTransaction(hexData: string, preExec = false, waitNotify = false) {\r\n        const raw = Builder.sendRawTransaction(hexData, preExec);\r\n        const sendResult = await this.send(raw, this.autoClose && !waitNotify);\r\n\r\n        if (sendResult.Error !== 0) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log(sendResult);\r\n            throw new Error(JSON.stringify(sendResult));\r\n        }\r\n\r\n        if (waitNotify) {\r\n            const txHash: string = sendResult.Result;\r\n\r\n            const deferred = new Deferred<any>();\r\n            this.promises.set(txHash, deferred);\r\n            return deferred.promise;\r\n        } else {\r\n            return sendResult;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get raw transaction by transaction hash.\r\n     * The result is hex encoded transaction.\r\n     * @param txHash Reversed transaction hash\r\n     */\r\n    async getRawTransaction(txHash: string): Promise<any> {\r\n        const raw = Builder.getRawTransaction(txHash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get transaction info by transaction hash.\r\n     * The result is json.\r\n     * @param txHash Reversed transaction hash\r\n     */\r\n    async getRawTransactionJson(txHash: string): Promise<any> {\r\n        const raw = Builder.getRawTransactionJson(txHash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /** Deprecated\r\n     * Get the generation time for each block.\r\n     * If the blockchain node runs in vbft, the result is null.\r\n     */\r\n    // async getGenerateBlockTime(): Promise<any> {\r\n    //     const raw = Builder.getGenerateBlockTime();\r\n    //     return this.send(raw);\r\n    // }\r\n\r\n    /**\r\n     * Get Nodes count\r\n     */\r\n    async getNodeCount(): Promise<any> {\r\n        const raw = Builder.getNodeCount();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get current block height\r\n     */\r\n    async getBlockHeight(): Promise<any> {\r\n        const raw = Builder.getBlockHeight();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get block's info by block's height or hash.\r\n     * The result is hex encoded string.\r\n     * @param value Block's height or hash\r\n     */\r\n    async getBlock(value: number | string): Promise<any> {\r\n        const raw = Builder.getBlock(value);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get block's info by block's height or hash.\r\n     * The result is json.\r\n     * @param value Block's height or hash\r\n     */\r\n    async getBlockJson(value: number | string): Promise<any> {\r\n        const raw = Builder.getBlockJson(value);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get the balance of some address.\r\n     * The result contains ONT and ONG.\r\n     * @param address Address\r\n     */\r\n    async getBalance(address: Address): Promise<any> {\r\n        const raw = Builder.getBalance(address);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get unbound ong of this address\r\n     * The result contains ONG.\r\n     * @param address Address\r\n     */\r\n    async getUnboundong(address: Address): Promise<any> {\r\n        const raw = Builder.getUnboundOng(address);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get contract info by code hash.\r\n     * The result is hex encoded string.\r\n     * @param hash Contract's code hash.\r\n     */\r\n    async getContract(hash: string): Promise<any> {\r\n        const raw = Builder.getContract(hash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get contract's info by code hash\r\n     * The result is json.\r\n     * @param hash Contract's code hash\r\n     */\r\n    async getContractJson(hash: string): Promise<any> {\r\n        const raw = Builder.getContractJson(hash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get smart conde event by transaction hash or block's height.\r\n     * If parameter is transaction hash, the result is the event of that transaction.\r\n     * If parameter is block's height, the result is all the events of that block.\r\n     * @param value Reversed transaction hash or block's height\r\n     */\r\n    async getSmartCodeEvent(value: number | string): Promise<any> {\r\n        const raw = Builder.getSmartCodeEvent(value);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get block's height by transaction hash\r\n     * @param hash Reversed transaction hash\r\n     */\r\n    async getBlockHeightByTxHash(hash: string): Promise<any> {\r\n        const raw = Builder.getBlockHeightByTxHash(hash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get stored value in smart contract by contract's code hash and the key.\r\n     * @param codeHash Contract's code hash\r\n     * @param key Key of stored value\r\n     */\r\n    async getStorage(codeHash: string, key: string): Promise<any> {\r\n        const raw = Builder.getStorage(codeHash, key);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get merkle proof by transaction hash.\r\n     * @param hash Reversed transaction hash\r\n     */\r\n    async getMerkleProof(hash: string): Promise<any> {\r\n        const raw = Builder.getMerkleProof(hash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get allowanece\r\n     * @param asset Asset's type.Only ONT and ONG supported.\r\n     * @param from Address of allowance's sender.\r\n     * @param to Address of allowance's receiver.\r\n     */\r\n    async getAllowance(asset: string, from: Address, to: Address) {\r\n        const raw = Builder.getAllowance(asset, from, to);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get block hash by block height\r\n     * @param height Height of the block\r\n     */\r\n    async getBlockHash(height: number): Promise<any> {\r\n        const raw = Builder.getBlockHash(height);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Return all transaction hash contained in the block corresponding to this height\r\n     * @param height Height of the block\r\n     */\r\n    async getBlockTxsByHeight(height: number): Promise<any> {\r\n        const raw = Builder.getBlockTxsByHeight(height);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Return the state of transaction locate in memory\r\n     */\r\n    async getGasPrice(): Promise<any> {\r\n        const raw = Builder.getGasPrice();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get grant ong\r\n     * @param address Address\r\n     */\r\n    async getGrantOng(address: Address): Promise<any> {\r\n        const raw = Builder.getGrantOng(address);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Query the transaction count in the memory pool\r\n     */\r\n    async getMempoolTxCount(): Promise<any> {\r\n        const raw = Builder.getMempoolTxCount();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Query the transaction state in the memory pool\r\n     */\r\n    async getMempoolTxState(txHash: string): Promise<any> {\r\n        const raw = Builder.getMempoolTxState(txHash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get the version information of the node\r\n     */\r\n    async getVersion(): Promise<any> {\r\n        const raw = Builder.getVersion();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get the network id\r\n     */\r\n    async getNetworkId(): Promise<any> {\r\n        const raw = Builder.getNetworkId();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Adds listener for Notify messages.\r\n     *\r\n     * Be careful to not set autoClose = true and close the websocket on your own.\r\n     * @param listener Listener\r\n     */\r\n    addNotifyListener(listener: (result: any) => void) {\r\n        this.sender.addListener((result: any) => {\r\n            if (result.Action === 'Notify') {\r\n                listener(result);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Close the websocket manually.\r\n     */\r\n    close() {\r\n        this.sender.close();\r\n    }\r\n\r\n    /**\r\n     * Send msg to blockchain\r\n     * @param raw Message to send\r\n     * @param close Automaticly close connection if also autoClose is specified\r\n     */\r\n    private async send<T extends object>(raw: T, close: boolean = this.autoClose): Promise<any> {\r\n        return this.sender.send(raw, close);\r\n    }\r\n\r\n    private notifyListener(result: any) {\r\n        if (result.Action === 'Notify') {\r\n            const txHash: string | undefined = result.Result.TxHash;\r\n\r\n            if (txHash !== undefined) {\r\n                const promise = this.promises.get(txHash);\r\n\r\n                if (promise !== undefined) {\r\n                    this.promises.delete(txHash);\r\n                    promise.resolve(result);\r\n                } else {\r\n                    // tslint:disable-next-line:no-console\r\n                    console.warn('Received Notify event for unknown transaction');\r\n                }\r\n\r\n                if (this.autoClose) {\r\n                    this.sender.close();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport * as Html5WebSocket from '@ont-community/html5-websocket';\r\nimport * as WebSocketAsPromised from 'websocket-as-promised';\r\nimport { TEST_ONT_URL } from '../../consts';\r\n\r\n/**\r\n * We can import html5-websocket directly, because webpack will use html5-websocket/browser.js\r\n * in browser environment, which does not require 'ws'.\r\n */\r\n\r\n /**\r\n  * Websocket sender for send messages and handle notify.\r\n  */\r\nexport class WebsocketSender {\r\n    private static generateReqId() {\r\n        return Math.floor(Math.random() * 10e8);\r\n    }\r\n\r\n    debug: boolean;\r\n\r\n    private wsp: any;    // WebSocketAsPromised\r\n\r\n    constructor(url = TEST_ONT_URL.SOCKET_URL, debug = false) {\r\n        this.debug = debug;\r\n        this.wsp = new WebSocketAsPromised(url, {\r\n            createWebSocket: (socketUrl: string) => new Html5WebSocket(socketUrl),\r\n            attachRequestId: (data: any, id: number) => ({ Id: id, ...data }),\r\n            extractRequestId: (data: any) => data && data.Id,\r\n            packMessage: (data: any) => JSON.stringify(data),\r\n            unpackMessage: (message: string) => JSON.parse(message)\r\n        });\r\n\r\n        this.wsp.onOpen.addListener(() => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('connected');\r\n            }\r\n        });\r\n\r\n        this.wsp.onClose.addListener(() => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('disconnected');\r\n            }\r\n        });\r\n\r\n        this.wsp.onSend.addListener((message: any) => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('sent: ', message);\r\n            }\r\n        });\r\n\r\n        this.wsp.onMessage.addListener((message: any) => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('received: ', message);\r\n            }\r\n        });\r\n\r\n        this.wsp.onError.addListener((event: any) => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('error: ', event);\r\n            }\r\n        });\r\n    }\r\n\r\n    async send<T extends object>(param: T, close: boolean = true) {\r\n        try {\r\n            if (!param) {\r\n                return;\r\n            }\r\n\r\n            await this.wsp.open();\r\n            const response = await this.wsp.sendRequest(param, { requestId: WebsocketSender.generateReqId() });\r\n\r\n            return response;\r\n        } finally {\r\n            if (close) {\r\n                await this.wsp.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    addListener(listener: (result: any) => void) {\r\n        this.wsp.onUnpackedMessage.addListener(listener);\r\n    }\r\n\r\n    close() {\r\n        this.wsp.close();\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport * as base58 from 'base-58';\r\nimport { createCipheriv, createDecipheriv } from 'crypto';\r\nimport * as CryptoJS from 'crypto-js';\r\nimport * as asyncScrypt from 'scrypt-async';\r\nimport { DEFAULT_SCRYPT, OEP_FLAG, OEP_HEADER } from './consts';\r\nimport { Address } from './crypto/address';\r\nimport { PublicKey } from './crypto/PublicKey';\r\nimport { ERROR_CODE } from './error';\r\nimport { ab2hexstring, hexstring2ab, hexXor, isHexString, StringReader } from './utils';\r\n\r\n/**\r\n * Decribtes the structure of params for scrypt\r\n */\r\nexport interface ScryptParams {\r\n    cost: number;\r\n    blockSize: number;\r\n    parallel: number;\r\n    size: number;\r\n}\r\n\r\n/**\r\n * Synchronious call to scrypt-async-js.\r\n *\r\n * @param keyphrase Keyphrase to use\r\n * @param addressHash Hex encoded address\r\n * @param params Scrypt params\r\n */\r\nfunction scrypt(keyphrase: string, addressHash: string, params: ScryptParams) {\r\n    let derived: number[] = [];\r\n\r\n    asyncScrypt(\r\n        keyphrase.normalize('NFC'),\r\n        hexstring2ab(addressHash),\r\n        {\r\n            N: params.cost,\r\n            r: params.blockSize,\r\n            p: params.parallel,\r\n            dkLen: params.size\r\n        },\r\n        (result: string | number[]) => {\r\n            derived = result as number[];\r\n        }\r\n    );\r\n    return new Buffer(derived);\r\n}\r\n\r\n/**\r\n * Encrypt with aes-ctr\r\n */\r\nexport function encryptWithCtr(\r\n    privateKey: string,\r\n    publicKeyEncoded: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n): string {\r\n    // let privateKey = PrivateKey.deserializeWIF(wifKey);\r\n    // console.log( \"privateKey: \", privateKey );\r\n\r\n    // console.log( \"publickeyEncode: \", publicKey );\r\n\r\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\r\n\r\n    const address = Address.fromPubKey(publicKey);\r\n    // console.log( \"address: \", address );\r\n\r\n    const addresshash = address.getB58Checksum();\r\n    // console.log( \"addresshash: \", addresshash );\r\n\r\n    // Scrypt\r\n    const derived = scrypt(keyphrase, addresshash, scryptParams).toString('hex');\r\n    const derived1 = derived.slice(0, 32);\r\n    const derived2 = derived.slice(64);\r\n    const iv = CryptoJS.enc.Hex.parse(derived1);\r\n\r\n    // console.log('decrypt derived: ' + derived)\r\n    // console.log('decrypt iv: ' + iv)\r\n    // console.log('decrypt derived2: ' + derived2)\r\n\r\n    // AES Encrypt\r\n    // let xor = hexXor(privateKey, derived1);\r\n    const encrypted = CryptoJS.AES.encrypt(\r\n        CryptoJS.enc.Hex.parse(privateKey),\r\n        CryptoJS.enc.Hex.parse(derived2),\r\n        { mode: CryptoJS.mode.CTR, padding: CryptoJS.pad.NoPadding, iv }\r\n    );\r\n    // console.log( \"encrypted: \", encrypted.ciphertext.toString() );\r\n\r\n    // Construct\r\n    // let assembled = OEP_HEADER + OEP_FLAG + addresshash + encrypted.ciphertext.toString();\r\n    const assembled = encrypted.ciphertext.toString();\r\n\r\n    // console.log( \"enc assembled: \", assembled );\r\n\r\n    // return Bs58check.encode(Buffer.from(assembled, 'hex'));\r\n    return new Buffer(assembled, 'hex').toString('base64');\r\n}\r\n\r\n/**\r\n * Decrypt with aes-ctr\r\n * @param encryptedKey encrypted private key\r\n * @param keyphrase user's password to encrypt private key\r\n * @param saltOrAddress 4 hex encoded bytes salt or Address object\r\n */\r\nexport function decryptWithCtr(\r\n    encryptedKey: string,\r\n    keyphrase: string,\r\n    saltOrAddress: string | Address,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n): string {\r\n    // let assembled = ab2hexstring(Bs58check.decode(encryptedKey));\r\n    const encrypted = Buffer.from(encryptedKey, 'base64').toString('hex');\r\n\r\n    // tslint:disable-next-line:no-console\r\n    // console.log('dec assembled: ', encrypted);\r\n\r\n    let salt = '';\r\n    if (typeof saltOrAddress === 'string' && saltOrAddress.length === 8) {\r\n        salt = saltOrAddress;\r\n    } else if (saltOrAddress instanceof Address) {\r\n        salt = saltOrAddress.getB58Checksum();\r\n    } else {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n\r\n    // let addressHash = assembled.substr(0, 8);\r\n    // console.log( \"dec addressHash: \", addressHash );\r\n\r\n    // let encrypted = assembled.substr(8);\r\n    // console.log( \"encrypted: \", encrypted );\r\n\r\n    // Scrypt\r\n    const derived = scrypt(keyphrase, salt, scryptParams).toString('hex');\r\n    const derived1 = derived.slice(0, 32);\r\n    const derived2 = derived.slice(64);\r\n    // console.log('decrypt derived: ' + derived)\r\n\r\n    const iv = CryptoJS.enc.Hex.parse(derived1);\r\n\r\n    // AES Decrypt\r\n    const ciphertexts = { ciphertext: CryptoJS.enc.Hex.parse(encrypted), salt: '', iv: '' };\r\n    const decrypted = CryptoJS.AES.decrypt(\r\n        ciphertexts,\r\n        CryptoJS.enc.Hex.parse(derived2),\r\n        { mode: CryptoJS.mode.CTR, padding: CryptoJS.pad.NoPadding, iv }\r\n    );\r\n    // console.log( \"decrypted: \", decrypted.toString() );\r\n\r\n    // Check PrivateKey\r\n    // ----------------------------------------------------------\r\n\r\n    // PrivateKey\r\n    // let privateKey = hexXor(decrypted.toString(), derived1);\r\n    const privateKey = decrypted.toString();\r\n    // console.log( \"privateKey: \", privateKey );\r\n    return privateKey;\r\n}\r\n\r\n/**\r\n * Checks if the password supplied to decrypt was correct.\r\n *\r\n * This method was taken out from decrypt, because it needs to create public key from private key\r\n * and it needs to be supplied from outside.\r\n *\r\n * @param saltOrAddress 4 hex encoded bytes salt or Address object\r\n * @param publicKeyEncoded Public key from decrypted key\r\n */\r\nexport function checkCtrDecrypted(saltOrAddress: string | Address, publicKeyEncoded: string): void {\r\n    // const assembled = ab2hexstring(Bs58check.decode(encryptedKey));\r\n    // let assembled = Buffer.from(encryptedKey, 'base64').toString('hex')\r\n\r\n    // console.log( \"assembled: \", assembled );\r\n\r\n    // const addressHash = assembled.substr(0, 8);\r\n    // console.log( \"addressHash: \", addressHash );\r\n\r\n    // console.log('publicKey', publicKey)\r\n    let salt = '';\r\n    if (typeof saltOrAddress === 'string' && saltOrAddress.length === 8) {\r\n        salt = saltOrAddress;\r\n    } else if (saltOrAddress instanceof Address) {\r\n        salt = saltOrAddress.getB58Checksum();\r\n    } else {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n\r\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\r\n\r\n    // Address\r\n    const address = Address.fromPubKey(publicKey);\r\n    // console.log('address 2', address)\r\n\r\n    // AddressHash\r\n    const saltNew = address.getB58Checksum();\r\n\r\n    if (saltNew !== salt) {\r\n\r\n        // tslint:disable-next-line:no-console\r\n        console.log('keyphrase error.');\r\n\r\n        throw ERROR_CODE.Decrypto_ERROR;\r\n    }\r\n\r\n    // WIF\r\n    // let wifKey = privateKey.serializeWIF();\r\n    // console.log( \"wifKey: \", wifKey );\r\n}\r\n\r\n/**\r\n * Encrypt with aes-ecb\r\n */\r\nexport function encryptWithEcb(\r\n    privateKey: string,\r\n    publicKeyEncoded: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n): string {\r\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\r\n\r\n    const address = Address.fromPubKey(publicKey);\r\n    // console.log( \"address: \", address );\r\n\r\n    const addresshash = address.getB58Checksum();\r\n    // console.log( \"addresshash: \", addresshash );\r\n    // Scrypt\r\n    const derived = scrypt(keyphrase, addresshash, scryptParams).toString('hex');\r\n    const derived1 = derived.slice(0, 64);\r\n    const derived2 = derived.slice(64);\r\n\r\n    // AES Encrypt\r\n    const xor = hexXor(privateKey, derived1);\r\n    const encrypted = CryptoJS.AES.encrypt(\r\n        CryptoJS.enc.Hex.parse(xor),\r\n        CryptoJS.enc.Hex.parse(derived2),\r\n        { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.NoPadding });\r\n    // console.log( \"encrypted: \", encrypted.ciphertext.toString() );\r\n    // Construct\r\n    const assembled = OEP_HEADER + OEP_FLAG + addresshash + encrypted.ciphertext.toString();\r\n    // console.log( \"assembled: \", assembled );\r\n    return base58.encode(Buffer.from(assembled, 'hex'));\r\n}\r\n\r\n/**\r\n * Decrypt with aes-ecb\r\n */\r\nexport function decryptWithEcb(\r\n    encryptedKey: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n): string {\r\n    const assembled = ab2hexstring(base58.decode(encryptedKey));\r\n    // console.log( \"assembled: \", assembled );\r\n    const addressHash = assembled.substr(6, 8);\r\n    // console.log( \"addressHash: \", addressHash );\r\n    const encrypted = assembled.substr(-64);\r\n    // console.log( \"encrypted: \", encrypted );\r\n    // Scrypt\r\n    const derived = scrypt(keyphrase, addressHash, scryptParams).toString('hex');\r\n    const derived1 = derived.slice(0, 64);\r\n    const derived2 = derived.slice(64);\r\n\r\n    // AES Decrypt\r\n    const ciphertexts = { ciphertext: CryptoJS.enc.Hex.parse(encrypted), salt: '', iv: '' };\r\n    const decrypted = CryptoJS.AES.decrypt(\r\n        ciphertexts,\r\n        CryptoJS.enc.Hex.parse(derived2),\r\n        { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.NoPadding });\r\n    // console.log( \"decrypted: \", decrypted.toString() );\r\n    // Check PrivateKey\r\n    // ----------------------------------------------------------\r\n    // PrivateKey\r\n    const privateKey = hexXor(decrypted.toString(), derived1);\r\n    // console.log( \"privateKey: \", privateKey );\r\n    return privateKey;\r\n}\r\n\r\n/**\r\n * Checks if the password supplied to decrypt was correct.\r\n *\r\n * This method was taken out from decrypt, because it needs to create public key from private key\r\n * and it needs to be supplied from outside.\r\n *\r\n * @param encryptedKey Original encrypted key\r\n * @param decryptedKey Decrypted key with decrypt\r\n * @param publicKeyEncoded Public key from decrypted key\r\n */\r\nexport function checkEcbDecrypted(encryptedKey: string, decryptedKey: string, publicKeyEncoded: string): void {\r\n    const assembled = ab2hexstring(base58.decode(encryptedKey));\r\n    // console.log( \"assembled: \", assembled );\r\n    const addressHash = assembled.substr(6, 8);\r\n\r\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\r\n\r\n    // Address\r\n    const address = Address.fromPubKey(publicKey);\r\n    // console.log('address', address)\r\n    // AddressHash\r\n    const addressHashNew = address.getB58Checksum();\r\n\r\n    if (addressHashNew !== addressHash) {\r\n        // tslint:disable-next-line:no-console\r\n        console.log('keyphrase error.');\r\n        throw ERROR_CODE.Decrypto_ERROR;\r\n    }\r\n}\r\n\r\n/**\r\n * Encrypt with aes-gcm-256\r\n * This is the default encryption algorithm for private key\r\n * @param privateKey Private key to encpryt with\r\n * @param address Adderss to encrypt with\r\n * @param salt Salt to encrypt with\r\n * @param keyphrase User's password\r\n * @param scryptParams Optional params to encrypt\r\n */\r\nexport function encryptWithGcm(\r\n    privateKey: string,\r\n    address: Address,\r\n    salt: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n) {\r\n    if (!isHexString(privateKey)) {\r\n        throw new Error(ERROR_CODE.INVALID_PARAMS + ', Invalid private key');\r\n    }\r\n    const derived = scrypt(keyphrase, salt, scryptParams);\r\n    const derived1 = derived.slice(0, 12);\r\n    const derived2 = derived.slice(32);\r\n    const key = derived2;\r\n    const iv = derived1;\r\n    const aad = new Buffer(address.toBase58());\r\n    const cipher = createCipheriv('aes-256-gcm', key, iv);\r\n    cipher.setAAD(aad);\r\n    const plainText = Buffer.from(privateKey, 'hex');\r\n    let ciphertext = cipher.update(plainText);\r\n    // ciphertext += cipher.final();\r\n    const final = cipher.final();\r\n    const authTag = cipher.getAuthTag();\r\n    ciphertext = Buffer.concat([ciphertext, final]);\r\n\r\n    const result = Buffer.concat([ciphertext, authTag]);\r\n    return result.toString('base64');\r\n}\r\n\r\n/**\r\n * Decrypt with aes-256-gcm\r\n * @param encrypted Encrypted private key\r\n * @param address Address to decrypt with\r\n * @param salt Salt to decrypt with\r\n * @param keyphrase User's password\r\n * @param scryptParams Optioanl params to decrypt with\r\n */\r\nexport function decryptWithGcm(\r\n    // ciphertext: string,\r\n    // authTag: string,\r\n    encrypted: string,\r\n    address: Address,\r\n    salt: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n) {\r\n    if (salt.length !== 32) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const result = Buffer.from(encrypted, 'base64');\r\n    const ciphertext = result.slice(0, result.length - 16);\r\n    const authTag = result.slice(result.length - 16);\r\n    const derived = scrypt(keyphrase, salt, scryptParams);\r\n    const derived1 = derived.slice(0, 12);\r\n    const derived2 = derived.slice(32);\r\n    const key = derived2;\r\n    const iv = derived1;\r\n    const aad = new Buffer(address.toBase58());\r\n    // const auth = new Buffer(authTag, 'hex');\r\n    const decipher = createDecipheriv('aes-256-gcm', key, iv);\r\n    decipher.setAAD(aad);\r\n    decipher.setAuthTag(authTag);\r\n    let decrypted = decipher.update(ciphertext).toString('hex');\r\n\r\n    try {\r\n        decrypted += decipher.final().toString('hex');\r\n    } catch (err) {\r\n        throw ERROR_CODE.Decrypto_ERROR;\r\n    }\r\n    return decrypted;\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/*\r\n********************************* Notice ********************************************\r\n*************************************************************************************\r\n* All the methods in this file is only for our native app development!!!\r\n* We do not recommend you to use these methods directly.\r\n* You can refer to these methods or the test cases to implement the same methods.\r\n*************************************************************************************\r\n*************************************************************************************\r\n*/\r\nimport axios from 'axios';\r\nimport * as bip39 from 'bip39';\r\nimport { Account } from '../account';\r\nimport { Claim } from '../claim/claim';\r\nimport { HTTP_REST_PORT, HTTP_WS_PORT, ONT_BIP44_PATH, REST_API, TEST_NODE } from '../consts';\r\nimport { Address, PgpSignature, PrivateKey, PublicKey } from '../crypto';\r\nimport { ERROR_CODE } from '../error';\r\nimport { Identity } from '../identity';\r\nimport { NeoRpc } from '../neocore/NeoRpc';\r\nimport { Program } from '../neocore/Program';\r\nimport { SmartContract } from '../neocore/SmartContract';\r\nimport RestClient from '../network/rest/restClient';\r\nimport { WebsocketClient } from '../network/websocket/websocketClient';\r\nimport * as scrypt from '../scrypt';\r\nimport { ScryptParams } from '../scrypt';\r\nimport AbiInfo from '../smartcontract/abi/abiInfo';\r\nimport { Parameter } from '../smartcontract/abi/parameter';\r\nimport { makeTransferTx, makeWithdrawOngTx, ONT_CONTRACT } from '../smartcontract/nativevm/ontAssetTxBuilder';\r\nimport { buildAddAttributeTx, buildGetDDOTx, buildRegisterOntidTx\r\n} from '../smartcontract/nativevm/ontidContractTxBuilder';\r\nimport { Oep8TxBuilder } from '../smartcontract/neovm/oep8TxBuilder';\r\nimport { DDOAttribute } from '../transaction/ddo';\r\nimport { Transaction } from '../transaction/transaction';\r\nimport {\r\n    buildRestfulParam,\r\n    sendRawTxRestfulUrl,\r\n    signTransaction,\r\n    signTx\r\n} from '../transaction/transactionBuilder';\r\nimport { generateMnemonic, hexstr2str, isBase64, isHexString, now, reverseHex,\r\n    sendBackResult2Native, str2hexstr, StringReader } from '../utils';\r\nimport { Wallet } from '../wallet';\r\nimport { ParameterType } from './../smartcontract/abi/parameter';\r\nimport { Oep4TxBuilder } from './../smartcontract/neovm/oep4TxBuilder';\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst HDKey = require('@ont-community/hdkey-secp256r1');\r\n\r\n// tslint:disable:no-unused-expression\r\n// tslint:disable:no-shadowed-variable\r\n\r\n// neo contract\r\nconst CONTRACT_HASH = 'ceab719b8baa2310f232ee0d277c061704541cfb';\r\n// neo node\r\nconst NEO_NODE = 'http://neonode1.ont.network:10332';\r\n// neo abi\r\n// tslint:disable-next-line:max-line-length\r\nconst NEP5_ABI = '{\"hash\":\"0x5bb169f915c916a5e30a3c13a5e0cd228ea26826\",\"entrypoint\":\"Main\",\"functions\":[{\"name\":\"Name\",\"parameters\":[],\"returntype\":\"String\"},{\"name\":\"Symbol\",\"parameters\":[],\"returntype\":\"String\"},{\"name\":\"Decimals\",\"parameters\":[],\"returntype\":\"Integer\"},{\"name\":\"Main\",\"parameters\":[{\"name\":\"operation\",\"type\":\"String\"},{\"name\":\"args\",\"type\":\"Array\"}],\"returntype\":\"Any\"},{\"name\":\"Init\",\"parameters\":[],\"returntype\":\"Boolean\"},{\"name\":\"TotalSupply\",\"parameters\":[],\"returntype\":\"Integer\"},{\"name\":\"Transfer\",\"parameters\":[{\"name\":\"from\",\"type\":\"ByteArray\"},{\"name\":\"to\",\"type\":\"ByteArray\"},{\"name\":\"value\",\"type\":\"Integer\"}],\"returntype\":\"Boolean\"},{\"name\":\"BalanceOf\",\"parameters\":[{\"name\":\"address\",\"type\":\"ByteArray\"}],\"returntype\":\"Integer\"}],\"events\":[{\"name\":\"transfer\",\"parameters\":[{\"name\":\"arg1\",\"type\":\"ByteArray\"},{\"name\":\"arg2\",\"type\":\"ByteArray\"},{\"name\":\"arg3\",\"type\":\"Integer\"}],\"returntype\":\"Void\"}]}';\r\n// neo swap address\r\n// const RECEIVER_ADDR = 'AFmseVrdL9f9oyCzZefL9tG6UbvhPbdYzM';\r\n\r\nconst NEO_TRAN = 100000000;\r\n\r\nexport class SDK {\r\n    static SERVER_NODE: string = TEST_NODE;\r\n    static REST_PORT: string = HTTP_REST_PORT;\r\n    static SOCKET_PORT: string = HTTP_WS_PORT;\r\n    static restClient: RestClient = new RestClient();\r\n    static socketClient: WebsocketClient = new WebsocketClient();\r\n\r\n    static setServerNode(node: string) {\r\n        if (node) {\r\n            let url = '';\r\n            if (node.indexOf('http') > -1) {\r\n                url = node.substr('http://'.length);\r\n            } else {\r\n                url = node;\r\n            }\r\n            SDK.SERVER_NODE = url;\r\n            return;\r\n        }\r\n\r\n        throw new Error('Can not set ' + node + 'as server node');\r\n    }\r\n\r\n    static setRestPort(port: string) {\r\n        if (port) {\r\n            SDK.REST_PORT = port;\r\n            SDK.restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n            return;\r\n        }\r\n\r\n        throw new Error('Can not set ' + port + ' as restful port');\r\n    }\r\n\r\n    static setSocketPort(port: string) {\r\n        if (port) {\r\n            SDK.SOCKET_PORT = port;\r\n            SDK.socketClient = new WebsocketClient(`ws://${SDK.SERVER_NODE}:${SDK.SOCKET_PORT}`);\r\n            return;\r\n        }\r\n        throw new Error('Can not set ' + port + 'as socket port');\r\n    }\r\n\r\n    static getDecryptError(err: any) {\r\n        return {\r\n            error: ERROR_CODE.Decrypto_ERROR,\r\n            result: ''\r\n        };\r\n    }\r\n\r\n    static transformPassword(password: string) {\r\n        if (isBase64(password)) {\r\n            return Buffer.from(password, 'base64').toString();\r\n        }\r\n        return password;\r\n    }\r\n\r\n    static createWallet(name: string,\r\n                        password: string, payer: string, gasPrice: string, gasLimit: string, callback?: string) {\r\n        const wallet = Wallet.create(name);\r\n        password = this.transformPassword(password);\r\n        const privateKey = PrivateKey.random();\r\n        const identity = Identity.create(privateKey, password, name);\r\n\r\n        wallet.defaultOntid = identity.ontid;\r\n        wallet.addIdentity(identity);\r\n\r\n        // let account = new Account()\r\n        // account.create(privateKey, password, name)\r\n        // wallet.addAccount(account)\r\n\r\n        const walletDataStr = wallet.toJson();\r\n        let obj: any = {\r\n            error: 0,\r\n            result: walletDataStr,\r\n            tx : ''\r\n        };\r\n\r\n        const publicKey = privateKey.getPublicKey();\r\n        const tx = buildRegisterOntidTx(identity.ontid, publicKey, gasPrice, gasLimit);\r\n        tx.payer = new Address(payer);\r\n        signTransaction(tx, privateKey);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        // add preExec\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            // preExec success, send real request\r\n            if (res.Result.Result === '01') {\r\n                // restClient.sendRawTransaction(tx.serialize(), false)\r\n                obj.tx = tx.serialize();\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            } else {\r\n                const errResult = {\r\n                    error: ERROR_CODE.PreExec_ERROR,\r\n                    result: ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(errResult), callback);\r\n                }\r\n                return errResult;\r\n            }\r\n        }).catch((err: any) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static importIdentityWithPrivateKey(\r\n        label: string = '',\r\n        privateKey: string,\r\n        password: string,\r\n        callback?: string\r\n    ) {\r\n        privateKey = privateKey.trim();\r\n        password = this.transformPassword(password);\r\n        if (!privateKey || privateKey.length !== 64 || !isHexString(privateKey)) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        let obj: any;\r\n        const pri = new PrivateKey(privateKey);\r\n        const identity = Identity.create(pri, password, label);\r\n        obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: identity.toJson()\r\n        };\r\n        const tx = buildGetDDOTx(identity.ontid);\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = res.Result;\r\n            if (result.Result) {\r\n                //\r\n            } else {\r\n                obj.error = ERROR_CODE.UNKNOWN_ONTID;\r\n                obj.result = '';\r\n            }\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static importIdentityWithWif(\r\n        label: string = '',\r\n        wif: string,\r\n        password: string,\r\n        callback?: string\r\n    ) {\r\n        wif = wif.trim();\r\n        password = this.transformPassword(password);\r\n        let obj: any;\r\n        let pri: PrivateKey;\r\n        try {\r\n            pri = PrivateKey.deserializeWIF(wif);\r\n        } catch (err) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const identity = Identity.create(pri, password, label);\r\n        obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: identity.toJson()\r\n        };\r\n        const tx = buildGetDDOTx(identity.ontid);\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = res.Result;\r\n            if (result.Result) {\r\n                //\r\n            } else {\r\n                obj.error = ERROR_CODE.UNKNOWN_ONTID;\r\n                obj.result = '';\r\n            }\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static importIdentityWithWallet(\r\n        label: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    ) {\r\n        let obj: any;\r\n        let identity = new Identity();\r\n        try {\r\n            // TODO check ontid\r\n            const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n            const addr = new Address(address);\r\n            password = this.transformPassword(password);\r\n            identity = Identity.importIdentity(label, encryptedPrivateKeyObj, password, addr, salt);\r\n        } catch (err) {\r\n            obj  = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }\r\n        obj = {\r\n            error : ERROR_CODE.SUCCESS,\r\n            result : identity.toJson()\r\n        };\r\n        // check ontid on chain\r\n        const tx = buildGetDDOTx(identity.ontid);\r\n        const param = buildRestfulParam(tx);\r\n        const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`;\r\n        const url = sendRawTxRestfulUrl(restUrl, true);\r\n        // clear privateKey and password\r\n        password = '';\r\n        return axios.post(url, param).then((res: any) => {\r\n            const result = res.data.Result;\r\n            if (result.Result) {\r\n                //\r\n            } else {\r\n                obj.error = ERROR_CODE.UNKNOWN_ONTID;\r\n                obj.result = '';\r\n            }\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result : ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    // send http post to check\r\n    static importIdentityAndCreateWallet(\r\n        label: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    ) {\r\n        let identity = new Identity();\r\n        let error = {};\r\n        let obj: any;\r\n        try {\r\n            password = this.transformPassword(password);\r\n            const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n            const addr = new Address(address);\r\n            identity = Identity.importIdentity(label, encryptedPrivateKeyObj, password, addr, salt);\r\n            const wallet = Wallet.create(identity.label);\r\n            wallet.defaultOntid = identity.ontid;\r\n            wallet.addIdentity(identity);\r\n            const walletStr = wallet.toJson();\r\n            obj = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: walletStr\r\n            };\r\n            // check ontid on chain\r\n            const tx = buildGetDDOTx(identity.ontid);\r\n            const param = buildRestfulParam(tx);\r\n            const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`;\r\n            const url = sendRawTxRestfulUrl(restUrl, true);\r\n            return axios.post(url, param).then((res: any) => {\r\n                const result = res.data.Result;\r\n                if (result.Result) {\r\n                    //\r\n                } else {\r\n                    obj.error = ERROR_CODE.UNKNOWN_ONTID;\r\n                    obj.result = '';\r\n                }\r\n                // clear privateKey and password\r\n                password = '';\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            }).catch((err) => {\r\n                obj = {\r\n                    error: ERROR_CODE.NETWORK_ERROR,\r\n                    result : ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n            });\r\n            // callback && sendBackResult2Native(JSON.stringify(obj), callback)\r\n            // return obj\r\n        } catch (err) {\r\n            error = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(error), callback);\r\n            }\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n\r\n    static createIdentity(label: string, password: string, payer: string,\r\n                          gasPrice: string, gasLimit: string, callback?: string) {\r\n        const privateKey = PrivateKey.random();\r\n        password = this.transformPassword(password);\r\n        const identity = Identity.create(privateKey, password, label);\r\n        const result = identity.toJson();\r\n        let obj: any = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result,\r\n            tx : ''\r\n        };\r\n        // register ontid\r\n        const publicKey = privateKey.getPublicKey();\r\n        const tx = buildRegisterOntidTx(identity.ontid, publicKey, gasPrice, gasLimit);\r\n        tx.payer = new Address(payer);\r\n        signTransaction(tx, privateKey);\r\n        password = '';\r\n        privateKey.key = '';\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            // preExec success, send real request\r\n            if (res.Result.Result === '01') {\r\n                // restClient.sendRawTransaction(tx.serialize(), false)\r\n                obj.tx = tx.serialize();\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                // clear privateKey and password\r\n                privateKey.key = '';\r\n                password = '';\r\n                return obj;\r\n            } else {\r\n                const errResult = {\r\n                    error: ERROR_CODE.PreExec_ERROR,\r\n                    result: ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(errResult), callback);\r\n                }\r\n                return errResult;\r\n            }\r\n        }).catch((err: any) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static createAccount(label: string, password: string, callback?: string) {\r\n        // generate mnemnic\r\n        let mnemonic = generateMnemonic();\r\n        password = this.transformPassword(password);\r\n        const mnemonicHex = str2hexstr(mnemonic);\r\n        const privateKey = PrivateKey.generateFromMnemonic(mnemonic);\r\n        const account = Account.create(privateKey, password, label);\r\n        const addr = account.address;\r\n        const salt = Buffer.from(account.salt, 'base64').toString('hex');\r\n        const mnemonicEnc = scrypt.encryptWithGcm(mnemonicHex, addr, salt, password);\r\n        const result = account.toJson();\r\n        const obj = {\r\n            error : ERROR_CODE.SUCCESS,\r\n            result,\r\n            mnemonicEnc\r\n        };\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        mnemonic = '';\r\n        return obj;\r\n    }\r\n\r\n    static decryptMnemonicEnc(mnemonicEnc: string,\r\n                              address: string, salt: string, password: string, callback?: string) {\r\n        let obj;\r\n        password = this.transformPassword(password);\r\n        const addr = new Address(address);\r\n        const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n        const decMneHex = scrypt.decryptWithGcm(mnemonicEnc, addr, saltHex, password);\r\n        const decMne = hexstr2str(decMneHex);\r\n        obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: decMne\r\n        };\r\n        // tslint:disable-next-line:no-unused-expression\r\n        callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n        return obj;\r\n    }\r\n\r\n    static importAccountWithWallet(\r\n        label: string,\r\n        encryptedPrivateKey: string,\r\n        address: string,\r\n        salt: string,\r\n        password: string,\r\n        callback?: string\r\n    ) {\r\n        let account = new Account();\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(address);\r\n            account = Account.importAccount(label, encryptedPrivateKeyObj, password, addr, salt);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: account.toJson()\r\n        };\r\n        // add address check\r\n        if (address !== account.address.toBase58()) {\r\n            obj.error = ERROR_CODE.INVALID_ADDR,\r\n            obj.result = '';\r\n        }\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        password = '';\r\n        return obj;\r\n    }\r\n\r\n    static signSelfClaim(\r\n        context: string,\r\n        claimData: string,\r\n        ontid: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    )  {\r\n        let privateKey: PrivateKey;\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}${REST_API.sendRawTx}`;\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // const claimDataObj = JSON.parse(claimData);\r\n        const metadata = {\r\n            issuer: ontid,\r\n            subject: ontid,\r\n            issuedAt: now()\r\n        };\r\n\r\n        // todo: pass real public key id\r\n        const publicKeyId = ontid + '#keys-1';\r\n        const claim = new Claim(metadata, undefined, undefined);\r\n        claim.sign(restUrl, publicKeyId, privateKey);\r\n        const obj = {\r\n            error : 0,\r\n            result : claim\r\n        };\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return obj;\r\n    }\r\n\r\n    static decryptEncryptedPrivateKey(\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    ) {\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        let pri;\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            pri = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const obj = {\r\n            error : 0,\r\n            result : pri.key\r\n        };\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        password = '';\r\n        return obj;\r\n    }\r\n\r\n    static getClaim(\r\n        claimId: string,\r\n        context: string,\r\n        issuer: string,\r\n        subject: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        payer: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        callback ?: string\r\n    ) {\r\n        let privateKey: PrivateKey;\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n\r\n            return result;\r\n        }\r\n        const path = 'claim' + claimId;\r\n        const valueObj = {\r\n            Type : 'JSON',\r\n            Value : {\r\n                Context: context,\r\n                Issuer: issuer\r\n            }\r\n        };\r\n        // const type = 'JSON';\r\n        const value = JSON.stringify(valueObj);\r\n        const attr = new DDOAttribute();\r\n        attr.key = path;\r\n        attr.type = 'JSON';\r\n        attr.value = value;\r\n        const publicKey = privateKey.getPublicKey();\r\n        const tx = buildAddAttributeTx(subject, [attr], publicKey, gasPrice, gasLimit);\r\n        tx.payer = new Address(payer);\r\n        signTransaction(tx, privateKey);\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            if (res.Result.Result === '01') {\r\n                // user agent will do this\r\n                // restClient.sendRawTransaction(tx.serialize(), false)\r\n                // const hash = sha256(sha256(tx.serializeUnsignedData()))\r\n                const obj = {\r\n                    error: ERROR_CODE.SUCCESS,\r\n                    result: '',\r\n                    tx: tx.serialize()\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                // clear privateKey and password\r\n                privateKey.key = '';\r\n                password = '';\r\n                return obj;\r\n            } else {\r\n                const obj = {\r\n                    error: ERROR_CODE.PreExec_ERROR,\r\n                    result: ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            }\r\n        }\r\n        ).catch((err: any) => {\r\n            const obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static signData(\r\n        content: string, // hex string\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    ): PgpSignature | object {\r\n        let privateKey: PrivateKey;\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        let result;\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const signature = privateKey.sign(content);\r\n        result = signature.serializePgp();\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static getBalance(address: string, callback?: string) {\r\n        const addressObj = new Address(address);\r\n        const request = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}${REST_API.getBalance}/${addressObj.toBase58()}`;\r\n        return axios.get(request).then((res: any) => {\r\n            if (res.data.Error === 0) {\r\n                const result = res.data.Result;\r\n                const obj = {\r\n                    error : 0,\r\n                    result\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            } else {\r\n                const obj = {\r\n                    error: res.data.Error,\r\n                    result : ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            }\r\n        }).catch( (err: any) => {\r\n            const obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return Promise.reject(obj);\r\n        });\r\n    }\r\n\r\n    // pls check balance before transfer\r\n    static transferAssets(\r\n        token: string,\r\n        from: string,\r\n        to: string,\r\n        value: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: string,\r\n        callback?: string) {\r\n\r\n        let fromAddress: Address;\r\n        let toAddress: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            fromAddress = new Address(from);\r\n            toAddress = new Address(to);\r\n        } catch (err) {\r\n            const result = {\r\n                error : ERROR_CODE.INVALID_PARAMS,\r\n                result : ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(from);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        const tx = makeTransferTx(token, fromAddress, toAddress, value, gasPrice, gasLimit);\r\n        tx.payer = new Address(payer);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static claimOng(\r\n        address: string,\r\n        value: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: string,\r\n        callback?: string\r\n    ) {\r\n        let addressObj: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            addressObj = new Address(address);\r\n\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addressObj, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        const tx = makeWithdrawOngTx(addressObj, addressObj, value, new Address(payer), gasPrice, gasLimit);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static exportIdentityToQrcode(identityDataStr: string, callback?: string) {\r\n        const obj = Identity.parseJson(identityDataStr);\r\n        let salt = obj.controls[0].salt;\r\n        if (!isBase64(salt)) {\r\n            salt = Buffer.from(salt, 'hex').toString('base64');\r\n        }\r\n        const result = {\r\n            type : 'I',\r\n            label : obj.label,\r\n            algorithm : 'ECDSA',\r\n            scrypt : {\r\n                n : 4096,\r\n                p : 8,\r\n                r : 8,\r\n                dkLen : 64\r\n            },\r\n            key : obj.controls[0].encryptedKey.key,\r\n            salt,\r\n            address: obj.controls[0].address.toBase58(),\r\n            parameters : {\r\n                curve : 'secp256r1'\r\n            }\r\n        };\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static exportIdentityToKeystring(identityDataStr: string, callback?: string) {\r\n        const obj = Identity.parseJson(identityDataStr);\r\n        const address = obj.controls[0].address.toBase58();\r\n        const salt = obj.controls[0].salt;\r\n        const key = obj.controls[0].encryptedKey.key;\r\n        const result = salt + address + key;\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static exportAccountToQrcode(accountDataStr: string, callback?: string) {\r\n        const obj = Account.parseJson(accountDataStr);\r\n        const result = {\r\n            type: 'A',\r\n            label: obj.label,\r\n            algorithm: 'ECDSA',\r\n            scrypt: {\r\n                n: 4096,\r\n                p: 8,\r\n                r: 8,\r\n                dkLen: 64\r\n            },\r\n            key: obj.encryptedKey.key,\r\n            salt: obj.salt,\r\n            address: obj.address.toBase58(),\r\n            parameters: {\r\n                curve: 'secp256r1'\r\n            }\r\n        };\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static exportAccountToKeystring(accountDataStr: string, callback?: string) {\r\n        const obj = Account.parseJson(accountDataStr);\r\n        const salt = obj.salt;\r\n        const address = obj.address.toBase58();\r\n        const key = obj.encryptedKey.key;\r\n        const result = salt + address + key;\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static importAccountMnemonic(label: string, mnemonic: string, password: string, callback?: string) {\r\n        mnemonic = mnemonic.trim();\r\n        password = this.transformPassword(password);\r\n        if (!bip39.validateMnemonic(mnemonic)) {\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            // tslint:disable-next-line:no-unused-expression\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\r\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\r\n        const pri = hdkey.derive(ONT_BIP44_PATH);\r\n        const key = Buffer.from(pri.privateKey).toString('hex');\r\n        const privateKey = new PrivateKey(key);\r\n        const account = Account.create(privateKey, password, label);\r\n        const result = account.toJson();\r\n        const obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result\r\n        };\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        mnemonic = '';\r\n        return obj;\r\n    }\r\n\r\n    static exportWifPrivakeKey(encryptedKey: string, password: string,\r\n                               address: string, salt: string, callback?: string) {\r\n        if (address.length !== 34 && address.length !== 40) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        password = this.transformPassword(password);\r\n        const encrypt = new PrivateKey(encryptedKey);\r\n        const addr = new Address(address);\r\n        const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n        const privateKey = encrypt.decrypt(password, addr, saltHex);\r\n        let wif = privateKey.serializeWIF();\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: {\r\n                wif,\r\n                privateKey: privateKey.key\r\n            }\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        wif = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static importAccountWithWif(label: string, wif: string, password: string, callback?: string) {\r\n        let privateKey;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            privateKey = PrivateKey.deserializeWIF(wif);\r\n        } catch (err) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const account = Account.create(privateKey, password, label);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: account.toJson()\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static importAccountWithPrivateKey(label: string, privateKey: string, password: string, callback?: string) {\r\n        privateKey = privateKey.trim();\r\n        password = this.transformPassword(password);\r\n        if (!privateKey || privateKey.length !== 64 || !isHexString(privateKey)) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const pri = new PrivateKey(privateKey);\r\n        const account = Account.create(pri, password, label);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: account.toJson()\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Actually import with Qrcode\r\n     */\r\n    static importAccountWithKeystore(keystore: string, password: string, callback?: string) {\r\n        let keyStoreObj;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            keyStoreObj = JSON.parse(keystore);\r\n        } catch (err) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        if (keyStoreObj.type !== 'A') {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        } else {\r\n            let account = new Account();\r\n            const encryptedPrivateKeyObj = new PrivateKey(keyStoreObj.key);\r\n            try {\r\n                const params = {\r\n                    cost: keyStoreObj.scrypt.n || 4096,\r\n                    blockSize: keyStoreObj.scrypt.p || 8,\r\n                    parallel: keyStoreObj.scrypt.r || 8,\r\n                    size: keyStoreObj.scrypt.dkLen || 64\r\n                };\r\n                const addr = new Address(keyStoreObj.address);\r\n                account = Account.importAccount(\r\n                    keyStoreObj.label, encryptedPrivateKeyObj, password, addr, keyStoreObj.salt, params);\r\n                const obj = {\r\n                    error: ERROR_CODE.SUCCESS,\r\n                    result: account.toJson()\r\n                };\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                // clear privateKey and password\r\n                password = '';\r\n                return obj;\r\n            } catch (err) {\r\n                const result = this.getDecryptError(err);\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(result), callback);\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    static getUnclaimedOng(address: string, callback?: string) {\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.getAllowance('oxg', new Address(ONT_CONTRACT), new Address(address)).then((res) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: res.Result\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }).catch((err) => {\r\n            const result = {\r\n                error: err.Error,\r\n                result: ''\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static querySmartCodeEventByTxhash(txHash: string, callback?: string) {\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.getSmartCodeEvent(txHash).then((res) => {\r\n            const obj = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: res\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            const result = {\r\n                error: err.Error,\r\n                result: ''\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static createSharedWallet(requiredSignatureNum: string, allRelatedPks: string, callback?: string) {\r\n        const M  = parseInt(requiredSignatureNum, 10);\r\n        let pks = [];\r\n        let pubs = [];\r\n        let error = ERROR_CODE.SUCCESS;\r\n        try {\r\n            pks = JSON.parse(allRelatedPks);\r\n            pubs = pks.map((p: string) => PublicKey.deserializeHex(new StringReader(p)));\r\n        } catch (err) {\r\n            error = ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        if (M < 2 || pks.length < M || pks.length > 12) {\r\n            error = ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        let address = '';\r\n        try {\r\n            address = Address.fromMultiPubKeys(M, pubs).toBase58();\r\n        } catch (err) {\r\n            error = ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        if (callback) {\r\n            const result = {\r\n                error,\r\n                result: address\r\n            };\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return address;\r\n    }\r\n\r\n    static adderssFromPublicKey(publicKey: string, callback?: string) {\r\n        const pk = PublicKey.deserializeHex(new StringReader(publicKey));\r\n        const address = Address.fromPubKey(pk).toBase58();\r\n        const result = {\r\n            error : ERROR_CODE.SUCCESS,\r\n            result: address\r\n        };\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return address;\r\n    }\r\n\r\n    static makeMultiSignTransaction(asset: string, from: string, to: string, amount: string, gasPrice: string,\r\n                                    gasLimit: string, callback?: string) {\r\n        let fromAddress: Address;\r\n        let toAddress: Address;\r\n        try {\r\n            fromAddress = new Address(from);\r\n            toAddress = new Address(to);\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const tx = makeTransferTx(asset, fromAddress, toAddress, amount, gasPrice, gasLimit);\r\n        tx.payer = fromAddress;\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            txHash: reverseHex(tx.getSignContent()),\r\n            txData: tx.serialize()\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        return result;\r\n    }\r\n\r\n    static signMultiAddrTransaction(\r\n        encryptedPrivateKey: string,\r\n        address: string,\r\n        salt: string,\r\n        password: string,\r\n        allRelatedPks: string,\r\n        requiredSignatureNum: string,\r\n        txDada: string,\r\n        callback?: string) {\r\n        password = this.transformPassword(password);\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const M = parseInt(requiredSignatureNum, 10);\r\n        const tx = Transaction.deserialize(txDada);\r\n        const pubs = JSON.parse(allRelatedPks);\r\n        const pks = pubs.map((p: string) => new PublicKey(p));\r\n        signTx(tx, M, pks, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            signedHash: tx.serialize()\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        return tx;\r\n    }\r\n\r\n    /**\r\n     * Neo transfer\r\n     */\r\n    static neoTransfer(\r\n        from: string,\r\n        to: string,\r\n        value: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        callback?: string,\r\n        params ?: ScryptParams\r\n    ) {\r\n        password = this.transformPassword(password);\r\n        const recv = new Address(to);\r\n        const addr = new Address(from);\r\n        const abiInfo = AbiInfo.parseJson(NEP5_ABI);\r\n        const contractAddr = new Address(reverseHex(CONTRACT_HASH));\r\n        const amount = parseInt(value, 10);\r\n        const func = abiInfo.getFunction('Transfer');\r\n        func.name = func.name.toLowerCase();\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex, params);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const p1 = new Parameter('from', ParameterType.ByteArray, addr.serialize());\r\n        const p2 = new Parameter('to', ParameterType.ByteArray, recv.serialize());\r\n        const p3 = new Parameter('value', ParameterType.Integer, amount * NEO_TRAN);\r\n        func.setParamsValue(p1, p2, p3);\r\n        const tx = SmartContract.makeInvokeTransaction(contractAddr, addr, func);\r\n        const p = new Program();\r\n        p.parameter = Program.programFromParams([tx.sign(privateKey)]);\r\n        p.code = Program.programFromPubKey(privateKey.getPublicKey());\r\n        tx.scripts = [p];\r\n\r\n        return NeoRpc.sendRawTransaction(NEO_NODE, tx.serialize()).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: ''\r\n            };\r\n            if (res.result) {\r\n                result.result = reverseHex(tx.getHash());\r\n                callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            } else {\r\n                result.error = ERROR_CODE.NETWORK_ERROR;\r\n                callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static getNeoBalance(address: string, callback?: string) {\r\n        const contractAddr = new Address(reverseHex(CONTRACT_HASH));\r\n        const addr = new Address(address);\r\n        return NeoRpc.getBalance(NEO_NODE, contractAddr, addr).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: 0\r\n            };\r\n            if (res.result) {\r\n                const balance = parseInt(reverseHex(res.result), 16);\r\n                result.result = balance;\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static sendTransaction(txData: string, callback?: string) {\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(txData).then((res) => {\r\n            const obj = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: res\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            const result = {\r\n                error: err.Error,\r\n                result: ''\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static sendTransactionWithWebsocket(txData: string, callback?: string) {\r\n        const socketClient = new WebsocketClient(`ws://${SDK.SERVER_NODE}:${SDK.SOCKET_PORT}`);\r\n        return socketClient.sendRawTransaction(txData, false, true).then((res) => {\r\n            const obj = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: res\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            const result = {\r\n                error: err.Error,\r\n                result: ''\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    // ope8 apis for ONTO\r\n    static queryOep8Balance(\r\n        contractHash: string,\r\n        account: string,\r\n        tokenId: number,\r\n        callback?: string\r\n    ) {\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const addr = new Address(account);\r\n        const tx = oep8.makeQueryBalanceOfTx(addr, tokenId);\r\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: 0\r\n            };\r\n            if (res.Result.Result) {\r\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static queryOep8Balances(\r\n        contractHash: string,\r\n        account: string,\r\n        callback?: string\r\n    ) {\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const addr = new Address(account);\r\n        const tx = oep8.makeQueryBalancesTx(addr);\r\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: [0, 0, 0, 0, 0, 0, 0, 0]\r\n            };\r\n            if (res.Result.Result) {\r\n                const vals = res.Result.Result.map((v: string) => v ? parseInt(reverseHex(v), 16) : 0);\r\n                result.result = vals;\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static queryOep8TotalBalance(\r\n        contractHash: string,\r\n        account: string,\r\n        callback?: string\r\n    ) {\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const addr = new Address(account);\r\n        const tx = oep8.makeQueryTotalBalanceTx(addr);\r\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: 0\r\n            };\r\n            if (res.Result.Result) {\r\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static transferOep8(\r\n        contractHash: string,\r\n        from: string,\r\n        to: string,\r\n        value: string,\r\n        tokenId: number,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: string,\r\n        callback?: string\r\n    ) {\r\n        let fromAddress: Address;\r\n        let toAddress: Address;\r\n        let payerAddress: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            fromAddress = new Address(from);\r\n            toAddress = new Address(to);\r\n            payerAddress = new Address(payer);\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(from);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            return result;\r\n        }\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const tx = oep8.makeTransferTx(fromAddress, toAddress, tokenId, value, gasPrice, gasLimit, payerAddress);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static compoundOep8(\r\n        contractHash: string,\r\n        account: string,\r\n        compoundNum: number,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: string,\r\n        callback: string\r\n    ) {\r\n        let addr: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            addr = new Address(account);\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            return result;\r\n        }\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const tx = oep8.makeCompoundTx(addr, compoundNum, gasPrice, gasLimit, addr);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    // ope4 apis for ONTO\r\n    static queryOep4Balance(\r\n        contractHash: string,\r\n        account: string,\r\n        callback?: string\r\n    ) {\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep4 = new Oep4TxBuilder(contractAddr);\r\n        const addr = new Address(account);\r\n        const tx = oep4.queryBalanceOf(addr);\r\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: 0\r\n            };\r\n            if (res.Result.Result) {\r\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static transferOep4(\r\n        contractHash: string,\r\n        from: string,\r\n        to: string,\r\n        value: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        callback?: string\r\n    ) {\r\n        let fromAddress: Address;\r\n        let toAddress: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            fromAddress = new Address(from);\r\n            toAddress = new Address(to);\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(from);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            return result;\r\n        }\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep4 = new Oep4TxBuilder(contractAddr);\r\n        const tx = oep4.makeTransferTx(fromAddress, toAddress, value, gasPrice, gasLimit, fromAddress);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { Parameter } from './parameter';\r\n\r\n/**\r\n * Describes the Abi function\r\n */\r\nexport default class AbiFunction {\r\n    name: string;\r\n    returntype: string;\r\n    parameters: Parameter[];\r\n\r\n    constructor(name: string, returntype: string, parameters: Parameter[]) {\r\n        this.name = name;\r\n        this.returntype = returntype;\r\n        this.parameters = parameters;\r\n    }\r\n\r\n    getParameter(name: string): any {\r\n        // const p = {} as Parameter;\r\n\r\n        for (const v of this.parameters) {\r\n            if (v.getName() === name) {\r\n                return v;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setParamsValue(...args: Parameter[]): void {\r\n        for (let i = 0, len = args.length; i < len; i++) {\r\n            // tslint:disable-next-line:prefer-for-of\r\n            for (let j = 0 ; j < this.parameters.length; j++) {\r\n                if (args[i].name === this.parameters[j].getName()) {\r\n                    this.parameters[j].setValue(args[i]);\r\n                }\r\n            }\r\n        }\r\n        // const parameters = [];\r\n        // for (let i = 0, len = args.length; i < len; i++) {\r\n        //     parameters.push(args[i]);\r\n        // }\r\n        // this.parameters = parameters;\r\n    }\r\n\r\n    toString(): string {\r\n        const json = {\r\n            name : this.name,\r\n            returntype : this.returntype,\r\n            parameters : this.parameters\r\n        };\r\n\r\n        return JSON.stringify(json);\r\n    }\r\n}\r\n","\r\n/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport AbiFunction from './abiFunction';\r\nimport { Parameter } from './parameter';\r\n\r\n/**\r\n * Decribes the Abi info.\r\n */\r\nexport default class AbiInfo {\r\n    static parseJson(json: string): AbiInfo {\r\n        const a = new AbiInfo();\r\n        const obj = JSON.parse(json);\r\n        a.hash = obj.hash;\r\n        a.entrypoint = obj.entrypoint;\r\n        a.functions = obj.functions;\r\n\r\n        return a;\r\n    }\r\n\r\n    hash: string;\r\n    entrypoint: string;\r\n    functions: AbiFunction[] = [];\r\n\r\n    getHash(): string {\r\n        return this.hash;\r\n    }\r\n\r\n    getEntryPoint(): string {\r\n        return this.entrypoint;\r\n    }\r\n\r\n    getFunction(name: string): AbiFunction {\r\n        for (const v of this.functions) {\r\n            if (v.name === name) {\r\n                const parameters = v.parameters.map((p: any) => new Parameter(p.name, p.type, ''));\r\n                return new AbiFunction(v.name, v.returntype, parameters);\r\n            }\r\n        }\r\n        throw Error('not found');\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { Address } from '../../crypto/address';\r\nimport opcode from '../../transaction/opcode';\r\nimport { hex2VarBytes, num2hexstring, str2VarBytes } from '../../utils';\r\nimport { pushBigNum, pushBool, pushHexString, pushInt } from './../../transaction/scriptBuilder';\r\nimport { Parameter, ParameterType } from './parameter';\r\nimport Struct from './struct';\r\n\r\nexport function buildParams(params: Parameter[]): string {\r\n    let result = '';\r\n    for (const p of params) {\r\n        const type = p.getType();\r\n        switch (type) {\r\n        case ParameterType.ByteArray:\r\n            result += hex2VarBytes(p.value);\r\n            break;\r\n        case ParameterType.Int:\r\n            result += num2hexstring(p.value, 4, true);\r\n            break;\r\n        case ParameterType.String:\r\n            result += str2VarBytes(p.value);\r\n            break;\r\n        case ParameterType.Address:\r\n            result += p.value.serialize();\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function createCodeParamScript(obj: any): string {\r\n    let result = '';\r\n    // Consider string as hexstr\r\n    if (typeof obj === 'string') {\r\n        result += pushHexString(obj);\r\n    } else if (typeof obj === 'boolean') {\r\n        result += pushBool(obj);\r\n    } else if (typeof obj === 'number') {\r\n        result += pushInt(obj);\r\n    } else if (obj instanceof BigNumber) {\r\n        result += pushBigNum(obj);\r\n    } else if (obj instanceof Address) {\r\n        result += pushHexString(obj.serialize());\r\n    } else if (obj instanceof Struct) {\r\n        for (const v of obj.list) {\r\n            result += createCodeParamScript(v);\r\n            result += num2hexstring(opcode.DUPFROMALTSTACK);\r\n            result += num2hexstring(opcode.SWAP);\r\n            result += num2hexstring(opcode.APPEND);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function buildNativeCodeScript(list: any[]) {\r\n    let result = '';\r\n    for (let i = list.length - 1; i >= 0; i--) {\r\n        const val = list[i];\r\n        // Consider string as hexstr\r\n        if (typeof val === 'string') {\r\n            result += pushHexString(val);\r\n        } else if (typeof val === 'boolean') {\r\n            result += pushBool(val);\r\n        } else if (typeof val === 'number') {\r\n            result += pushInt(val);\r\n        } else if (val instanceof BigNumber) {\r\n            result += pushBigNum(val);\r\n        } else if (val instanceof Address) {\r\n            result += pushHexString(val.serialize());\r\n        } else if (val instanceof Struct) {\r\n            result += pushInt(0);\r\n            result += num2hexstring(opcode.NEWSTRUCT);\r\n            result += num2hexstring(opcode.TOALTSTACK);\r\n            for (const v of val.list) {\r\n                result += createCodeParamScript(v);\r\n                result += num2hexstring(opcode.DUPFROMALTSTACK);\r\n                result += num2hexstring(opcode.SWAP);\r\n                result += num2hexstring(opcode.APPEND);\r\n            }\r\n            result += num2hexstring(opcode.FROMALTSTACK);\r\n        } else if (Array.isArray(val) && isTypedArray(val, Struct)) {\r\n            result += pushInt(0);\r\n            result += num2hexstring(opcode.NEWSTRUCT);\r\n            result += num2hexstring(opcode.TOALTSTACK);\r\n            for (const s of val) {\r\n                result += createCodeParamScript(s);\r\n            }\r\n            result += num2hexstring(opcode.FROMALTSTACK);\r\n            result += pushInt(val.length);\r\n            result += num2hexstring(opcode.PACK);\r\n        } else if (Array.isArray(val)) {\r\n            result += buildNativeCodeScript(val);\r\n            result += pushInt(val.length);\r\n            result += num2hexstring(opcode.PACK);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function isTypedArray(arr: any[], type: any) {\r\n    let result = true;\r\n    for (const a of arr) {\r\n        if (!(a instanceof type)) {\r\n            result = false;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nexport enum ParameterType  {\r\n    Boolean = 'Boolean',\r\n    Integer = 'Integer',\r\n    ByteArray = 'ByteArray',\r\n    Interface = 'Interface',\r\n    Array = 'Array',\r\n    Struct = 'Struct',\r\n    Map = 'Map',\r\n    String  = 'String',\r\n    Int = 'Integer',\r\n    Long = 'Long', // value should be string\r\n    IntArray = 'IntArray',\r\n    LongArray = 'LongArray',\r\n    Address = 'Address'\r\n}\r\n\r\nexport enum ParameterTypeVal {\r\n    ByteArray = 0x00,\r\n    Boolean = 0x01,\r\n    Integer = 0x02,\r\n    Interface = 0x40,\r\n    Array = 0x80,\r\n    Struct = 0x81,\r\n    Map = 0x82\r\n}\r\n\r\n/**\r\n * Decribes the parameter.\r\n */\r\nexport class Parameter {\r\n    public name: string;\r\n    public type: ParameterType;\r\n    public value: any;\r\n    constructor(name: string, type: ParameterType, value: any) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.value = value;\r\n    }\r\n\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    getType(): ParameterType {\r\n        return this.type;\r\n    }\r\n\r\n    getValue(): any {\r\n        return this.value;\r\n    }\r\n\r\n    setValue(value: any): boolean {\r\n        if (value.type === this.type && value.name === this.name && value.value != null) {\r\n            this.value = value.value;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/**\r\n * Struct is a special kind of parameter that used in smart contract.\r\n */\r\nexport default class Struct {\r\n    list: any[];\r\n\r\n    constructor() {\r\n        this.list = [];\r\n    }\r\n    /**\r\n     * Add arguments to struct.\r\n     * @param args Array of some kinds of value.\r\n     * Boolean, number, string, Address and Struct are supported.\r\n     */\r\n    add(...args: any[]) {\r\n        for (const a of args) {\r\n            this.list.push(a);\r\n        }\r\n    }\r\n}\r\n","export default {\r\n    hash: '36bb5c053b6b839c8f6b923fe852f91239b9fccc',\r\n    entrypoint: 'Main',\r\n    functions: [{\r\n        name: 'Main',\r\n        parameters: [{\r\n            name: 'operation',\r\n            type: 'String'\r\n        }, {\r\n            name: 'args',\r\n            type: 'Array'\r\n        }],\r\n        returntype: 'Any'\r\n    }, {\r\n        name: 'Commit',\r\n        parameters: [{\r\n            name: 'claimId',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'commiterId',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'ownerId',\r\n            type: 'ByteArray'\r\n        }],\r\n        returntype: 'Boolean'\r\n    }, {\r\n        name: 'Revoke',\r\n        parameters: [{\r\n            name: 'claimId',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'ontId',\r\n            type: 'ByteArray'\r\n        }],\r\n        returntype: 'Boolean'\r\n    }, {\r\n        name: 'GetStatus',\r\n        parameters: [{\r\n            name: 'claimId',\r\n            type: 'ByteArray'\r\n        }],\r\n        returntype: 'ByteArray'\r\n    }],\r\n    events: [{\r\n        name: 'ErrorMsg',\r\n        parameters: [{\r\n            name: 'arg1',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'arg2',\r\n            type: 'String'\r\n        }],\r\n        returntype: 'Void'\r\n    }, {\r\n        name: 'Push',\r\n        parameters: [{\r\n            name: 'arg1',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'arg2',\r\n            type: 'String'\r\n        }, {\r\n            name: 'arg3',\r\n            type: 'ByteArray'\r\n        }],\r\n        returntype: 'Void'\r\n    }]\r\n};\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport BigInt from '../../common/bigInt';\r\nimport { GENESIS_BLOCK_TIMESTAMP } from '../../consts';\r\nimport { Address } from '../../crypto';\r\nimport { ERROR_CODE } from '../../error';\r\nimport RestClient from '../../network/rest/restClient';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { makeNativeContractTx } from '../../transaction/transactionBuilder';\r\nimport { calcUnboundOng, hex2VarBytes, hexstr2str,\r\n    num2hexstring, str2hexstr, str2VarBytes, StringReader, varifyPositiveInt } from '../../utils';\r\nimport { buildNativeCodeScript } from '../abi/nativeVmParamsBuilder';\r\nimport Struct from '../abi/struct';\r\n\r\nconst GOVERNANCE_CONTRACT = '0000000000000000000000000000000000000007';\r\nconst PEER_ATTRIBUTES = 'peerAttributes';\r\nconst SPLIT_FEE_ADDRESS = 'splitFeeAddress';\r\nconst AUTHORIZE_INFO_POOL = 'voteInfoPool';\r\nconst GLOBAL_PARAM = 'globalParam';\r\nconst TOTAL_STAKE = 'totalStake';\r\nconst contractAddress = new Address(GOVERNANCE_CONTRACT);\r\n\r\n/* TODO: Test */\r\n\r\n// tslint:disable:no-console\r\n\r\n/**\r\n * Register to be candidate node.\r\n * This tx needs signatures from userAddr and payer if these two address are not the same.\r\n * @param ontid user's ONT ID, must be assigned with the role.\r\n * @param peerPubKey public key of user's peer\r\n * @param userAddr user's address to pledge ONT&ONG. This address must have enough ONT & ONG.\r\n * @param keyNo user's pk id\r\n * @param initPos Initial state\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeRegisterCandidateTx(\r\n    ontid: string,\r\n    peerPubKey: string,\r\n    keyNo: number,\r\n    userAddr: Address,\r\n    initPos: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    varifyPositiveInt(initPos);\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), initPos, ontid, keyNo);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('registerCandidate', params, contractAddress,\r\n                                     gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n *\r\n * @param userAddr User's address to pledge ONT&ONG.\r\n * @param peerPubKey Public key of user's peer\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeUnregisterCandidateTx(\r\n    userAddr: Address,\r\n    peerPubKey: string,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize());\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('unRegisterCandidate', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Creates transaction to approve candidate\r\n * @param peerPubKey Public key of user's peer\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeApproveCandidateTx(\r\n    peerPubKey: string,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey));\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('approveCandidate', params, contractAddress,\r\n                                     gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Creates transaction to reject candidate\r\n * @param peerPubKey Public key of user's peer\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeRejectCandidateTx(\r\n    peerPubKey: string,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey));\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('rejectCandidate', params, contractAddress,\r\n        gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Creates transaction to vote for some peers.\r\n * Can only vote for peers that with status 1 or 2\r\n * This tx needs signatures from userAddr and payer if these two address are not the same.\r\n * @param userAddr User's address\r\n * @param peerPubKeys Public keys of peers that to be voted\r\n * @param posList Array of token that to vote\r\n * @param payer Address to pay for transaction's gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeVoteForPeerTx(\r\n    userAddr: Address,\r\n    peerPubKeys: string[],\r\n    posList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    if (peerPubKeys.length !== posList.length) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeys.length);\r\n    for (const p of peerPubKeys) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(posList.length);\r\n    for (const n of posList) {\r\n        struct.add(n);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('voteForPeer', params, contractAddress,\r\n       gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * User unvotes peer nodes\r\n * @param userAddr user's address\r\n * @param peerPubKeys peer's pks\r\n * @param posList amount of ONT to unvote\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeUnvoteForPeerTx(\r\n    userAddr: Address,\r\n    peerPubKeys: string[],\r\n    posList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    if (peerPubKeys.length !== posList.length) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeys.length);\r\n    for (const p of peerPubKeys) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(posList.length);\r\n    for (const n of posList) {\r\n        struct.add(n);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('unVoteForPeer', params, contractAddress,\r\n         gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Withdraw the unvote ONT\r\n * Need two signatures if userAddr and payer are not the same\r\n * @param userAddr\r\n * @param peerPubKeys\r\n * @param withdrawList\r\n */\r\nexport function makeWithdrawTx(\r\n    userAddr: Address,\r\n    peerPubKeys: string[],\r\n    withdrawList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    if (peerPubKeys.length !== withdrawList.length) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeys.length);\r\n    for (const p of peerPubKeys) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(withdrawList.length);\r\n    for (const w of withdrawList) {\r\n        struct.add(w);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('withdraw', params, contractAddress,\r\n        gasPrice, gasLimit, payer);\r\n}\r\n\r\n/** Quit node register\r\n * Need two signatures if userAddr and payer are not the same\r\n */\r\nexport function makeQuitNodeTx(\r\n    userAddr: Address,\r\n    peerPubKey: string,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize());\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('quitNode', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Peer change the status of authorization\r\n * @param peerPubKey Peer's public key\r\n * @param userAddr User's address\r\n * @param maxAuthorize Allowed max amount of stake authorization\r\n * @param payer Payer of the transaction fee\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeChangeAuthorizationTx(\r\n    peerPubKey: string,\r\n    userAddr: Address,\r\n    maxAuthorize: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), maxAuthorize);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('changeMaxAuthorization', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Update allocation proportion of peer\r\n * @param peerPubKey\r\n * @param userAddr\r\n * @param peerCost\r\n * @param payer\r\n * @param gasPrice\r\n * @param gasLimit\r\n */\r\nexport function makeSetPeerCostTx(\r\n    peerPubKey: string,\r\n    userAddr: Address,\r\n    peerCost: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), peerCost);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('setPeerCost', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Withdraw fee to user's address\r\n * @param userAddr User's address\r\n * @param payer\r\n * @param gasPrice\r\n * @param gasLimit\r\n */\r\nexport function makeWithdrawFeeTx(\r\n    userAddr: Address,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('withdrawFee', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * User authorize some peers\r\n * @param userAddr\r\n * @param peerPubKeyList\r\n * @param posList\r\n * @param payer\r\n * @param gasPrice\r\n * @param gasLimit\r\n */\r\nexport function makeAuthorizeForPeerTx(\r\n    userAddr: Address,\r\n    peerPubKeyList: string[],\r\n    posList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeyList.length);\r\n    for (const p of peerPubKeyList) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(posList.length);\r\n    for (const w of posList) {\r\n        struct.add(w);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('authorizeForPeer', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * User cancels the authorization of peer\r\n */\r\nexport function makeUnauthorizeForPeerTx(\r\n    userAddr: Address,\r\n    peerPubKeyList: string[],\r\n    posList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeyList.length);\r\n    for (const p of peerPubKeyList) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(posList.length);\r\n    for (const w of posList) {\r\n        struct.add(w);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('unAuthorizeForPeer', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Peer add the init pos\r\n * @param peerPubkey Peer's public key\r\n * @param userAddr Stake wallet address\r\n * @param pos Amount of pos to add\r\n * @param payer Payer of the transaction\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeAddInitPosTx(\r\n    peerPubkey: string,\r\n    userAddr: Address,\r\n    pos: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubkey), userAddr.serialize(), pos);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('addInitPos', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Peer reduce the init pos\r\n * @param peerPubkey Peer's public key\r\n * @param userAddr Stake wallet address\r\n * @param pos Amount of pos to reduce\r\n * @param payer Payer of the transaction\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeReduceInitPosTx(\r\n    peerPubkey: string,\r\n    userAddr: Address,\r\n    pos: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubkey), userAddr.serialize(), pos);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('reduceInitPos', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\nexport function makeWithdrawPeerUnboundOngTx(\r\n    userAddr: Address,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n) {\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('withdrawOng', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * If not set ifAuthorize or cost before, query result will be empty.\r\n * @param peerPubKey\r\n * @param url\r\n */\r\nexport async function getAttributes(peerPubKey: string, url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(PEER_ATTRIBUTES) + peerPubKey;\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    const result = res.Result;\r\n    if (result) {\r\n        return PeerAttributes.deserialize(new StringReader(result));\r\n    } else {\r\n        return new PeerAttributes();\r\n    }\r\n}\r\n\r\n/**\r\n * Get the reward fee of address\r\n * @param address User's address\r\n * @param url Node's restfull url\r\n */\r\nexport async function getSplitFeeAddress(address: Address, url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(SPLIT_FEE_ADDRESS) + address.serialize();\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    const result = res.Result;\r\n    if (result) {\r\n        return SplitFeeAddress.deserialize(new StringReader(result));\r\n    } else {\r\n        return new SplitFeeAddress();\r\n    }\r\n}\r\n\r\n/**\r\n * Get authorization of user's address\r\n * @param peerPubKey Peer's public key\r\n * @param address User's address\r\n * @param url Node's restful url\r\n */\r\nexport async function getAuthorizeInfo(peerPubKey: string, address: Address, url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(AUTHORIZE_INFO_POOL) + peerPubKey + address.serialize();\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    const result = res.Result;\r\n    if (result) {\r\n        return AuthorizeInfo.deserialize(new StringReader(result));\r\n    } else {\r\n        return new AuthorizeInfo();\r\n    }\r\n}\r\n\r\n/**\r\n * Query the governance view\r\n * @param url Url of restful api\r\n */\r\nexport async function getGovernanceView(url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr('governanceView');\r\n    const viewRes = await restClient.getStorage(codeHash, key);\r\n    const view = viewRes.Result;\r\n    const governanceView = GovernanceView.deserialize(new StringReader(view));\r\n    return governanceView;\r\n}\r\n\r\n/**\r\n * Query all the peer's state. The result is a map.\r\n * @param url Url of blockchain node\r\n */\r\nexport async function getPeerPoolMap(url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const governanceView = await getGovernanceView(url);\r\n    const key1 = str2hexstr('peerPool');\r\n    const key2 = num2hexstring(governanceView.view, 4, true);\r\n    const keyP = key1 + key2;\r\n    const res = await restClient.getStorage(codeHash, keyP);\r\n    const sr = new StringReader(res.Result);\r\n    const length = sr.readInt();\r\n    const result: any = {};\r\n    for (let i = 0; i < length; i++) {\r\n        const p = PeerPoolItem.deserialize(sr);\r\n        result[p.peerPubkey] = p;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport async function getGlobalParam(url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(GLOBAL_PARAM);\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    if (res.Result) {\r\n        return GlobalParam.deserialize(new StringReader(res.Result));\r\n    } else {\r\n        return new GlobalParam();\r\n    }\r\n\r\n}\r\n\r\nexport async function getTotalStake(userAddr: Address, url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(TOTAL_STAKE) + userAddr.serialize();\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    if (res.Result) {\r\n        return TotalStake.deserialize(new StringReader(res.Result));\r\n    } else {\r\n        return new TotalStake();\r\n    }\r\n}\r\n\r\nexport async function getPeerUnboundOng(userAddr: Address, url?: string) {\r\n    const totalStake = await getTotalStake(userAddr, url);\r\n    if (!totalStake.address) {\r\n        return 0;\r\n    }\r\n    const restClient = new RestClient(url);\r\n    const blockHeight = (await restClient.getBlockHeight()).Result;\r\n    const block = (await restClient.getBlockJson(blockHeight)).Result;\r\n    const timeStamp = block.Header.Timestamp - GENESIS_BLOCK_TIMESTAMP;\r\n    return calcUnboundOng(totalStake.stake, totalStake.timeOffset, timeStamp);\r\n}\r\n\r\n/**\r\n * Use to store governance state.\r\n */\r\nexport class GovernanceView {\r\n    static deserialize(sr: StringReader): GovernanceView {\r\n        const g = new GovernanceView();\r\n        g.view = sr.readUint32();\r\n        g.height = sr.readUint32();\r\n        g.txhash = sr.read(64); // uint256\r\n        return g;\r\n    }\r\n    view: number = 0;\r\n    height: number = 0;\r\n    txhash: string = '';\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        result += num2hexstring(this.view, 4, true);\r\n        result += num2hexstring(this.height, 4, true);\r\n        result += hex2VarBytes(this.txhash);\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Describs the peer's state in the pool.\r\n */\r\nexport class PeerPoolItem {\r\n    static deserialize(sr: StringReader): PeerPoolItem {\r\n        const p = new PeerPoolItem();\r\n        p.index = sr.readInt();\r\n        p.peerPubkey = hexstr2str(sr.readNextBytes());\r\n        p.address = Address.deserialize(sr);\r\n        p.status = parseInt(sr.read(1), 16);\r\n        p.initPos = sr.readLong();\r\n        p.totalPos = sr.readLong();\r\n        return p;\r\n    }\r\n\r\n    index: number = 0;\r\n    peerPubkey: string = '';\r\n    address: Address;\r\n    status: number = 0;\r\n    initPos: number = 0;\r\n    totalPos: number = 0;\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        result += num2hexstring(this.index, 4, true);\r\n        result += str2VarBytes(this.peerPubkey);\r\n        result += this.address.serialize();\r\n        result += num2hexstring(this.status);\r\n        result += num2hexstring(this.initPos, 8, true);\r\n        result += num2hexstring(this.totalPos, 8, true);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class PeerAttributes {\r\n    static deserialize(sr: StringReader): PeerAttributes {\r\n        const pr = new PeerAttributes();\r\n        pr.peerPubkey = hexstr2str(sr.readNextBytes());\r\n\r\n        pr.maxAuthorize = sr.readLong();\r\n\r\n        pr.t2PeerCost = sr.readLong();\r\n        pr.t1PeerCost = sr.readLong();\r\n        pr.tPeerCost = sr.readLong();\r\n\r\n        if (sr.isEmpty) {\r\n            return pr;\r\n        }\r\n        pr.field1 = sr.readNextBytes();\r\n        pr.field2 = sr.readNextBytes();\r\n        pr.field3 = sr.readNextBytes();\r\n        pr.field4 = sr.readNextBytes();\r\n\r\n        return pr;\r\n    }\r\n    peerPubkey: string = '';\r\n    maxAuthorize: number = 0;\r\n    t2PeerCost: number = 100; // peer cost, active in view T + 2\r\n    t1PeerCost: number = 100; // peer cost, active in view T + 1\r\n    tPeerCost: number = 0; // peer cost, active in view T\r\n    field1: string = '';\r\n    field2: string = '';\r\n    field3: string = '';\r\n    field4: string = '';\r\n\r\n    serialize(): string {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport class SplitFeeAddress {\r\n    static deserialize(sr: StringReader) {\r\n        const sfa = new SplitFeeAddress();\r\n        sfa.address = Address.deserialize(sr);\r\n        sfa.amount = sr.readLong();\r\n        return sfa;\r\n    }\r\n\r\n    address: Address;\r\n    amount: number = 0;\r\n}\r\n\r\nexport class AuthorizeInfo {\r\n    static deserialize(sr: StringReader) {\r\n        const ai = new AuthorizeInfo();\r\n        ai.peerPubkey = hexstr2str(sr.readNextBytes());\r\n        ai.address = Address.deserialize(sr);\r\n        ai.consensusPos = sr.readLong();\r\n        ai.freezePos = sr.readLong();\r\n        ai.newPos = sr.readLong();\r\n        ai.withdrawPos = sr.readLong();\r\n        ai.withdrawFreezePos = sr.readLong();\r\n        ai.withdrawUnfreezePos = sr.readLong();\r\n        return ai;\r\n    }\r\n\r\n    peerPubkey: string = '';\r\n    address: Address;\r\n    consensusPos: number = 0;\r\n    freezePos: number = 0;\r\n    newPos: number = 0;\r\n    withdrawPos: number = 0;\r\n    withdrawFreezePos: number = 0;\r\n    withdrawUnfreezePos: number = 0;\r\n}\r\n\r\nexport class GlobalParam {\r\n    static deserialize(sr: StringReader) {\r\n        const gp = new GlobalParam();\r\n        const feeHexStr = sr.readNextBytes();\r\n        const candidateFeeStr = BigInt.fromHexstr(feeHexStr).value;\r\n        gp.candidateFee = Number(candidateFeeStr);\r\n        const minStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        gp.minInitState = Number(minStr);\r\n        const candidateNumStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const candidateNum = Number(candidateNumStr);\r\n        gp.candidateNum = candidateNum;\r\n        const posLimitStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        gp.posLimit = Number(posLimitStr);\r\n        const aStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const a = Number(aStr);\r\n        const bStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const b = Number(bStr);\r\n        const yStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const yita = Number(yStr);\r\n        const pStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const penalty = Number(pStr);\r\n        gp.A = a;\r\n        gp.B = b;\r\n        gp.yita = yita;\r\n        gp.penalty = penalty;\r\n        return gp;\r\n    }\r\n\r\n    candidateFee: number;\r\n    candidateNum: number;\r\n    minInitState: number;\r\n    posLimit: number;\r\n    A: number;\r\n    B: number;\r\n    yita: number;\r\n    penalty: number;\r\n}\r\n\r\nexport class TotalStake {\r\n    static deserialize(sr: StringReader): TotalStake {\r\n        const ts = new TotalStake();\r\n        ts.address = Address.deserialize(sr);\r\n        ts.stake = sr.readLong();\r\n        ts.timeOffset = sr.readUint32();\r\n        return ts;\r\n    }\r\n    address: Address;\r\n    stake: number;\r\n    timeOffset: number;\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { BigNumber } from \"bignumber.js\";\r\nimport BigInt from \"../../common/bigInt\";\r\nimport { TOKEN_TYPE } from \"../../consts\";\r\nimport { Address } from \"../../crypto\";\r\nimport { ERROR_CODE } from \"../../error\";\r\nimport { Transaction } from \"../../transaction/transaction\";\r\nimport { Transfer } from \"../../transaction/transfer\";\r\nimport { hex2VarBytes, hexstr2str, StringReader } from \"../../utils\";\r\nimport { makeNativeContractTx } from \"./../../transaction/transactionBuilder\";\r\nimport { buildNativeCodeScript } from \"./../abi/nativeVmParamsBuilder\";\r\nimport Struct from \"./../abi/struct\";\r\n\r\nexport const ONT_CONTRACT = \"0000000000000000000000000000000000000001\";\r\nexport const ONG_CONTRACT = \"0000000000000000000000000000000000000002\";\r\n\r\n/**\r\n * Get the address of native asset contract\r\n * @param tokenType Token type. Can only be ONT or ONG\r\n */\r\nexport function getTokenContract(tokenType: string) {\r\n  console.log(\"tokenType@@\", tokenType);\r\n\r\n  if (tokenType === TOKEN_TYPE.ONT) {\r\n    return new Address(ONT_CONTRACT);\r\n  } else if (tokenType === TOKEN_TYPE.ONG) {\r\n    return new Address(ONG_CONTRACT);\r\n  } else {\r\n    throw new Error(\"Error token type.\");\r\n  }\r\n}\r\n\r\n/**\r\n * Verify amount\r\n * @param amount Amount\r\n */\r\nexport function verifyAmount(amount: number | string) {\r\n  const value = new BigNumber(amount);\r\n\r\n  if (!value.isInteger() || value.lte(new BigNumber(0))) {\r\n    throw new Error(\"Amount is invalid.\");\r\n  }\r\n}\r\n\r\n/**\r\n * Creates transaction to transfer native assets.\r\n * @param tokenType ONT or ONG\r\n * @param from sender's address\r\n * @param to receiver's address\r\n * @param amount Amount of amount to transfer\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for transaction's gas.\r\n */\r\nexport function makeTransferTx(\r\n  tokenType: string,\r\n  from: Address,\r\n  to: Address,\r\n  amount: number | string,\r\n  gasPrice: string,\r\n  gasLimit: string,\r\n  payer?: Address\r\n): Transfer {\r\n  verifyAmount(amount);\r\n  const num = new BigNumber(amount);\r\n  const struct = new Struct();\r\n  struct.add(from, to, num);\r\n  const list = [];\r\n  list.push([struct]);\r\n  const contract = getTokenContract(tokenType);\r\n  const params = buildNativeCodeScript(list);\r\n  const tx: Transfer = makeNativeContractTx(\r\n    \"transfer\",\r\n    params,\r\n    contract,\r\n    gasPrice,\r\n    gasLimit\r\n  ) as any;\r\n  tx.tokenType = tokenType;\r\n  tx.from = from;\r\n  tx.to = to;\r\n  tx.amount = amount;\r\n  tx.method = \"transfer\";\r\n\r\n  if (payer) {\r\n    tx.payer = payer;\r\n  } else {\r\n    tx.payer = from;\r\n  }\r\n  return tx;\r\n}\r\n\r\n/**\r\n * transfer from multiple senders to one receiver\r\n * this tx needs multiple senders' signature.\r\n * @param tokenType\r\n * @param from array of senders' address\r\n * @param to receiver's address\r\n * @param amounts\r\n */\r\n/* export function makeTransferFromManyTx(\r\n    tokenType: string,\r\n    from: Address[],\r\n    to: Address,\r\n    amounts: string[],\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const states = new Array<State>(from.length);\r\n\r\n    if (from.length !== amounts.length) {\r\n        throw new Error('Params error.');\r\n    }\r\n    for (let i = 0; i < from.length; i++) {\r\n        verifyAmount(amounts[i]);\r\n        const s = new State(from[i], to, amounts[i]);\r\n        states[i] = s;\r\n    }\r\n\r\n    const transfers = new Transfers();\r\n    transfers.states = states;\r\n\r\n    const contract = getTokenContract(tokenType);\r\n    const params = transfers.serialize();\r\n    const tx = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit);\r\n    tx.payer = from[0];\r\n    return tx;\r\n} */\r\n\r\n/**\r\n * transfer from one sender to multiple receivers\r\n * @param tokenType\r\n * @param from\r\n * @param to\r\n * @param amounts\r\n */\r\n/* export function makeTransferToMany(\r\n    tokenType: string,\r\n    from: Address,\r\n    to: Address[],\r\n    amounts: string[],\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const states = new Array<State>(to.length);\r\n\r\n    if (to.length !== amounts.length) {\r\n        throw new Error('Params error.');\r\n    }\r\n\r\n    for (let i = 0; i < to.length; i++) {\r\n        verifyAmount(amounts[i]);\r\n        const s = new State(from, to[i], amounts[i]);\r\n        states[i] = s;\r\n    }\r\n\r\n    const transfers = new Transfers();\r\n    transfers.states = states;\r\n\r\n    const contract = getTokenContract(tokenType);\r\n    const params = transfers.serialize();\r\n    const tx = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit);\r\n    tx.payer = from;\r\n    return tx;\r\n} */\r\n\r\n/**\r\n * Withdraw ong from sender's address and send to receiver's address\r\n * @param from Sender's address\r\n * @param to Receiver's address\r\n * @param amount Amount of ONG to withdraw.The value needs to multiply 1e9 to keep precision\r\n * @param payer Address to pay for transaction's gas\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeWithdrawOngTx(\r\n  from: Address,\r\n  to: Address,\r\n  amount: number | string,\r\n  payer: Address,\r\n  gasPrice: string,\r\n  gasLimit: string\r\n): Transfer {\r\n  verifyAmount(amount);\r\n  const num = new BigNumber(amount);\r\n\r\n  // const tf = new TransferFrom(from, new Address(ONT_CONTRACT), to, amount);\r\n  // const params = tf.serialize();\r\n  const list = [];\r\n  const struct = new Struct();\r\n  struct.add(from, new Address(ONT_CONTRACT), to, num);\r\n  list.push(struct);\r\n  const args = buildNativeCodeScript(list);\r\n  const tx: Transfer = makeNativeContractTx(\r\n    \"transferFrom\",\r\n    args,\r\n    new Address(ONG_CONTRACT),\r\n    gasPrice,\r\n    gasLimit\r\n  ) as any;\r\n  tx.payer = payer;\r\n  tx.tokenType = \"OXG\";\r\n  tx.from = from;\r\n  tx.to = to;\r\n  tx.amount = amount;\r\n  tx.method = \"transferFrom\";\r\n  return tx;\r\n}\r\n\r\n/**\r\n * Creates transaction to query allowance that can be sent from sender to receiver\r\n * @param asset Asset type. Only ONT or ONg.\r\n * @param from Sender's address\r\n * @param to Receiver's address\r\n */\r\nexport function makeQueryAllowanceTx(\r\n  asset: string,\r\n  from: Address,\r\n  to: Address\r\n): Transaction {\r\n  asset = asset.toLowerCase();\r\n  if (asset !== \"onyx\" && asset !== \"oxg\") {\r\n    throw ERROR_CODE.INVALID_PARAMS;\r\n  }\r\n\r\n  let contract = \"\";\r\n  if (asset === \"oxg\") {\r\n    contract = ONG_CONTRACT;\r\n  } else {\r\n    contract = ONT_CONTRACT;\r\n  }\r\n  const list = [];\r\n  const struct = new Struct();\r\n  struct.add(from, to);\r\n  list.push(struct);\r\n  const params = buildNativeCodeScript(list);\r\n  const tx = makeNativeContractTx(\r\n    \"allowance\",\r\n    params,\r\n    new Address(contract),\r\n    \"0\",\r\n    \"0\"\r\n  );\r\n  return tx;\r\n}\r\n\r\n/**\r\n * Creates transaction to query balance.\r\n * @param asset Token type,ont or ong\r\n * @param address Address to query balance\r\n */\r\nexport function makeQueryBalanceTx(\r\n  asset: string,\r\n  address: Address\r\n): Transaction {\r\n  asset = asset.toLowerCase();\r\n  if (asset !== \"onyx\" && asset !== \"oxg\") {\r\n    throw ERROR_CODE.INVALID_PARAMS;\r\n  }\r\n  let contract = \"\";\r\n  if (asset === \"oxg\") {\r\n    contract = ONG_CONTRACT;\r\n  } else {\r\n    contract = ONT_CONTRACT;\r\n  }\r\n  const params = hex2VarBytes(address.serialize());\r\n  const tx = makeNativeContractTx(\r\n    \"balanceOf\",\r\n    params,\r\n    new Address(contract),\r\n    \"0\",\r\n    \"0\"\r\n  );\r\n  return tx;\r\n}\r\n\r\nexport function deserializeTransferTx(str: string): Transfer {\r\n  const tx: Transfer = Transaction.deserialize(str) as any;\r\n  const code = tx.payload.serialize();\r\n  const contractIndex1 = code.lastIndexOf(\r\n    \"14\" + \"000000000000000000000000000000000000000\"\r\n  );\r\n  const contractIndex2 = code.lastIndexOf(\r\n    \"14\" + \"0000000000000000000000000000000000000002\"\r\n  );\r\n  if (contractIndex1 > 0 && code.substr(contractIndex1 + 41, 1) === \"1\") {\r\n    tx.tokenType = \"ONYX\";\r\n  } else if (\r\n    contractIndex1 > 0 &&\r\n    code.substr(contractIndex1 + 41, 1) === \"2\"\r\n  ) {\r\n    tx.tokenType = \"OXG\";\r\n  } else {\r\n    throw new Error(\"Not a transfer tx\");\r\n  }\r\n  const contractIndex = Math.max(contractIndex1, contractIndex2);\r\n  const params = code.substring(0, contractIndex);\r\n  const paramsEnd = params.indexOf(\"6a7cc86c\") + 8;\r\n  if (params.substr(paramsEnd, 4) === \"51c1\") {\r\n    // transfer\r\n    const methodStr = params.substring(paramsEnd + 6);\r\n    tx.method = hexstr2str(methodStr);\r\n  } else {\r\n    const methodStr = params.substring(paramsEnd + 2);\r\n    tx.method = hexstr2str(methodStr);\r\n  }\r\n\r\n  if (tx.method === \"transfer\") {\r\n    const sr = new StringReader(params);\r\n    // const codeLength = sr.readNextLen();\r\n    // const bytes = sr.read(4);\r\n    sr.pos += 10;\r\n    const from = new Address(sr.read(20));\r\n    tx.from = from;\r\n    // const bytes2 = sr.read(4);\r\n    sr.pos += 8;\r\n    const to = new Address(sr.read(20));\r\n    tx.to = to;\r\n    // const bytes3 = sr.read(3);\r\n    sr.pos += 6;\r\n    const numTmp = parseInt(sr.read(1), 16);\r\n    if (sr.str.substr(sr.pos, 6) === \"6a7cc8\") {\r\n      tx.amount = numTmp - 80;\r\n    } else {\r\n      const amount = BigInt.fromHexstr(sr.read(numTmp)).value;\r\n      tx.amount = new BigNumber(amount).toString();\r\n    }\r\n  } else if (tx.method === \"transferFrom\") {\r\n    const sr = new StringReader(params);\r\n    // const codeLength = sr.readNextLen();\r\n    // const bytes = sr.read(4);\r\n    sr.pos += 10;\r\n    const from = new Address(sr.read(20));\r\n    tx.from = from;\r\n    // const bytes1 = sr.read(4);\r\n    // const contract = new Address(sr.read(20));\r\n    // const bytes2 = sr.read(4);\r\n    sr.pos += 56;\r\n    const to = new Address(sr.read(20));\r\n    tx.to = to;\r\n    // const bytes3 = sr.read(3);\r\n    sr.pos += 6;\r\n    const numTmp = parseInt(sr.read(1), 16);\r\n    if (sr.str.substr(sr.pos, 6) === \"6a7cc8\") {\r\n      tx.amount = numTmp - 80;\r\n    } else {\r\n      const amount = BigInt.fromHexstr(sr.read(numTmp)).value;\r\n      tx.amount = new BigNumber(amount).toString();\r\n    }\r\n  } else {\r\n    throw new Error(\"Not a transfer tx\");\r\n  }\r\n\r\n  return tx;\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { Address, PublicKey } from '../../crypto';\r\nimport { DDOAttribute } from '../../transaction/ddo';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { makeNativeContractTx } from '../../transaction/transactionBuilder';\r\nimport { num2hexstring, str2hexstr } from '../../utils';\r\nimport { buildNativeCodeScript } from '../abi/nativeVmParamsBuilder';\r\nimport Struct from '../abi/struct';\r\n\r\n/**\r\n * Address of ONT ID contract\r\n */\r\nexport const ONTID_CONTRACT = '0000000000000000000000000000000000000003';\r\n\r\n/**\r\n * Method names in ONT ID contract\r\n */\r\nconst ONTID_METHOD  = {\r\n    regIDWithPublicKey: 'regIDWithPublicKey',\r\n    regIDWithAttributes: 'regIDWithAttributes',\r\n    addAttributes: 'addAttributes',\r\n    removeAttribute: 'removeAttribute',\r\n    getAttributes: 'getAttributes',\r\n    getDDO: 'getDDO',\r\n    addKey: 'addKey',\r\n    removeKey: 'removeKey',\r\n    getPublicKeys: 'getPublicKeys',\r\n    addRecovery: 'addRecovery',\r\n    changeRecovery: 'changeRecovery',\r\n    getKeyState: 'getKeyState'\r\n};\r\n\r\n/**\r\n * Registers Identity.\r\n *\r\n * GAS calculation: gasLimit * gasPrice is equal to the amount of gas consumed.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param publicKey Public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildRegisterOntidTx(\r\n    ontid: string,\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.regIDWithPublicKey;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(ontid, publicKey.serializeHex());\r\n    const list = [struct];\r\n    const params = buildNativeCodeScript(list);\r\n\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(ONTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Registers Identity with initial attributes.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param attributes Array of DDOAttributes\r\n * @param publicKey User's public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildRegIdWithAttributes(\r\n    ontid: string,\r\n    attributes: DDOAttribute[],\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n) {\r\n    const method = ONTID_METHOD.regIDWithAttributes;\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    // let attrs = '';\r\n    // for (const a of attributes) {\r\n    //     attrs += a.serialize();\r\n    // }\r\n\r\n    // const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, ontid);\r\n    // const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, publicKey.serializeHex());\r\n    // const p3 = new Parameter(f.parameters[2].getName(), ParameterType.ByteArray, attrs);\r\n    // f.setParamsValue(p1, p2, p3);\r\n    const attrLen = attributes.length;\r\n    const struct = new Struct();\r\n    struct.add(ontid, publicKey.serializeHex(), attrLen);\r\n    for (const a of attributes) {\r\n        const key = str2hexstr(a.key);\r\n        const type = str2hexstr(a.type);\r\n        const value = str2hexstr(a.value);\r\n        struct.add(key, type, value);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(ONTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Adds attributes to ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param attributes Array of DDOAttributes\r\n * @param publicKey User's public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildAddAttributeTx(\r\n    ontid: string,\r\n    attributes: DDOAttribute[],\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.addAttributes;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(ontid, attributes.length);\r\n    for (const a of attributes) {\r\n        const key = str2hexstr(a.key);\r\n        const type = str2hexstr(a.type);\r\n        const value = str2hexstr(a.value);\r\n        struct.add(key, type, value);\r\n    }\r\n    struct.list.push(publicKey.serializeHex());\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(ONTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Removes attribute from ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param key Key of attribute to remove\r\n * @param publicKey User's public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n *\r\n */\r\nexport function buildRemoveAttributeTx(\r\n    ontid: string,\r\n    key: string,\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.removeAttribute;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const struct = new Struct();\r\n    struct.add(ontid, str2hexstr(key), publicKey.serializeHex());\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(ONTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Queries attributes attached to ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n */\r\nexport function buildGetAttributesTx(ontid: string) {\r\n    const method = ONTID_METHOD.getAttributes;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const struct = new Struct();\r\n    struct.add(ontid);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Queries Description Object of ONT ID(DDO).\r\n *\r\n * @param ontid User's ONT ID\r\n */\r\nexport function buildGetDDOTx(ontid: string) {\r\n    const method = ONTID_METHOD.getDDO;\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const struct = new Struct();\r\n    struct.add(ontid);\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\r\n    return tx;\r\n}\r\n/**\r\n * Adds a new public key to ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param newPk New public key to be added\r\n * @param userKey User's public key or address\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildAddControlKeyTx(\r\n    ontid: string,\r\n    newPk: PublicKey,\r\n    userKey: PublicKey | Address,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.addKey;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const p1 = ontid;\r\n    const p2 = newPk.serializeHex();\r\n    let p3;\r\n    if (userKey instanceof PublicKey) {\r\n        p3 = userKey.serializeHex();\r\n    } else if (userKey instanceof Address) {\r\n        p3 = userKey.serialize();\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(p1, p2, p3);\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(ONTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Revokes a public key from ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param pk2Remove Public key to be removed\r\n * @param sender User's public key or address\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildRemoveControlKeyTx(\r\n    ontid: string,\r\n    pk2Remove: PublicKey,\r\n    sender: PublicKey | Address,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.removeKey;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const p1 = ontid;\r\n    const p2 = pk2Remove.serializeHex();\r\n    let p3;\r\n    if (sender instanceof PublicKey) {\r\n        p3 = sender.serializeHex();\r\n    } else if (sender instanceof Address) {\r\n        p3 = sender.serialize();\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(p1, p2, p3);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(ONTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Queries public keys attached to ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n */\r\nexport function buildGetPublicKeysTx(ontid: string) {\r\n    const method = ONTID_METHOD.getPublicKeys;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(ontid);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Adds recovery address to ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param recovery Recovery address, must have not be set\r\n * @param publicKey User's public key, must be user's existing public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildAddRecoveryTx(\r\n    ontid: string,\r\n    recovery: Address,\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.addRecovery;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const p1 = ontid;\r\n    const p2 = recovery;\r\n    const p3 = publicKey.serializeHex();\r\n    const struct = new Struct();\r\n    struct.add(p1, p2, p3);\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT), gasPrice, gasLimit, payer);\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Changes recovery address of ONT ID.\r\n *\r\n * This contract call must be initiated by the original recovery address.\r\n *\r\n * @param ontid user's ONT ID\r\n * @param newrecovery New recovery address\r\n * @param oldrecovery Original recoevery address\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildChangeRecoveryTx(\r\n    ontid: string,\r\n    newrecovery: Address,\r\n    oldrecovery: Address,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.changeRecovery;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const p1 = ontid;\r\n    const p2 = newrecovery;\r\n    const p3 = oldrecovery;\r\n    const struct = new Struct();\r\n    struct.add(p1, p2, p3);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT),\r\n    gasPrice, gasLimit);\r\n    tx.payer = payer || oldrecovery;\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Queries the state of the public key associated with ONT ID.\r\n *\r\n * @param ontid user's ONT ID\r\n * @param pkId User's public key Id\r\n */\r\nexport function buildGetPublicKeyStateTx(ontid: string, pkId: number) {\r\n    const method = ONTID_METHOD.getKeyState;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log('did: ' + ontid);\r\n\r\n    const index = num2hexstring(pkId, 4, true);\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log('index: ' + index);\r\n\r\n    const struct = new Struct();\r\n    struct.add(ontid, pkId);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\r\n    return tx;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { BigNumber } from 'bignumber.js';\r\nimport BigInt from '../../common/bigInt';\r\nimport { Address } from '../../crypto/address';\r\nimport { ERROR_CODE } from '../../error';\r\nimport { hex2VarBytes, hexstr2str, num2hexstring, str2VarBytes, StringReader } from '../../utils';\r\n\r\nexport class Transfers {\r\n    static deserialize(sr: StringReader) {\r\n        const t = new Transfers();\r\n        // const version = sr.read(1);\r\n        // t.version = version;\r\n        const states = [];\r\n        const stateLen = sr.readNextLen();\r\n        for (let i = 0; i < stateLen; i++) {\r\n            const state = State.deserialize(sr);\r\n            states.push(state);\r\n        }\r\n        t.states = states;\r\n        return t;\r\n    }\r\n\r\n    // byte\r\n    // version : string\r\n    states: State[] = [];\r\n\r\n    constructor() {\r\n        // this.version = '00';\r\n    }\r\n\r\n    serialize() {\r\n        let result = '';\r\n        // result += this.version\r\n        result += num2hexstring(this.states.length);\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < this.states.length; i++) {\r\n            result += this.states[i].serialize();\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class TokenTransfer {\r\n    static deserialize(sr: StringReader) {\r\n        const tf = new TokenTransfer();\r\n        tf.states = [];\r\n        const contract = sr.read(20);\r\n        tf.contract = contract;\r\n\r\n        const len = sr.readNextLen();\r\n        for (let i = 0; i < len; i++) {\r\n            const state = State.deserialize(sr);\r\n            tf.states.push(state);\r\n        }\r\n        return tf;\r\n    }\r\n\r\n    // 20 bytes\r\n    contract: string;\r\n    states: State[];\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += this.contract;\r\n        const len = num2hexstring(this.states.length);\r\n        result += len;\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0 ; i < this.states.length; i++) {\r\n            result += this.states[i].serialize();\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class State {\r\n    static deserialize(sr: StringReader) {\r\n        // const version = sr.read(1);\r\n        const from = new Address(sr.readNextBytes());\r\n        const to   = new Address(sr.readNextBytes());\r\n        // const value = (new BigNumber(sr.readNextBytes(), 16)).toString();\r\n        // const value = sr.read(8);\r\n        const value = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n\r\n        return new State(from, to, value.toString());\r\n    }\r\n\r\n    // byte\r\n    // version : string\r\n    // 20 bytes address\r\n    from: Address;\r\n    to: Address;\r\n    value: string;\r\n\r\n    constructor(from: Address, to: Address, value: string) {\r\n        const bi = new BigNumber(value);\r\n        if (!bi.isInteger() || bi.isNegative()) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        this.from = from;\r\n        this.to = to;\r\n        this.value = value;\r\n    }\r\n\r\n    serialize() {\r\n        let result = '';\r\n        // result += this.version\r\n        result += hex2VarBytes(this.from.serialize());\r\n        result += hex2VarBytes(this.to.serialize());\r\n        const bi = new BigInt(this.value).toHexstr();\r\n        result += hex2VarBytes(bi);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class Contract {\r\n    static deserialize(sr: StringReader) {\r\n        const c = new Contract();\r\n        const version = sr.read(1);\r\n        const address = Address.deserialize(sr);\r\n        const method = sr.readNextBytes();\r\n        const args = sr.readNextBytes();\r\n        c.version = version;\r\n        c.address = address;\r\n        c.method = hexstr2str(method);\r\n        c.args = args;\r\n        return c;\r\n    }\r\n\r\n    // byte\r\n    version: string;\r\n\r\n    // 20 bytes\r\n    address: Address;\r\n\r\n    method: string;\r\n\r\n    // byte\r\n    args: string;\r\n\r\n    constructor() {\r\n        this.version = '00';\r\n    }\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += this.version;\r\n\r\n        result += this.address.serialize();\r\n\r\n        result += str2VarBytes(this.method);\r\n\r\n        result += hex2VarBytes(this.args);\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class TransferFrom {\r\n    static deserialize(sr: StringReader): TransferFrom {\r\n        // const version = sr.read(1);\r\n        const sender = new Address(sr.readNextBytes());\r\n        const from = new Address(sr.readNextBytes());\r\n        const to = new Address(sr.readNextBytes());\r\n        const value = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const tf = new TransferFrom(sender, from, to, value.toString());\r\n        return tf;\r\n    }\r\n\r\n    // version : string = '00'\r\n\r\n    sender: Address;\r\n\r\n    from: Address;\r\n\r\n    to: Address;\r\n\r\n    value: string;\r\n\r\n    constructor(sender: Address, from: Address, to: Address, value: string) {\r\n        const bi = new BigNumber(value);\r\n        if (!bi.isInteger() || !bi.isNegative()) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        this.sender = sender;\r\n        this.from = from;\r\n        this.to = to;\r\n        this.value = value;\r\n    }\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        // result += this.version\r\n        result += hex2VarBytes(this.sender.serialize());\r\n        result += hex2VarBytes(this.from.serialize());\r\n        result += hex2VarBytes(this.to.serialize());\r\n        const biHex = new BigInt(this.value).toHexstr();\r\n        result += hex2VarBytes(biHex);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { Address  } from '../../crypto';\r\nimport AbiInfo from '../../smartcontract/abi/abiInfo';\r\nimport { Parameter, ParameterType } from '../../smartcontract/abi/parameter';\r\n\r\nimport { makeInvokeTransaction } from '../../transaction/transactionBuilder';\r\nimport { reverseHex, str2hexstr } from '../../utils';\r\nimport { Transaction } from './../../transaction/transaction';\r\n\r\nimport abiJson from '../data/attestClaim';\r\nconst abiInfo = AbiInfo.parseJson(JSON.stringify(abiJson));\r\nconst contractHash = abiInfo.getHash().replace('0x', '');\r\nconst contractAddress = new Address(reverseHex(contractHash));\r\n/* TODO : Test */\r\n\r\n/**\r\n * Attests the claim.\r\n *\r\n * @param claimId Unique id of the claim\r\n * @param issuer Issuer's ONT ID\r\n * @param subject Subject's ONT ID\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer's address\r\n */\r\nexport function buildCommitRecordTx(claimId: string, issuer: string, subject: string,\r\n                                    gasPrice: string, gasLimit: string, payer: Address)  {\r\n    const f = abiInfo.getFunction('Commit');\r\n    if (issuer.substr(0, 3) === 'did') {\r\n        issuer = str2hexstr(issuer);\r\n    }\r\n    if (subject.substr(0, 3) === 'did') {\r\n        subject = str2hexstr(issuer);\r\n    }\r\n    const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, str2hexstr(claimId));\r\n    const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, issuer);\r\n    const p3 = new Parameter(f.parameters[2].getName(), ParameterType.ByteArray, subject);\r\n\r\n    let tx = new Transaction();\r\n    tx = makeInvokeTransaction(f.name, [p1, p2, p3], contractAddress, gasPrice, gasLimit, payer);\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Revokes the claim.\r\n *\r\n * @param claimId Unique id of the claim\r\n * @param revokerOntid Revoker's ONT ID\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer's address\r\n */\r\nexport function buildRevokeRecordTx(claimId: string, revokerOntid: string,\r\n                                    gasPrice: string, gasLimit: string, payer: Address) {\r\n    const f = abiInfo.getFunction('Revoke');\r\n\r\n    const name1 = f.parameters[0].getName();\r\n    const type1 = ParameterType.ByteArray;\r\n\r\n    if (revokerOntid.substr(0, 3) === 'did') {\r\n        revokerOntid = str2hexstr(revokerOntid);\r\n    }\r\n\r\n    const p1 = new Parameter(name1, type1, str2hexstr(claimId));\r\n    const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, revokerOntid);\r\n\r\n    return makeInvokeTransaction(f.name, [p1, p2], contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Queries the state of attest.\r\n *\r\n * @param claimId Unique id of the claim\r\n */\r\nexport function buildGetRecordStatusTx(claimId: string) {\r\n    const f = abiInfo.getFunction('GetStatus');\r\n    const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, str2hexstr(claimId));\r\n    const tx = makeInvokeTransaction(f.name, [p1], contractAddress);\r\n    return tx;\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { str2hexstr } from '../../utils';\r\nimport { Parameter, ParameterType } from '../abi/parameter';\r\nimport { Address } from './../../crypto/address';\r\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\r\n\r\nconst functionNames = {\r\n    Init: 'init',\r\n    Transfer: 'transfer',\r\n    TransferMulti: 'transferMulti',\r\n    Approve: 'approve',\r\n    TransferFromm: 'transferFrom',\r\n    Allowance: 'allowance',\r\n    BalanceOf: 'balanceOf',\r\n    TotalSupply: 'totalSupply',\r\n    Symbol: 'symbol',\r\n    Decimals: 'decimals',\r\n    Name: 'name'\r\n};\r\n\r\nexport class Oep4State  {\r\n    from: string;\r\n    to: string;\r\n    amount: BigNumber;\r\n\r\n    constructor(from: Address, to: Address, amount: string) {\r\n        this.from = from.serialize();\r\n        this.to = to.serialize();\r\n        this.amount = new BigNumber(amount);\r\n    }\r\n}\r\n/**\r\n * Transaction builder for oep-4 contracts\r\n */\r\nexport class Oep4TxBuilder {\r\n\r\n    contractAddr: Address;\r\n\r\n    constructor(contractAddr: Address) {\r\n        this.contractAddr = contractAddr;\r\n    }\r\n\r\n    /**\r\n     * Init the oep-4 smart contract\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer's address to pay for gas\r\n     */\r\n    init(gasPrice: string, gasLimit: string, payer?: Address): Transaction {\r\n        const funcName = functionNames.Init;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Make transaction for transfer\r\n     * @param from Sender's address\r\n     * @param to Receiver's address\r\n     * @param amount Amountof asset to transfer\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer's address to pay for gas\r\n     */\r\n    makeTransferTx(\r\n        from: Address,\r\n        to: Address,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const funcName = functionNames.Transfer;\r\n        const p1 = new Parameter('from', ParameterType.ByteArray, from.serialize());\r\n        const p2 = new Parameter('to', ParameterType.ByteArray, to.serialize());\r\n        const p3 = new Parameter('value', ParameterType.Long, amount);\r\n        return makeInvokeTransaction(funcName, [p1, p2, p3], this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Make transaction for multi transfer.\r\n     * The transaction needs signatures of each sender in states and the signature of the payer.\r\n     * @param states Array of State(sender, receiver, amount)\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer to pay for gas\r\n     */\r\n    makeTransferMultiTx(\r\n        states: Oep4State[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const list = [];\r\n        list.push(str2hexstr(functionNames.TransferMulti));\r\n        const temp = [];\r\n        for (const state of states) {\r\n            temp.push([\r\n                state.from,\r\n                state.to,\r\n                state.amount\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Make transaction for approve\r\n     * @param owner Owner's address\r\n     * @param spender Spender's address\r\n     * @param amount Amount\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer to pay for gas\r\n     */\r\n    makeApproveTx(\r\n        owner: Address,\r\n        spender: Address,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const funcName = functionNames.Approve;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\r\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\r\n            new Parameter('amount', ParameterType.Long, amount)\r\n        ];\r\n        return makeInvokeTransaction(funcName, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferFromTx(\r\n        sender: Address,\r\n        from: Address,\r\n        to: Address,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const funcName = functionNames.TransferFromm;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, sender.serialize()),\r\n            new Parameter('from', ParameterType.ByteArray, from.serialize()),\r\n            new Parameter('to', ParameterType.ByteArray, to.serialize()),\r\n            new Parameter('amount', ParameterType.Long, amount)\r\n        ];\r\n        return makeInvokeTransaction(funcName, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeQueryAllowanceTx(\r\n        owner: Address,\r\n        spender: Address\r\n    ): Transaction {\r\n        const funcName = functionNames.Allowance;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\r\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize())\r\n        ];\r\n        return makeInvokeTransaction(funcName, params, this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the balance\r\n     * @param address Address to query balance\r\n     */\r\n    queryBalanceOf(address: Address): Transaction {\r\n        const funcName = functionNames.BalanceOf;\r\n        const p1 = new Parameter('from', ParameterType.ByteArray, address.serialize());\r\n\r\n        return makeInvokeTransaction(funcName, [p1], this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the total supply of oep-4 contract\r\n     */\r\n    queryTotalSupply(): Transaction {\r\n        const funcName = functionNames.TotalSupply;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the total supply of oep-4 contract\r\n     */\r\n    queryDecimals(): Transaction {\r\n        const funcName = functionNames.Decimals;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the total supply of oep-4 contract\r\n     */\r\n    querySymbol(): Transaction {\r\n        const funcName = functionNames.Symbol;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the total supply of oep-4 contract\r\n     */\r\n    queryName(): Transaction {\r\n        const funcName = functionNames.Name;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { str2hexstr } from '../../utils';\r\nimport { Address } from './../../crypto/address';\r\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\r\nimport { Parameter, ParameterType } from './../abi/parameter';\r\n\r\nexport class Oep5Param {\r\n    public toAcct: string; // hex string\r\n    public tokenId: string; // hex string\r\n\r\n    public constructor(toAcct: Address, tokenId: string ) {\r\n        this.toAcct = toAcct.serialize();\r\n        this.tokenId = tokenId;\r\n    }\r\n}\r\n\r\nconst FunctionNames = {\r\n    Init: 'init',\r\n    Name: 'name',\r\n    Symbol: 'symbol',\r\n    TotalSupply: 'totalSupply',\r\n    BalanceOf: 'balanceOf',\r\n    OwnerOf: 'ownerOf',\r\n    Transfer: 'transfer',\r\n    TransferMulti: 'transferMulti',\r\n    Approve: 'approve',\r\n    ApproveMulti: 'approveMulti',\r\n    TakeOwnership: 'takeOwnership',\r\n    QueryTokenIDByIndex: 'queryTokenIDByIndex',\r\n    QueryTokenByID: 'queryTokenByID',\r\n    GetApproved: 'getApproved',\r\n    CreateMultiTokens: 'createMultiTokens',\r\n    CreateOneToken: 'createOneToken'\r\n};\r\n\r\nexport class Oep5TxBuilder {\r\n    contractAddr: Address;\r\n\r\n    constructor(contractAddr: Address) {\r\n        this.contractAddr = contractAddr;\r\n    }\r\n\r\n    makeInitTx(\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Init;\r\n        return makeInvokeTransaction(func, [], this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeOwnerOfTx(\r\n        tokenId: string\r\n    ): Transaction {\r\n        const func = FunctionNames.OwnerOf;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Transfer the control to someone else\r\n     * @param oep5Param\r\n     * @param gasPrice\r\n     * @param gasLimit\r\n     * @param payer\r\n     */\r\n    makeTransferTx(\r\n        oep5Param: Oep5Param,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Transfer;\r\n        const params = [\r\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\r\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Transfer the control to multi people\r\n     */\r\n    makeTransferMultiTx(\r\n        oep5Params: Oep5Param[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const list = [];\r\n        list.push(str2hexstr(FunctionNames.TransferMulti));\r\n        const temp = [];\r\n        for (const param of oep5Params) {\r\n            temp.push([\r\n                param.toAcct,\r\n                param.tokenId\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Approve the token to toAcct address, it can overwrite older approved address\r\n     * @param oep5Param\r\n     * @param gasPrice\r\n     * @param gasLimit\r\n     * @param payer\r\n     */\r\n    makeApproveTx(\r\n        oep5Param: Oep5Param,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Approve;\r\n        const params = [\r\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\r\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Take the approved token.\r\n     * @param oep5Param\r\n     * @param gasPrice\r\n     * @param gasLimit\r\n     * @param payer\r\n     */\r\n    makeTakeOwnershipTx(\r\n        oep5Param: Oep5Param,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.TakeOwnership;\r\n        const params = [\r\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\r\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeQueryBalanceOfTx(\r\n        addr: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.BalanceOf;\r\n        const params = [\r\n            new Parameter('addr', ParameterType.ByteArray, addr.serialize())\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryTotalSupplyTx(): Transaction {\r\n        const func = FunctionNames.TotalSupply;\r\n        return makeInvokeTransaction(func, [], this.contractAddr);\r\n    }\r\n\r\n    makeQueryTokenIDByIndexTx(\r\n        index: number\r\n    ): Transaction {\r\n        const func = FunctionNames.QueryTokenIDByIndex;\r\n        const params = [\r\n            new Parameter('index', ParameterType.Long, index)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryTokenByIDTx(\r\n        tokenId: string\r\n    ): Transaction {\r\n        const func = FunctionNames.QueryTokenByID;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeGetApprovedTx(\r\n        tokenId: string\r\n    ): Transaction {\r\n        const func = FunctionNames.GetApproved;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryNameTx(): Transaction {\r\n        const func = FunctionNames.Name;\r\n        return makeInvokeTransaction(func, [], this.contractAddr);\r\n    }\r\n\r\n    makeQuerySymbolTx(): Transaction {\r\n        const func = FunctionNames.Symbol;\r\n        return makeInvokeTransaction(func, [], this.contractAddr);\r\n    }\r\n\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { str2hexstr } from '../../utils';\r\nimport { Address } from './../../crypto/address';\r\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\r\nimport { num2hexstring } from './../../utils';\r\nimport { Parameter, ParameterType } from './../abi/parameter';\r\n\r\nexport class Oep8State {\r\n    public from: string;\r\n    public to: string;\r\n    public tokenId: string;\r\n    public value: BigNumber;\r\n\r\n    public constructor(from: Address, to: Address, tokenId: number, value: string) {\r\n        this.from = from.serialize();\r\n        this.to = to.serialize();\r\n        this.tokenId = num2hexstring(tokenId);\r\n        this.value = new BigNumber(value);\r\n    }\r\n}\r\n\r\nexport class TransferFrom {\r\n    spender: string;\r\n    from: string;\r\n    to: string;\r\n    tokenId: string;\r\n    value: BigNumber;\r\n    constructor(spender: Address, from: Address, to: Address, tokenId: number, value: string) {\r\n        this.spender = spender.serialize();\r\n        this.from = from.serialize();\r\n        this.to = to.serialize();\r\n        this.tokenId = num2hexstring(tokenId);\r\n        this.value = new BigNumber(value);\r\n    }\r\n}\r\n\r\nconst FunctionNames = {\r\n    Name: 'name',\r\n    Symbol: 'symbol',\r\n    TotalSupply: 'totalSupply',\r\n    BalanceOf: 'balanceOf',\r\n    Transfer: 'transfer',\r\n    TransferMulti: 'transferMulti',\r\n    Approve: 'approve',\r\n    ApproveMulti: 'approveMulti',\r\n    Allowance: 'allowance',\r\n    TransferFrom: 'transferFrom',\r\n    TransferFromMulti: 'transferFromMulti',\r\n    Compound: 'compound',\r\n    Concatkey: 'concatkey',\r\n    Init: 'init',\r\n    CreateMultiKindsPumpkin: 'createMultiKindsPumpkin',\r\n    CheckTokenPrefix: 'checkTokenPrefix',\r\n    BalancesOf: 'balancesOf',\r\n    TotalBalanceOf: 'totalBalanceOf',\r\n    CheckTokenId: 'checkTokenId'\r\n};\r\n\r\nexport class Oep8TxBuilder {\r\n    contractAddr: Address;\r\n\r\n    constructor(contractAddr: Address) {\r\n        this.contractAddr = contractAddr;\r\n    }\r\n\r\n    makeInitTx(\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Init;\r\n        return makeInvokeTransaction(func, [], this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferTx(\r\n        sendAddr: Address,\r\n        recvAddr: Address,\r\n        tokenId: number,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Transfer;\r\n        const params = [\r\n            new Parameter('sender', ParameterType.ByteArray, sendAddr.serialize()),\r\n            new Parameter('recv', ParameterType.ByteArray, recvAddr.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId),\r\n            new Parameter('amount', ParameterType.Long, amount)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferMultiTx(\r\n        states: Oep8State[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const list = [];\r\n        list.push(str2hexstr(FunctionNames.TransferMulti));\r\n        const temp = [];\r\n        for (const state of states) {\r\n            temp.push([\r\n                state.from,\r\n                state.to,\r\n                state.tokenId,\r\n                state.value\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeApproveTx(\r\n        owner: Address,\r\n        spender: Address,\r\n        tokenId: number,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Approve;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\r\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId)),\r\n            new Parameter('amount', ParameterType.Long, amount)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeApproveMulti(\r\n        states: Oep8State[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.ApproveMulti;\r\n        const list = [];\r\n        list.push(str2hexstr(func));\r\n        const temp = [];\r\n        for (const state of states) {\r\n            temp.push([\r\n                state.from,\r\n                state.to,\r\n                state.tokenId,\r\n                state.value\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferFromMulti(\r\n        states: TransferFrom[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.TransferFromMulti;\r\n        const list = [];\r\n        list.push(str2hexstr(func));\r\n        const temp = [];\r\n        for (const state of states) {\r\n            temp.push([\r\n                state.spender,\r\n                state.from,\r\n                state.to,\r\n                state.tokenId,\r\n                state.value\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferFromTx(\r\n        sender: Address,\r\n        from: Address,\r\n        to: Address,\r\n        tokenId: number,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.TransferFrom;\r\n        const params = [\r\n            new Parameter('sender', ParameterType.ByteArray, sender.serialize()),\r\n            new Parameter('from', ParameterType.ByteArray, from.serialize()),\r\n            new Parameter('to', ParameterType.ByteArray, to.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId)),\r\n            new Parameter('amount', ParameterType.Long, amount)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Compound tokens\r\n     * @param account User's address\r\n     * @param compoundNum 0 - compound all tokens that can be compounded; 1 - compound 1 token of each type.\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer to pay for gas\r\n     */\r\n    makeCompoundTx(\r\n        account: Address,\r\n        compoundNum: number,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Compound;\r\n        const params = [\r\n            new Parameter('account', ParameterType.ByteArray, account.serialize()),\r\n            new Parameter('compoundNum', ParameterType.Integer, compoundNum)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeQueryAllowanceTx(\r\n        owner: Address,\r\n        spender: Address,\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.Allowance;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\r\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryBalanceOfTx(\r\n        addr: Address,\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.BalanceOf;\r\n        const params = [\r\n            new Parameter('addr', ParameterType.ByteArray, addr.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryTotalSupplyTx(\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.TotalSupply;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryNameTx(\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.Name;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryDecimalsTx(): Transaction {\r\n        const func = FunctionNames.Symbol;\r\n        return makeInvokeTransaction(func, [], this.contractAddr);\r\n    }\r\n\r\n    makeQuerySymbolTx(\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.Symbol;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryBalancesTx(\r\n        account: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.BalancesOf;\r\n        const params = [\r\n            new Parameter('account', ParameterType.ByteArray, account.serialize())\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryTotalBalanceTx(\r\n        account: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.TotalBalanceOf;\r\n        const params = [\r\n            new Parameter('account', ParameterType.ByteArray, account.serialize())\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { PublicKey } from '../crypto';\r\nimport { hexstr2str, str2VarBytes, StringReader } from '../utils';\r\n\r\n/**\r\n * Public key representation with recorded id from blockchain.\r\n *\r\n */\r\nexport class PublicKeyWithId {\r\n    /**\r\n     * Deserialize from hex string to PublicKeyWithId\r\n     * @param hexstr\r\n     */\r\n    static deserialize(hexstr: string): PublicKeyWithId[] {\r\n        const sr = new StringReader(hexstr);\r\n\r\n        const result: PublicKeyWithId[] = [];\r\n        while (!sr.isEmpty()) {\r\n            const index = sr.readUint32();\r\n            const data = sr.readNextBytes();\r\n            const p = new PublicKeyWithId();\r\n            p.id = index;\r\n            p.pk = PublicKey.deserializeHex(new StringReader(data));\r\n            result.push(p);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Id of the public key.\r\n     *\r\n     * Only numeric part is recorded. Full PublicKeyId will be constucted as follows:\r\n     * <ONTID>#keys-<id>\r\n     */\r\n    id: number;\r\n    pk: PublicKey;\r\n}\r\n\r\n/**\r\n * Description attribute of ONT ID\r\n */\r\nexport class DDOAttribute {\r\n    static deserialize(hexstr: string) {\r\n        const sr = new StringReader(hexstr);\r\n\r\n        const result: DDOAttribute[] = [];\r\n        while (!sr.isEmpty()) {\r\n            const key = hexstr2str(sr.readNextBytes());\r\n            const type = hexstr2str(sr.readNextBytes());\r\n            const value = hexstr2str(sr.readNextBytes());\r\n            const d = new DDOAttribute();\r\n            d.key = key;\r\n            d.type = type;\r\n            d.value = value;\r\n            result.push(d);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Key of the attribute\r\n     */\r\n    key: string;\r\n    /**\r\n     * Type of the attribute\r\n     */\r\n    type: string;\r\n    /**\r\n     * Value of the attribute\r\n     */\r\n    value: string;\r\n\r\n    /**\r\n     * Serialize DDO to hex string\r\n     */\r\n    serialize(): string {\r\n        let result = '';\r\n        result += str2VarBytes(this.key);\r\n        result += str2VarBytes(this.type);\r\n        result += str2VarBytes(this.value);\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Description object of ONT ID\r\n */\r\nexport class DDO {\r\n    /**\r\n     * Deserialize from hex string to DDO\r\n     * @param hexstr Hex encoded string\r\n     */\r\n    static deserialize(hexstr: string): DDO {\r\n        const ss = new StringReader(hexstr);\r\n\r\n        const ddo = new DDO();\r\n        const pkLen = ss.readNextLen();\r\n\r\n        if (pkLen > 0) {\r\n            ddo.publicKeys = PublicKeyWithId.deserialize(ss.read(pkLen));\r\n        }\r\n\r\n        const attrLen = ss.readNextLen();\r\n        if (attrLen > 0) {\r\n            ddo.attributes = DDOAttribute.deserialize(ss.read(attrLen));\r\n        }\r\n\r\n        const recoveryLen = ss.readNextLen();\r\n        if (recoveryLen > 0) {\r\n            ddo.recovery = ss.read(recoveryLen);\r\n        }\r\n        return ddo;\r\n    }\r\n\r\n    /**\r\n     * Array of public keys\r\n     */\r\n    publicKeys: PublicKeyWithId[] = [];\r\n    /**\r\n     * Array of attributes\r\n     */\r\n    attributes: DDOAttribute[] = [];\r\n    /**\r\n     * Recovery of DDO\r\n     */\r\n    recovery: string = '';\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nenum OPCODE {\r\n    // Constants\r\n    PUSH0 = 0x00, // An empty array of bytes is pushed onto the stack.\r\n    PUSHF = PUSH0,\r\n    PUSHBYTES1 = 0x01, // 0x01-0x4B The next bytes is data to be pushed onto the stack\r\n    PUSHBYTES75 = 0x4B,\r\n    PUSHDATA1 = 0x4C, // The next byte contains the number of bytes to be pushed onto the stack.\r\n    PUSHDATA2 = 0x4D, // The next two bytes contain the number of bytes to be pushed onto the stack.\r\n    PUSHDATA4 = 0x4E, // The next four bytes contain the number of bytes to be pushed onto the stack.\r\n    PUSHM1 = 0x4F, // The number -1 is pushed onto the stack.\r\n    PUSH1 = 0x51, // The number 1 is pushed onto the stack.\r\n    PUSHT = PUSH1,\r\n    PUSH2 = 0x52, // The number 2 is pushed onto the stack.\r\n    PUSH3 = 0x53, // The number 3 is pushed onto the stack.\r\n    PUSH4 = 0x54, // The number 4 is pushed onto the stack.\r\n    PUSH5 = 0x55, // The number 5 is pushed onto the stack.\r\n    PUSH6 = 0x56, // The number 6 is pushed onto the stack.\r\n    PUSH7 = 0x57, // The number 7 is pushed onto the stack.\r\n    PUSH8 = 0x58, // The number 8 is pushed onto the stack.\r\n    PUSH9 = 0x59, // The number 9 is pushed onto the stack.\r\n    PUSH10 = 0x5A, // The number 10 is pushed onto the stack.\r\n    PUSH11 = 0x5B, // The number 11 is pushed onto the stack.\r\n    PUSH12 = 0x5C, // The number 12 is pushed onto the stack.\r\n    PUSH13 = 0x5D, // The number 13 is pushed onto the stack.\r\n    PUSH14 = 0x5E, // The number 14 is pushed onto the stack.\r\n    PUSH15 = 0x5F, // The number 15 is pushed onto the stack.\r\n    PUSH16 = 0x60, // The number 16 is pushed onto the stack.\r\n\r\n    // Flow control\r\n    NOP = 0x61, // Does nothing.\r\n    JMP = 0x62,\r\n    JMPIF = 0x63,\r\n    JMPIFNOT = 0x64,\r\n    CALL = 0x65,\r\n    RET = 0x66,\r\n    APPCALL = 0x67,\r\n    SYSCALL = 0x68,\r\n    TAILCALL = 0x69,\r\n    DUPFROMALTSTACK = 0x6A,\r\n\r\n    // Stack\r\n    TOALTSTACK = 0x6B, // Puts the input onto the top of the alt stack. Removes it from the main stack.\r\n    FROMALTSTACK = 0x6C, // Puts the input onto the top of the main stack. Removes it from the alt stack.\r\n    XDROP = 0x6D,\r\n    XSWAP = 0x72,\r\n    XTUCK = 0x73,\r\n    DEPTH = 0x74, // Puts the number of stack items onto the stack.\r\n    DROP = 0x75, // Removes the top stack item.\r\n    DUP = 0x76, // Duplicates the top stack item.\r\n    NIP = 0x77, // Removes the second-to-top stack item.\r\n    OVER = 0x78, // Copies the second-to-top stack item to the top.\r\n    PICK = 0x79, // The item n back in the stack is copied to the top.\r\n    ROLL = 0x7A, // The item n back in the stack is moved to the top.\r\n    ROT = 0x7B, // The top three items on the stack are rotated to the left.\r\n    SWAP = 0x7C, // The top two items on the stack are swapped.\r\n    TUCK = 0x7D, // The item at the top of the stack is copied and inserted before the second-to-top item.\r\n\r\n    // Splice\r\n    CAT = 0x7E, // Concatenates two strings.\r\n    SUBSTR = 0x7F, // Returns a section of a string.\r\n    LEFT = 0x80, // Keeps only characters left of the specified point in a string.\r\n    RIGHT = 0x81, // Keeps only characters right of the specified point in a string.\r\n    SIZE = 0x82, // Returns the length of the input string.\r\n\r\n    // Bitwise logic\r\n    INVERT = 0x83, // Flips all of the bits in the input.\r\n    AND = 0x84, // Boolean and between each bit in the inputs.\r\n    OR = 0x85, // Boolean or between each bit in the inputs.\r\n    XOR = 0x86, // Boolean exclusive or between each bit in the inputs.\r\n    EQUAL = 0x87, // Returns 1 if the inputs are exactly equal, 0 otherwise.\r\n    // EQUALVERIFY = 0x88, // Same as EQUAL, but runs VERIFY afterward.\r\n    // RESERVED1 = 0x89, // Transaction is invalid unless occuring in an unexecuted IF branch\r\n    // RESERVED2 = 0x8A, // Transaction is invalid unless occuring in an unexecuted IF branch\r\n\r\n    // Arithmetic\r\n    // Note: Arithmetic inputs are limited to signed 32-bit integers, but may overflow their output.\r\n    INC = 0x8B, // 1 is added to the input.\r\n    DEC = 0x8C, // 1 is subtracted from the input.\r\n    // SAL           = 0x8D, // The input is multiplied by 2.\r\n    // SAR           = 0x8E, // The input is divided by 2.\r\n    NEGATE = 0x8F, // The sign of the input is flipped.\r\n    ABS = 0x90, // The input is made positive.\r\n    NOT = 0x91, // If the input is 0 or 1, it is flipped. Otherwise the output will be 0.\r\n    NZ = 0x92, // Returns 0 if the input is 0. 1 otherwise.\r\n    ADD = 0x93, // a is added to b.\r\n    SUB = 0x94, // b is subtracted from a.\r\n    MUL = 0x95, // a is multiplied by b.\r\n    DIV = 0x96, // a is divided by b.\r\n    MOD = 0x97, // Returns the remainder after dividing a by b.\r\n    SHL = 0x98, // Shifts a left b bits, preserving sign.\r\n    SHR = 0x99, // Shifts a right b bits, preserving sign.\r\n    BOOLAND = 0x9A, // If both a and b are not 0, the output is 1. Otherwise 0.\r\n    BOOLOR = 0x9B, // If a or b is not 0, the output is 1. Otherwise 0.\r\n    NUMEQUAL = 0x9C, // Returns 1 if the numbers are equal, 0 otherwise.\r\n    NUMNOTEQUAL = 0x9E, // Returns 1 if the numbers are not equal, 0 otherwise.\r\n    LT = 0x9F, // Returns 1 if a is less than b, 0 otherwise.\r\n    GT = 0xA0, // Returns 1 if a is greater than b, 0 otherwise.\r\n    LTE = 0xA1, // Returns 1 if a is less than or equal to b, 0 otherwise.\r\n    GTE = 0xA2, // Returns 1 if a is greater than or equal to b, 0 otherwise.\r\n    MIN = 0xA3, // Returns the smaller of a and b.\r\n    MAX = 0xA4, // Returns the larger of a and b.\r\n    WITHIN = 0xA5, // Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.\r\n\r\n    // Crypto\r\n    // RIPEMD160 = 0xA6, // The input is hashed using RIPEMD-160.\r\n    SHA1 = 0xA7, // The input is hashed using SHA-1.\r\n    SHA256 = 0xA8, // The input is hashed using SHA-256.\r\n    HASH160 = 0xA9,\r\n    HASH256 = 0xAA,\r\n    // tslint:disable-next-line:max-line-length\r\n    CHECKSIG = 0xAC, // The entire transaction's outputs inputs and script (from the most recently-executed CODESEPARATOR to the end) are hashed. The signature used by CHECKSIG must be a valid signature for this hash and public key. If it is 1 is returned 0 otherwise.\r\n    // tslint:disable-next-line:max-line-length\r\n    CHECKMULTISIG = 0xAE, // For each signature and public key pair CHECKSIG is executed. If more public keys than signatures are listed some key/sig pairs can fail. All signatures need to match a public key. If all signatures are valid 1 is returned 0 otherwise. Due to a bug one extra unused value is removed from the stack.\r\n\r\n    // Array\r\n\t// tslint:disable:indent\r\n    ARRAYSIZE  = 0xC0,\r\n\tPACK       = 0xC1,\r\n\tUNPACK     = 0xC2,\r\n\tPICKITEM   = 0xC3,\r\n\tSETITEM    = 0xC4,\r\n\tNEWARRAY   = 0xC5,\r\n\tNEWSTRUCT  = 0xC6,\r\n\tNEWMAP     = 0xC7,\r\n\tAPPEND     = 0xC8,\r\n\tREVERSE    = 0xC9,\r\n\tREMOVE     = 0xCA,\r\n\tHASKEY     = 0xCB,\r\n\tKEYS       = 0xCC,\r\n\tVALUES     = 0xCD,\r\n\r\n\t// Exception\r\n\tTHROW = 0xF0,\r\n\tTHROWIFNOT = 0xF1\r\n}\r\n\r\nexport default OPCODE;\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport {\r\n    bool2VarByte,\r\n    hex2VarBytes,\r\n    hexstr2str,\r\n    str2VarBytes,\r\n    StringReader\r\n} from '../../utils';\r\nimport Payload from './payload';\r\n\r\n/**\r\n * Describes the payload of deploy code\r\n */\r\nexport default class DeployCode extends Payload {\r\n    /**\r\n     * Hex encoded contract content\r\n     */\r\n    code: string;\r\n\r\n    /**\r\n     * Decides if the contract need storage\r\n     */\r\n    needStorage: boolean;\r\n    /**\r\n     * Name of the smart contract\r\n     */\r\n    name: string;\r\n    /**\r\n     * Version of the contract\r\n     */\r\n    version: string;\r\n    /**\r\n     * Author of the contract\r\n     */\r\n    author: string;\r\n    /**\r\n     * Email of the author\r\n     */\r\n    email: string;\r\n    /**\r\n     * Description of the contract\r\n     */\r\n    description: string;\r\n\r\n    /**\r\n     * Serialize deploy code to hex string\r\n     */\r\n    serialize(): string {\r\n        let result = '';\r\n\r\n        // result += this.code.serialize();\r\n        result += hex2VarBytes(this.code);\r\n\r\n        result += bool2VarByte(this.needStorage);\r\n\r\n        result += str2VarBytes(this.name);\r\n\r\n        result += str2VarBytes(this.version);\r\n\r\n        result += str2VarBytes(this.author);\r\n\r\n        result += str2VarBytes(this.email);\r\n\r\n        result += str2VarBytes(this.description);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Deserialize deploy code\r\n     * @param sr\r\n     */\r\n    deserialize(sr: StringReader): void {\r\n\r\n        // const code = VmCode.deserialize(sr);\r\n        const code = sr.readNextBytes();\r\n        this.code = code;\r\n\r\n        const boolValue = sr.read(1);\r\n        this.needStorage = boolValue === '00' ? false : true;\r\n\r\n        const name = sr.readNextBytes();\r\n        this.name = hexstr2str(name);\r\n\r\n        const codeVersion = sr.readNextBytes();\r\n        this.version = hexstr2str(codeVersion);\r\n\r\n        const author = sr.readNextBytes();\r\n        this.author = hexstr2str(author);\r\n\r\n        const email = sr.readNextBytes();\r\n        this.email = hexstr2str(email);\r\n\r\n        const description = sr.readNextBytes();\r\n        this.description = hexstr2str(description);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { hex2VarBytes, StringReader } from '../../utils';\r\nimport Payload from './payload';\r\n\r\nexport default class InvokeCode extends Payload {\r\n    // the length is of bytes 20\r\n    /*\r\n    scriptHash : string\r\n    parameters : Array<Parameter> = []\r\n    functionName : string\r\n     */\r\n\r\n    /**\r\n     * Hex encoed string\r\n     */\r\n    code: string;\r\n\r\n    constructor() {\r\n        super();\r\n        // this.gasLimit = new Fixed64()\r\n    }\r\n\r\n/*     serialize() : string {\r\n        let payloadLength\r\n        let paramsLength = num2hexstring( 0x50 + this.parameters.length) //start from '0x50'\r\n        const paramsEnd = 'c1'\r\n        let funcNameHex = str2hexstr(this.functionName)\r\n        const funcNameLength = num2hexstring(funcNameHex.length/2)\r\n\r\n        let params = []\r\n        for(let i = this.parameters.length-1; i > -1; i--) {\r\n            let p = this.parameters[i]\r\n            let hexP = p.getValue()\r\n            let hexPLength = num2VarInt( hexP.length / 2)\r\n            let opcode = ''\r\n            if( hexP.length/2 < OPCODE.PUSHBYTES75) {\r\n\r\n            } else if (hexP.length / 2 < 0x100) {\r\n                opcode = num2VarInt( OPCODE.PUSHDATA1 )\r\n            } else if( hexP.length/2 < 0x1000 ) {\r\n                opcode = num2hexstring( OPCODE.PUSHDATA2, 2, true)\r\n            } else {\r\n                opcode = num2hexstring( OPCODE.PUSHDATA4, 4, true)\r\n            }\r\n            params.push ({\r\n                hexPLength,\r\n                hexP,\r\n                opcode\r\n            })\r\n        }\r\n\r\n        let result = ''\r\n        //scripthash\r\n        // result += this.scriptHash\r\n        //params\r\n        for(let v of params) {\r\n            if(v.opcode) {\r\n                result += v.opcode\r\n            }\r\n            result += v.hexPLength\r\n            result += v.hexP\r\n        }\r\n        result += paramsLength\r\n        //end\r\n        result += paramsEnd\r\n        //function\r\n        result += funcNameLength\r\n        result += funcNameHex\r\n        let totalParamsLength = num2VarInt(result.length / 2)\r\n        //result = this.scriptHash + totalParamsLength + result\r\n\r\n        console.log('invode serialze: '+ result)\r\n\r\n        return result\r\n    }  */\r\n\r\n    serialize() {\r\n        let result = '';\r\n        // if(this.gasLimit) {\r\n        //     result += this.gasLimit.serialize()\r\n        // }\r\n        // result += this.code.serialize();\r\n        result += hex2VarBytes(this.code);\r\n        return result;\r\n    }\r\n\r\n    /* deserialize(ss : StringReader) : void {\r\n        //scriptHash, fixed langth\r\n        this.scriptHash = ss.read(20)\r\n        //payload total lenght\r\n        const payloadLen = ss.readNextLen()\r\n\r\n        //read params start\r\n        let params = []\r\n        let nextByte = ss.readNextLen()\r\n        //params's length start from 0x50\r\n        while(nextByte < 0x50) {\r\n            let p = ss.read(nextByte)\r\n            params.push(p)\r\n            nextByte = ss.readNextLen()\r\n        }\r\n        //params end\r\n        let end = ss.read(1)\r\n        console.log('end :' + end)\r\n        if(end === 'c1') {\r\n            for(let i=0; i< params.length; i++) {\r\n                //TODO can only get value\r\n                this.parameters.push(new Parameter('','',params[i]))\r\n            }\r\n        }\r\n        //function name\r\n        let funNameLen = ss.readNextLen()\r\n        let func = ss.read(funNameLen)\r\n        func = hexstr2str(func)\r\n        //payload end\r\n        this.functionName = func\r\n\r\n    }  */\r\n\r\n    deserialize(sr: StringReader) {\r\n        // let gasLimit = Fixed64.deserialize(sr);\r\n        // const code = VmCode.deserialize(sr);\r\n        const code = sr.readNextBytes();\r\n        // this.gasLimit = gasLimit;\r\n        this.code = code;\r\n        return this;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nexport default abstract class Payload {\r\n    abstract serialize(): string;\r\n\r\n    // static can not use with abstract\r\n    abstract deserialize(ss: any): void;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as elliptic from 'elliptic';\r\nimport { sm2 } from 'sm.js';\r\nimport BigInt from '../common/bigInt';\r\nimport { KeyType } from '../crypto/KeyType';\r\nimport { PublicKey } from '../crypto/PublicKey';\r\nimport { ERROR_CODE } from '../error';\r\nimport { num2hexstring, StringReader } from './../utils';\r\nimport opcode from './opcode';\r\n// The sorting rules is as follows:\r\n//    1. if keys have different types, then sorted by the KeyType value.\r\n//    2. else,\r\n//       2.1. ECDSA or SM2:\r\n//           2.1.1. if on different curves, then sorted by the curve label.\r\n//           2.1.2. else if x values are different, then sorted by x.\r\n//           2.1.3. else sorted by y.\r\n//       2.2. EdDSA: sorted by the byte sequence directly.\r\nexport function comparePublicKeys(a: PublicKey, b: PublicKey) {\r\n    if (a.algorithm !== b.algorithm) {\r\n        return a.algorithm.hex - b.algorithm.hex;\r\n    }\r\n    switch (a.algorithm) {\r\n    case KeyType.ECDSA:\r\n        const ec = new elliptic.ec(a.parameters.curve.preset);\r\n        const paKey = ec.keyFromPublic(a.key, 'hex', true);\r\n        const pbKey = ec.keyFromPublic(b.key, 'hex', true);\r\n        const pa = paKey.getPublic();\r\n        const pb = pbKey.getPublic();\r\n        if (pa.getX() !== pb.getX()) {\r\n            return pa.getX() - pb.getX();\r\n        } else {\r\n            return pa.getY() - pb.getY();\r\n        }\r\n    case KeyType.SM2:\r\n        const pka = new sm2.SM2KeyPair();\r\n        const pkb = new sm2.SM2KeyPair();\r\n        pka._pubFromString(a.key);\r\n        pkb._pubFromString(b.key);\r\n        if (pka.getX().toString() !== pkb.getX().toString()) {\r\n            return Number(pka.getX().toString()) - Number(pkb.getX().toString());\r\n        } else {\r\n            return Number(pka.getY().toString()) - Number(pkb.getY().toString());\r\n        }\r\n    case KeyType.EDDSA:\r\n        return Number(a.key) - Number(b.key);\r\n    default:\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function pushOpCode(op: opcode): string {\r\n    return num2hexstring(op);\r\n}\r\n\r\nexport function pushPubKey(pk: PublicKey): string {\r\n    const pkStr = pk.serializeHex();\r\n    return pushBytes(pkStr);\r\n}\r\n\r\nexport function pushBigInt(num: number): string {\r\n    if (num === -1) {\r\n        return num2hexstring(opcode.PUSHM1);\r\n    }\r\n    if (num === 0) {\r\n        return num2hexstring(opcode.PUSH0);\r\n    }\r\n    if (num > 0 && num <= 16) {\r\n        return num2hexstring(opcode.PUSH1 - 1 + num);\r\n    }\r\n    return num2hexstring(num, 8, true);\r\n}\r\n\r\nexport function pushNum(num: number): string {\r\n    if ( num === 0 ) {\r\n        return pushOpCode(opcode.PUSH0);\r\n    } else if ( num <= 16 ) {\r\n        return num2hexstring(num - 1 + opcode.PUSH1);\r\n    }\r\n    const bint = new BigInt(num.toString());\r\n    return pushBytes(bint.toHexstr());\r\n}\r\n\r\nexport function pushBytes(hexstr: string): string {\r\n    let result = '';\r\n    if (hexstr.length === 0) {\r\n        throw new Error('pushBytes error, hexstr is empty.');\r\n    }\r\n    const len = hexstr.length / 2;\r\n    if (len <= opcode.PUSHBYTES75 + 1 - opcode.PUSHBYTES1 ) {\r\n        result += num2hexstring(len + opcode.PUSHBYTES1 - 1);\r\n    } else if (len < 0x100) {\r\n        result += num2hexstring(opcode.PUSHDATA1);\r\n        result += num2hexstring(len);\r\n    } else if (len < 0x10000) {\r\n        result += num2hexstring(opcode.PUSHDATA2);\r\n        result += num2hexstring(len, 2, true);\r\n    } else if (len < 0x100000000) {\r\n        result += num2hexstring(opcode.PUSHDATA4);\r\n        result += num2hexstring(len, 4, true);\r\n    } else {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    result += hexstr;\r\n    return result;\r\n}\r\n\r\nexport function programFromPubKey(pk: PublicKey): string {\r\n    let result = '';\r\n    result += pushPubKey(pk);\r\n    result += pushOpCode(opcode.CHECKSIG);\r\n    return result;\r\n}\r\n\r\nexport function programFromMultiPubKey(pubkeys: PublicKey[], m: number): string {\r\n    const n = pubkeys.length;\r\n    if (!(1 <= m && m <= n && n <= 1024)) {\r\n        throw new Error('Wrong multi-sig param');\r\n    }\r\n    // const pkStrList = pubkeys.map( (p) => p.serializeHex());\r\n    // pkStrList.sort();\r\n\r\n    pubkeys.sort(comparePublicKeys);\r\n\r\n    let result = '';\r\n    result += pushNum(m);\r\n\r\n    for (const pk of pubkeys) {\r\n        result += pushBytes(pk.serializeHex());\r\n    }\r\n    result += pushNum(n);\r\n    result += pushOpCode(opcode.CHECKMULTISIG);\r\n    return result;\r\n}\r\n\r\nexport function programFromParams(sigs: string[]): string {\r\n    let result = '';\r\n    sigs.sort();\r\n    for ( const s of sigs) {\r\n        result += pushBytes(s);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function readOpcode(sr: StringReader) {\r\n    return parseInt(sr.read(1), 16);\r\n}\r\n\r\nexport function readNum(sr: StringReader) {\r\n    let code;\r\n    try {\r\n        code = readOpcode(sr);\r\n    } catch (err) {\r\n        return 0;\r\n    }\r\n    let num = code - opcode.PUSH1 + 1;\r\n    if (code === opcode.PUSH0) {\r\n        readOpcode(sr);\r\n        return 0;\r\n    } else if (1 <= num && num <= 16) {\r\n        readOpcode(sr);\r\n        return num;\r\n    }\r\n    const bint = BigInt.fromHexstr(sr.readNextBytes());\r\n    num = parseInt(bint.value.toString(), 10);\r\n    return num;\r\n}\r\n\r\nexport function readBytes(sr: StringReader) {\r\n    const code = readOpcode(sr);\r\n    let keylen;\r\n    if (code === opcode.PUSHDATA4) {\r\n        keylen = sr.readUint32();\r\n    } else if (code === opcode.PUSHDATA2) {\r\n        keylen = sr.readUint16();\r\n    } else if (code === opcode.PUSHDATA1) {\r\n        keylen = sr.readUint8();\r\n    } else if (code <= opcode.PUSHBYTES75 && code >= opcode.PUSHBYTES1) {\r\n        keylen = code - opcode.PUSHBYTES1 + 1;\r\n    } else {\r\n        throw new Error('unexpected opcode: ' + code);\r\n    }\r\n    return sr.read(keylen);\r\n}\r\n\r\nexport function readPubKey(sr: StringReader) {\r\n    const pkStr = sr.readNextBytes();\r\n    return PublicKey.deserializeHex(new StringReader(pkStr));\r\n}\r\n\r\nexport function getParamsFromProgram(hexstr: string): string[] {\r\n    const sigs = [];\r\n    const sr = new StringReader(hexstr);\r\n    while (!sr.isEmpty()) {\r\n        sigs.push(readBytes(sr));\r\n    }\r\n    return sigs;\r\n}\r\n\r\nexport class ProgramInfo {\r\n    M: number;\r\n    pubKeys: PublicKey[];\r\n}\r\nexport function getProgramInfo(hexstr: string): ProgramInfo {\r\n    const info = new ProgramInfo();\r\n    const end = parseInt(hexstr.substr(-2, 2), 16);\r\n    if (end === opcode.CHECKSIG) {\r\n        const sr = new StringReader(hexstr);\r\n        const pk = readPubKey(sr);\r\n        info.M = 1;\r\n        info.pubKeys = [pk];\r\n        return info;\r\n    } else if (end === opcode.CHECKMULTISIG) {\r\n        const sr = new StringReader(hexstr);\r\n        const m = parseInt(sr.read(1), 16) - opcode.PUSH1 + 1;\r\n        const n = parseInt(hexstr.substr(-4, 2), 16) - opcode.PUSH1 + 1;\r\n        info.M = m;\r\n        info.pubKeys = [];\r\n        for (let i = 0; i < n; i++) {\r\n            const key = readPubKey(sr);\r\n            info.pubKeys.push(key);\r\n        }\r\n        // const n = readNum(sr);\r\n        return info;\r\n    } else {\r\n        throw new Error('Unsupported program.');\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport BigInt from '../common/bigInt';\r\nimport { ERROR_CODE } from '../error';\r\nimport AbiFunction from '../smartcontract/abi/abiFunction';\r\nimport { Parameter, ParameterType, ParameterTypeVal } from '../smartcontract/abi/parameter';\r\nimport Struct from '../smartcontract/abi/struct';\r\nimport { bigIntFromBytes, hexstr2str, num2hexstring, num2VarInt, str2hexstr, StringReader } from '../utils';\r\nimport opcode from './opcode';\r\n\r\nexport const pushBool = (param: boolean) => {\r\n    let result = '';\r\n    if (param) {\r\n        result += num2hexstring(opcode.PUSHT);\r\n    } else {\r\n        result += num2hexstring(opcode.PUSHF);\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const pushInt = (param: number) => {\r\n    let result = '';\r\n    if (param === -1) {\r\n        result = num2hexstring(opcode.PUSHM1);\r\n    } else if (param === 0) {\r\n        result = num2hexstring(opcode.PUSH0);\r\n    } else if (param > 0 && param < 16) {\r\n        const num = opcode.PUSH1 - 1 + param;\r\n        result = num2hexstring(num);\r\n    } else {\r\n        const biHex = new BigInt(param.toString()).toHexstr();\r\n        result = pushHexString(biHex);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const pushBigNum = (param: BigNumber) => {\r\n    let result = '';\r\n    if (param.isEqualTo(-1)) {\r\n        result = num2hexstring(opcode.PUSHM1);\r\n    } else if (param.isEqualTo(0)) {\r\n        result = num2hexstring(opcode.PUSH0);\r\n    } else if (param.isGreaterThan(0) && param.isLessThan(16)) {\r\n        const num = opcode.PUSH1 - 1 + param.toNumber();\r\n        result = num2hexstring(num);\r\n    } else {\r\n        const biHex = new BigInt(param.toString()).toHexstr();\r\n        result = pushHexString(biHex);\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const pushHexString = (param: string) => {\r\n    let result = '';\r\n    const len = param.length / 2;\r\n    if (len <= opcode.PUSHBYTES75) {\r\n        result += num2hexstring(len);\r\n    } else if (len < 0x100) {\r\n        result += num2hexstring(opcode.PUSHDATA1);\r\n        result += num2hexstring(len);\r\n    } else if (len < 0x10000) {\r\n        result += num2hexstring(opcode.PUSHDATA2);\r\n        result += num2hexstring(len, 2, true);\r\n    } else {\r\n        result += num2hexstring(opcode.PUSHDATA4);\r\n        result += num2hexstring(len, 4, true);\r\n    }\r\n    result += param;\r\n    return result;\r\n};\r\n\r\nexport const getStructBytes = (val: Struct) => {\r\n    let result = '';\r\n    result += num2hexstring(ParameterTypeVal.Struct);\r\n    result += num2hexstring(val.list.length); // val is array-like\r\n    for (const v of val.list) {\r\n        if (typeof v === 'string') {// consider as hex string\r\n            result += num2hexstring(ParameterTypeVal.ByteArray);\r\n            result += pushHexString(v);\r\n        } else if (typeof v === 'number') {\r\n            result += num2hexstring(ParameterTypeVal.ByteArray);\r\n            result += pushHexString(num2VarInt(v));\r\n        } else {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const getMapBytes = (val: Map<string, Parameter>) => {\r\n    let result = '';\r\n    result += num2hexstring(ParameterTypeVal.Map);\r\n    result += num2hexstring(val.size);\r\n    for (const k of val.keys()) {\r\n        result += num2hexstring(ParameterTypeVal.ByteArray);\r\n        result += pushHexString(str2hexstr(k));\r\n        const p = val.get(k);\r\n        if (p && p.getType() === ParameterType.ByteArray) {\r\n            result += num2hexstring(ParameterTypeVal.ByteArray);\r\n            result += pushHexString(p.getValue());\r\n        } else if (p && p.getType() === ParameterType.String) {\r\n            result += num2hexstring(ParameterTypeVal.ByteArray);\r\n            result += pushHexString(str2hexstr(p.getValue()));\r\n        } else if (p && p.getType() === ParameterType.Integer) {\r\n            result += num2hexstring(ParameterTypeVal.Integer);\r\n            result += pushHexString(num2VarInt(p.getValue()));\r\n        } else if (p && p.getType() === ParameterType.Long) {\r\n            result += num2hexstring(ParameterTypeVal.Integer);\r\n            result += pushHexString(num2VarInt(p.getValue()));\r\n        } else {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const pushMap = (val: Map<string, any>) => {\r\n    let result = '';\r\n    result += num2hexstring(opcode.NEWMAP);\r\n    result += num2hexstring(opcode.TOALTSTACK);\r\n    for (const k of val.keys()) {\r\n        result += num2hexstring(opcode.DUPFROMALTSTACK);\r\n        result += pushHexString(str2hexstr(k));\r\n        result += pushParam(val.get(k));\r\n        result += num2hexstring(opcode.SETITEM);\r\n    }\r\n    result += num2hexstring(opcode.FROMALTSTACK);\r\n    return result;\r\n};\r\n\r\nexport const pushParam = (p: any) => {\r\n    if (!p) {\r\n        throw Error('Parameter can not be undefined');\r\n    }\r\n    let result = '';\r\n    if (p.type === ParameterType.ByteArray) {\r\n        result += pushHexString(p.value);\r\n    } else if (p.type === ParameterType.String) {\r\n        result += pushHexString(str2hexstr(p.value));\r\n    } else if (p.type === ParameterType.Boolean) {\r\n        result += pushBool(Boolean(p.value));\r\n        result += num2hexstring(opcode.PUSH0);\r\n        result += num2hexstring(opcode.BOOLOR);\r\n    } else if (p instanceof Map) {\r\n        result += pushMap(p);\r\n    } else if (p.type === ParameterType.Array) {\r\n        for (let i = p.value.length - 1; i > -1; i--) {\r\n            result += pushParam(p.value[i]);\r\n        }\r\n        result += pushInt(p.value.length);\r\n        result += num2hexstring(opcode.PACK);\r\n    } else if (p.type === ParameterType.Integer) {\r\n        result += pushInt(p.value);\r\n        result += num2hexstring(opcode.PUSH0);\r\n        result += num2hexstring(opcode.ADD);\r\n    } else if (p.type === ParameterType.Long) {\r\n        result += pushBigNum(new BigNumber(p.value));\r\n        result += num2hexstring(opcode.PUSH0);\r\n        result += num2hexstring(opcode.ADD);\r\n    } else {\r\n        throw Error('Invalid parameter type: ' + JSON.stringify(p));\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const serializeAbiFunction = (abiFunction: AbiFunction) => {\r\n    const list = [];\r\n    list.push(str2hexstr(abiFunction.name));\r\n    const tmp = [];\r\n    for (const p of abiFunction.parameters) {\r\n        if (p.getType() === ParameterType.String) {\r\n            tmp.push(str2hexstr(p.getValue()));\r\n        } else if (p.getType() === ParameterType.Long) {\r\n            tmp.push(new BigNumber(p.getValue()));\r\n        } else if (p.getType() === ParameterType.Map) {\r\n            tmp.push(convertMap(p));\r\n        } else {\r\n            tmp.push(p.getValue());\r\n        }\r\n    }\r\n    if (list.length > 0) {\r\n        list.push(tmp);\r\n    }\r\n    const result = createCodeParamsScript(list);\r\n    return result;\r\n};\r\n\r\nexport function convertArray(list: Parameter[]): any {\r\n    const tmp = [];\r\n    for (const p of list) {\r\n        if (p.getType && p.getType() === ParameterType.String) {\r\n            tmp.push(str2hexstr(p.getValue()));\r\n        } else if (p.getType && p.getType() === ParameterType.Long) {\r\n            tmp.push(new BigNumber(p.getValue()));\r\n        } else if (p.getType && p.getType() === ParameterType.Array) {\r\n            tmp.push(convertArray(p.value));\r\n        } else if (p.getType && p.getType() === ParameterType.Map) {\r\n            tmp.push(convertMap(p));\r\n        } else {\r\n            tmp.push(p.getValue ? p.getValue() : p);\r\n        }\r\n    }\r\n    return tmp;\r\n}\r\n\r\nexport function convertMap(p: Parameter): any {\r\n    const map = new Map();\r\n    for (const k of Object.keys(p.value)) {\r\n        const pVal = p.value[k];\r\n        // map.set(k, pVal);\r\n        if (pVal.type && pVal.type === ParameterType.Map) {\r\n            map.set(k, convertMap(pVal));\r\n        } else {\r\n            map.set(k, pVal);\r\n        }\r\n    }\r\n    return map;\r\n}\r\n\r\n/**\r\n * To deserialize the value return from smart contract invoke.\r\n * @param hexstr\r\n */\r\nexport function deserializeItem(sr: StringReader): any {\r\n    const t = parseInt(sr.read(1), 16);\r\n    if ( t === ParameterTypeVal.ByteArray) {\r\n        return sr.readNextBytes();\r\n    } else if (t === ParameterTypeVal.Boolean) {\r\n        return sr.readBoolean();\r\n    } else if (t === ParameterTypeVal.Integer) {\r\n        const v = bigIntFromBytes(sr.readNextBytes()).toNumber();\r\n        return v;\r\n    } else if (t === ParameterTypeVal.Array || t === ParameterTypeVal.Struct ) {\r\n        const length = sr.readNextLen();\r\n        const list = [];\r\n        for (let i = length; i > 0; i--) {\r\n            const ele = deserializeItem(sr);\r\n            list.push(ele);\r\n        }\r\n        return list;\r\n    } else if (t === ParameterTypeVal.Map ) {\r\n        const length = sr.readNextLen();\r\n        const map = new Map();\r\n        for (let i = length; i > 0; i--) {\r\n            const key = hexstr2str(deserializeItem(sr));\r\n            const value = deserializeItem(sr);\r\n            map.set(key, value);\r\n        }\r\n        return map;\r\n    } else {\r\n        throw Error('Invalid parameter type: ' + t);\r\n    }\r\n}\r\n\r\nexport const createCodeParamsScript = (list: any[]) => {\r\n    let result = '';\r\n    for (let i = list.length - 1; i >= 0; i--) {\r\n        const val = list[i];\r\n        if (typeof val === 'string') {\r\n            result += pushHexString(val);\r\n        } else if (typeof val === 'number') {\r\n            result += pushInt(val);\r\n        } else if (typeof val === 'boolean') {\r\n            result += pushBool(val);\r\n        } else if (val instanceof BigNumber) {\r\n            result += pushBigNum(val);\r\n        } else if (val instanceof Map) {\r\n            result += pushMap(val);\r\n            // const mapBytes = getMapBytes(val);\r\n            // result += pushHexString(mapBytes);\r\n        } else if (val instanceof Struct) {\r\n            const structBytes = getStructBytes(val);\r\n            result += pushHexString(structBytes);\r\n        } else if (val instanceof Array) {\r\n            result += createCodeParamsScript(convertArray(val));\r\n            result += pushInt(val.length);\r\n            result += num2hexstring(opcode.PACK);\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\n// deprecated\r\nexport const buildSmartContractParam = (functionName: string, params: Parameter[]) => {\r\n    let result = '';\r\n    for (let i = params.length - 1; i > -1; i--) {\r\n        const type = params[i].getType();\r\n        switch (type) {\r\n        case ParameterType.Boolean:\r\n            result += pushBool(params[i].getValue());\r\n            break;\r\n\r\n        case ParameterType.Integer:\r\n            result += pushInt(params[i].getValue());\r\n            break;\r\n\r\n        case ParameterType.String:\r\n            const value = str2hexstr(params[i].getValue());\r\n            result += pushHexString(value);\r\n            break;\r\n\r\n        case ParameterType.ByteArray:\r\n            result += pushHexString(params[i].getValue());\r\n            break;\r\n\r\n        case ParameterType.Map:\r\n            const mapBytes = getMapBytes(params[i].getValue());\r\n            result += pushHexString(mapBytes);\r\n            break;\r\n\r\n        case ParameterType.Struct:\r\n            const structBytes = getStructBytes(params[i].getValue());\r\n            result += pushHexString(structBytes);\r\n            break;\r\n        // case ParameterType.Array:\r\n        //     result += buildSmartContractParam(params[i].getValue());\r\n        //     result += pushInt(params[i].getValue().length);\r\n        //     result += num2hexstring(opcode.PACK);\r\n        //     break;\r\n        default:\r\n            throw new Error('Unsupported param type: ' + JSON.stringify(params[i]));\r\n        }\r\n    }\r\n\r\n    result += pushInt(params.length);\r\n    result += num2hexstring(opcode.PACK);\r\n\r\n    result += pushHexString(str2hexstr(functionName));\r\n\r\n    return result;\r\n};\r\n\r\nexport const buildWasmContractParam = (params: Parameter[]) => {\r\n    const pList = [];\r\n\r\n    for (const p of params) {\r\n        const type = p.getType();\r\n        let o;\r\n\r\n        switch (type) {\r\n        case ParameterType.String:\r\n            o = {\r\n                type: 'string',\r\n                value: p.getValue()\r\n            };\r\n            break;\r\n        case ParameterType.Int:\r\n            o = {\r\n                type: 'int',\r\n                value: p.getValue().toString()\r\n            };\r\n            break;\r\n        case ParameterType.Long:\r\n            o = {\r\n                type: 'int64',\r\n                value: p.getValue()\r\n            };\r\n            break;\r\n        case ParameterType.IntArray:\r\n            o = {\r\n                type: 'int_array',\r\n                value: p.getValue()\r\n            };\r\n            break;\r\n        case ParameterType.LongArray:\r\n            o = {\r\n                type: 'int_array',\r\n                value: p.getValue()\r\n            };\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n        pList.push(o);\r\n    }\r\n\r\n    const result = {\r\n        Params: pList\r\n    };\r\n    return str2hexstr(JSON.stringify(result));\r\n};\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as cryptoJS from 'crypto-js';\r\nimport Fixed64 from '../common/fixed64';\r\nimport { Address } from '../crypto/address';\r\nimport { Signable } from '../crypto/signable';\r\nimport { ab2hexstring, generateRandomArray, num2hexstring, StringReader } from '../utils';\r\nimport DeployCode from './payload/deployCode';\r\nimport InvokeCode from './payload/invokeCode';\r\nimport Payload from './payload/payload';\r\nimport { TransactionAttribute } from './txAttribute';\r\nimport { TxSignature } from './txSignature';\r\n\r\nexport enum TxType  {\r\n    BookKeeper      = 0x02,\r\n    Claim           = 0x03,\r\n    Deploy          = 0xd0,\r\n    Invoke          = 0xd1,\r\n    Enrollment      = 0x04,\r\n    Vote            = 0x05\r\n}\r\n\r\nexport const TxName = {\r\n    BookKeeper: 'BookKeeper',\r\n    Claim: 'Claim',\r\n    Deploy: 'Deploy',\r\n    Invoke: 'Invoke',\r\n    Enrollment: 'Enrollment',\r\n    Vote: 'Vote'\r\n};\r\n\r\n/**\r\n * @deprecated. Transaction fee.\r\n */\r\nexport class Fee {\r\n    static deserialize(sr: StringReader): Fee {\r\n        const fee = new Fee();\r\n        const amount = Fixed64.deserialize(sr);\r\n        const payer = sr.read(20);\r\n        fee.amount = amount;\r\n        fee.payer = new Address(payer);\r\n        return fee;\r\n    }\r\n\r\n    amount: Fixed64;\r\n\r\n    // 20 bytes address\r\n    payer: Address;\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        result += this.amount.serialize();\r\n        result += this.payer.serialize();\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class Transaction implements Signable {\r\n    static deserialize(hexstring: string): Transaction {\r\n        const tx = new Transaction();\r\n\r\n        // console.log(' hexstring' + hexstring)\r\n        const ss = new StringReader(hexstring);\r\n\r\n        tx.version = parseInt(ss.read(1), 16);\r\n        tx.type = parseInt(ss.read(1), 16);\r\n        tx.nonce = ss.read(4);\r\n        tx.gasPrice = Fixed64.deserialize(ss);\r\n        tx.gasLimit = Fixed64.deserialize(ss);\r\n        tx.payer = new Address(ss.read(20));\r\n        let payload;\r\n\r\n        switch (tx.type) {\r\n        case TxType.Invoke :\r\n            payload = new InvokeCode();\r\n            break;\r\n        case TxType.Deploy:\r\n            payload = new DeployCode();\r\n            break;\r\n        default :\r\n            payload = new InvokeCode();\r\n        }\r\n        payload.deserialize(ss);\r\n        tx.payload = payload;\r\n        tx.txAttributes = [];\r\n        tx.sigs = [];\r\n\r\n        const attributeLength = ss.readNextLen();\r\n        for (let i = 0; i < attributeLength; i++) {\r\n            const txAttribute = new TransactionAttribute();\r\n            txAttribute.deserialize(ss);\r\n            tx.txAttributes.push(txAttribute);\r\n        }\r\n\r\n        const sigLength = ss.readNextLen();\r\n        for (let i = 0; i < sigLength; i++) {\r\n            tx.sigs.push(TxSignature.deserialize(ss));\r\n        }\r\n\r\n        return tx;\r\n    }\r\n\r\n    /**\r\n     * Transaction type\r\n     */\r\n    type: TxType = 0xd1;\r\n\r\n    /**\r\n     * Version of transaction\r\n     */\r\n    version: number = 0x00;\r\n\r\n    /**\r\n     * Payload of transaction\r\n     */\r\n    payload: Payload;\r\n\r\n    /**\r\n     * Random hex string. 4 bytes.\r\n     */\r\n    nonce: string;\r\n\r\n    /**\r\n     * @deprecated\r\n     */\r\n    txAttributes: TransactionAttribute[] = [];\r\n\r\n    /**\r\n     * Gas price\r\n     */\r\n    gasPrice: Fixed64;\r\n\r\n    /**\r\n     * Gas limit\r\n     */\r\n    gasLimit: Fixed64;\r\n\r\n    /**\r\n     * Address to pay for gas\r\n     */\r\n    payer: Address;\r\n\r\n    /**\r\n     * Array of signatures\r\n     */\r\n    sigs: TxSignature[] = [];\r\n\r\n    constructor() {\r\n        this.nonce = ab2hexstring(generateRandomArray(4));\r\n        this.gasPrice = new Fixed64();\r\n\r\n        // const limit = num2hexstring(DEFAULT_GAS_LIMIT, 8, true);\r\n\r\n        this.gasLimit = new Fixed64();\r\n        this.payer = new Address('0000000000000000000000000000000000000000');\r\n    }\r\n\r\n    /**\r\n     * Serialize transaction to hex string\r\n     * The result is used to send to blockchain.\r\n     */\r\n    serialize(): string {\r\n        const unsigned = this.serializeUnsignedData();\r\n        const signed = this.serializeSignedData();\r\n\r\n        return unsigned + signed;\r\n    }\r\n\r\n    /**\r\n     * Serialize transaction data exclueds signatures\r\n     */\r\n    serializeUnsignedData() {\r\n        let result = '';\r\n        result += num2hexstring(this.version);\r\n        result += num2hexstring(this.type);\r\n\r\n        // nonce 4bytes\r\n        result += this.nonce;\r\n        result += this.gasPrice.serialize();\r\n        result += this.gasLimit.serialize();\r\n        result += this.payer.serialize();\r\n        result += this.payload.serialize();\r\n\r\n        // serialize transaction attributes\r\n        result += num2hexstring(this.txAttributes.length);\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < this.txAttributes.length; i++) {\r\n            result += this.txAttributes[i].serialize();\r\n        }\r\n        // result += num2hexstring(this.fee.length)\r\n        // for (let i=0 ; i< this.fee.length; i++) {\r\n        //     result += this.fee[i].amount.serialize()\r\n        //     result += this.fee[i].payer.serialize()\r\n        // }\r\n\r\n        // if(this.networkFee) {\r\n        //     result += this.networkFee.serialize()\r\n        // }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Serialize signatures\r\n     */\r\n    serializeSignedData() {\r\n        let result = '';\r\n        // programs\r\n        result += num2hexstring(this.sigs.length);\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < this.sigs.length; i++) {\r\n            result += this.sigs[i].serialize();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the signable content\r\n     */\r\n    getSignContent() {\r\n        const data = this.serializeUnsignedData();\r\n\r\n        const ProgramHexString = cryptoJS.enc.Hex.parse(data);\r\n        const ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\r\n        const ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\r\n\r\n        return ProgramSha2562;\r\n    }\r\n\r\n    /**\r\n     * Get the hash of transaction\r\n     * @deprecated Use getSignContent instead\r\n     */\r\n    getHash() {\r\n        return this.getSignContent();\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport Fixed64 from \"../common/fixed64\";\r\nimport { NATIVE_INVOKE_NAME, REST_API, TX_MAX_SIG_SIZE } from \"../consts\";\r\nimport { Address, PrivateKey, SignatureScheme } from \"../crypto\";\r\nimport { PublicKey } from \"../crypto/PublicKey\";\r\nimport { ERROR_CODE } from \"../error\";\r\nimport AbiFunction from \"../smartcontract/abi/abiFunction\";\r\nimport { Parameter } from \"../smartcontract/abi/parameter\";\r\nimport { num2hexstring, reverseHex, str2hexstr } from \"../utils\";\r\nimport { ParameterType } from \"./../smartcontract/abi/parameter\";\r\nimport opcode from \"./opcode\";\r\nimport DeployCode from \"./payload/deployCode\";\r\nimport InvokeCode from \"./payload/invokeCode\";\r\nimport { comparePublicKeys } from \"./program\";\r\nimport {\r\n  createCodeParamsScript,\r\n  pushHexString,\r\n  pushInt,\r\n  serializeAbiFunction\r\n} from \"./scriptBuilder\";\r\nimport { Transaction, TxType } from \"./transaction\";\r\nimport { Transfer } from \"./transfer\";\r\nimport { TxSignature } from \"./txSignature\";\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const Default_params = {\r\n  Action: \"sendrawtransaction\",\r\n  Version: \"1.0.0\",\r\n  Type: \"\",\r\n  Op: \"test\"\r\n};\r\n\r\n/**\r\n * Signs the transaction object.\r\n *\r\n * If there is already a signature, the new one will replace existing.\r\n * If the signature schema is not provided, default schema for Private key type is used.\r\n *\r\n * @param tx Transaction to sign\r\n * @param privateKey Private key to sign with\r\n * @param schema Signature Schema to use\r\n */\r\nexport const signTransaction = (\r\n  tx: Transaction,\r\n  privateKey: PrivateKey,\r\n  schema?: SignatureScheme\r\n) => {\r\n  const signature = TxSignature.create(tx, privateKey, schema);\r\n\r\n  tx.sigs = [signature];\r\n};\r\n\r\n/**\r\n * Signs the transaction object asynchroniously.\r\n *\r\n * If there is already a signature, the new one will replace existing.\r\n * If the signature schema is not provided, default schema for Private key type is used.\r\n *\r\n * @param tx Transaction to sign\r\n * @param privateKey Private key to sign with\r\n * @param schema Signature Schema to use\r\n */\r\nexport const signTransactionAsync = async (\r\n  tx: Transaction,\r\n  privateKey: PrivateKey,\r\n  schema?: SignatureScheme\r\n) => {\r\n  const signature = await TxSignature.createAsync(tx, privateKey, schema);\r\n\r\n  tx.sigs = [signature];\r\n};\r\n\r\n/**\r\n * Signs the transaction object.\r\n *\r\n * If there is already a signature, the new one will be added to the end.\r\n * If the signature schema is not provided, default schema for Private key type is used.\r\n *\r\n * @param tx Transaction to sign\r\n * @param privateKey Private key to sign with\r\n * @param schema Signature Schema to use\r\n */\r\nexport const addSign = (\r\n  tx: Transaction,\r\n  privateKey: PrivateKey,\r\n  schema?: SignatureScheme\r\n) => {\r\n  const signature = TxSignature.create(tx, privateKey, schema);\r\n\r\n  tx.sigs.push(signature);\r\n};\r\n\r\nconst equalPks = (pks1: PublicKey[], pks2: PublicKey[]): boolean => {\r\n  if (pks1 === pks2) {\r\n    return true;\r\n  }\r\n  pks1.sort(comparePublicKeys);\r\n  pks2.sort(comparePublicKeys);\r\n  if (pks1.length !== pks2.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < pks1.length; i++) {\r\n    if (pks1[i].key !== pks2[i].key) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n * Signs the transaction with multiple signatures with multi-sign keys.\r\n *\r\n * If there is already a signature, the new ones will be added to the end.\r\n * If the signature schema is not provided, default schema for Private key type is used.\r\n *\r\n * @param tx Transaction to sign\r\n * @param M m of the (m ,n) multi sign address threshold\r\n * @param pubKeys Array of Public keys of (m,n) multi sign address, the number is n\r\n * @param privateKey Private key to sign the tx.\r\n * @param scheme Signature scheme to use\r\n */\r\nexport const signTx = (\r\n  tx: Transaction,\r\n  M: number,\r\n  pubKeys: PublicKey[],\r\n  privateKey: PrivateKey,\r\n  scheme?: SignatureScheme\r\n) => {\r\n  if (tx.sigs.length === 0) {\r\n    tx.sigs = [];\r\n  } else {\r\n    if (\r\n      tx.sigs.length > TX_MAX_SIG_SIZE ||\r\n      M > pubKeys.length ||\r\n      M <= 0 ||\r\n      pubKeys.length === 0\r\n    ) {\r\n      throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < tx.sigs.length; i++) {\r\n      if (equalPks(tx.sigs[i].pubKeys, pubKeys)) {\r\n        if (tx.sigs[i].sigData.length + 1 > pubKeys.length) {\r\n          throw new Error(\"Too many sigData\");\r\n        }\r\n        const signData = privateKey.sign(tx, scheme).serializeHex();\r\n        tx.sigs[i].sigData.push(signData);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  const sig = new TxSignature();\r\n  sig.M = M;\r\n  sig.pubKeys = pubKeys;\r\n  sig.sigData = [privateKey.sign(tx, scheme).serializeHex()];\r\n  tx.sigs.push(sig);\r\n};\r\n\r\n/**\r\n * Creates transaction to invoke native contract\r\n * @param funcName Function name of contract to call\r\n * @param params Parameters serialized in hex string\r\n * @param contractAddr Adderss of contract\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for transaction gas\r\n */\r\nexport function makeNativeContractTx(\r\n  funcName: string,\r\n  params: string,\r\n  contractAddr: Address,\r\n  gasPrice?: string,\r\n  gasLimit?: string,\r\n  payer?: Address\r\n) {\r\n  let code = \"\";\r\n  code += params;\r\n  code += pushHexString(str2hexstr(funcName));\r\n  code += pushHexString(contractAddr.serialize());\r\n  code += pushInt(0);\r\n  code += num2hexstring(opcode.SYSCALL);\r\n  code += pushHexString(str2hexstr(NATIVE_INVOKE_NAME));\r\n  console.log(\"NATIVE_INVOKE_NAME@@\", NATIVE_INVOKE_NAME);\r\n\r\n  const payload = new InvokeCode();\r\n  payload.code = code;\r\n\r\n  let tx: Transaction;\r\n  if (funcName === \"transfer\" || funcName === \"transferFrom\") {\r\n    tx = new Transfer();\r\n  } else {\r\n    tx = new Transaction();\r\n  }\r\n\r\n  tx.type = TxType.Invoke;\r\n  tx.payload = payload;\r\n  if (gasLimit) {\r\n    tx.gasLimit = new Fixed64(gasLimit);\r\n  }\r\n  if (gasPrice) {\r\n    tx.gasPrice = new Fixed64(gasPrice);\r\n  }\r\n  if (payer) {\r\n    tx.payer = payer;\r\n  }\r\n  return tx;\r\n}\r\n\r\n/**\r\n * Creates transaction to inovke smart contract\r\n * @param funcName Function name of smart contract\r\n * @param params Array of Parameters or serialized parameters\r\n * @param contractAddr Address of contract\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for gas\r\n */\r\nexport const makeInvokeTransaction = (\r\n  funcName: string,\r\n  params: Parameter[] | string,\r\n  contractAddr: Address,\r\n  gasPrice?: string,\r\n  gasLimit?: string,\r\n  payer?: Address\r\n) => {\r\n  const tx = new Transaction();\r\n  tx.type = TxType.Invoke;\r\n\r\n  let args = \"\";\r\n  if (typeof params === \"string\") {\r\n    args = params;\r\n  } else {\r\n    const abiFunc = new AbiFunction(funcName, \"\", params);\r\n    args = serializeAbiFunction(abiFunc);\r\n  }\r\n\r\n  let code = args + num2hexstring(opcode.APPCALL);\r\n  code += contractAddr.serialize();\r\n\r\n  const payload = new InvokeCode();\r\n  payload.code = code;\r\n  tx.payload = payload;\r\n\r\n  if (gasLimit) {\r\n    tx.gasLimit = new Fixed64(gasLimit);\r\n  }\r\n  if (gasPrice) {\r\n    tx.gasPrice = new Fixed64(gasPrice);\r\n  }\r\n  if (payer) {\r\n    tx.payer = payer;\r\n  }\r\n  return tx;\r\n};\r\n\r\n/**\r\n * Creates transaction to deploy smart contract\r\n * @param code Avm code of contract to deploy\r\n * @param name Name of contract\r\n * @param codeVersion version of contract\r\n * @param author Author of contract\r\n * @param email Email of author\r\n * @param desp Description of contract\r\n * @param needStorage Decides if the contract needs storage\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for gas\r\n */\r\nexport function makeDeployCodeTransaction(\r\n  code: string,\r\n  name: string = \"\",\r\n  codeVersion: string = \"1.0\",\r\n  author: string = \"\",\r\n  email: string = \"\",\r\n  desp: string = \"\",\r\n  needStorage: boolean = true,\r\n  gasPrice: string,\r\n  gasLimit: string,\r\n  payer?: Address\r\n) {\r\n  const dc = new DeployCode();\r\n  dc.author = author;\r\n  // const vmCode = new VmCode();\r\n  // vmCode.code = code;\r\n  // vmCode.vmType = vmType;\r\n  // dc.code = vmCode;\r\n  dc.code = code;\r\n  dc.version = codeVersion;\r\n  dc.description = desp;\r\n  dc.email = email;\r\n  dc.name = name;\r\n  dc.needStorage = needStorage;\r\n\r\n  const tx = new Transaction();\r\n  tx.version = 0x00;\r\n\r\n  tx.payload = dc;\r\n\r\n  tx.type = TxType.Deploy;\r\n  // gas\r\n  // if (DEFAULT_GAS_LIMIT === Number(0)) {\r\n  //     tx.gasPrice = new Fixed64();\r\n  // } else {\r\n  //     const price = new BigNumber(gas).multipliedBy(1e9).dividedBy(new BigNumber(DEFAULT_GAS_LIMIT)).toString();\r\n  //     tx.gasPrice = new Fixed64(price);\r\n  // }\r\n  tx.gasLimit = new Fixed64(gasLimit);\r\n  tx.gasPrice = new Fixed64(gasPrice);\r\n  if (payer) {\r\n    tx.payer = payer;\r\n  }\r\n\r\n  return tx;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * Creates params from transaction to send with websocket\r\n * @param tx Transactio to send\r\n * @param isPreExec Decides if it is pre-execute transaction\r\n */\r\nexport function buildTxParam(tx: Transaction, isPreExec: boolean = false) {\r\n  const op = isPreExec ? { PreExec: \"1\" } : {};\r\n  const serialized = tx.serialize();\r\n\r\n  return JSON.stringify(\r\n    Object.assign({}, Default_params, { Data: serialized }, op)\r\n  );\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * Creates params from transaction to send with rpc\r\n * @param tx Transaction\r\n * @param method Method name\r\n */\r\nexport function buildRpcParam(tx: Transaction, method?: string) {\r\n  const param = tx.serialize();\r\n  const result = {\r\n    jsonrpc: \"2.0\",\r\n    method: method || \"sendrawtransaction\",\r\n    params: [param],\r\n    id: 10\r\n  };\r\n  return result;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * Creates params from transaction to send with restful\r\n * @param tx Transaction\r\n */\r\nexport function buildRestfulParam(tx: Transaction) {\r\n  const param = tx.serialize();\r\n  return {\r\n    Action: \"sendrawtransaction\",\r\n    Version: \"1.0.0\",\r\n    Data: param\r\n  };\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * @param url Url of blochchain node\r\n * @param preExec Decides if is a pre-execute request\r\n */\r\nexport function sendRawTxRestfulUrl(url: string, preExec: boolean = false) {\r\n  if (url.charAt(url.length - 1) === \"/\") {\r\n    url = url.substring(0, url.length - 1);\r\n  }\r\n\r\n  let restUrl = url + REST_API.sendRawTx;\r\n  if (preExec) {\r\n    restUrl += \"?preExec=1\";\r\n  }\r\n\r\n  return restUrl;\r\n}\r\n\r\nexport function transferStringParameter(value: string): Parameter {\r\n  const strs = value.split(\":\");\r\n  if (strs.length !== 2) {\r\n    throw new Error(\"Invalid parameter. \" + value);\r\n  }\r\n  const p = new Parameter(\"\", strs[0] as ParameterType, strs[1]);\r\n  if (p.type === ParameterType.Address) {\r\n    p.type = ParameterType.ByteArray;\r\n    p.value = new Address(p.value).serialize();\r\n  }\r\n  return p;\r\n}\r\n\r\nexport function transformMapParameter(value: any) {\r\n  const map: any = {};\r\n  for (const k of Object.keys(value)) {\r\n    const v = value[k];\r\n    if (typeof v === \"number\") {\r\n      map[k] = new Parameter(\"\", ParameterType.Integer, v);\r\n    } else if (typeof v === \"boolean\") {\r\n      map[k] = new Parameter(\"\", ParameterType.Boolean, v);\r\n    } else if (Array.isArray(v)) {\r\n      map[k] = new Parameter(\r\n        \"\",\r\n        ParameterType.Array,\r\n        transformArrayParameter(v)\r\n      );\r\n    } else if (typeof v === \"object\") {\r\n      map[k] = new Parameter(\"\", ParameterType.Map, transformMapParameter(v));\r\n    } else if (typeof v === \"string\") {\r\n      map[k] = transferStringParameter(v);\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport function transformArrayParameter(val: any) {\r\n  const list = [];\r\n  for (const v of val) {\r\n    let p = new Parameter(\"\", ParameterType.ByteArray, v);\r\n    if (typeof v === \"number\") {\r\n      p.type = ParameterType.Integer;\r\n    } else if (typeof v === \"boolean\") {\r\n      p.type = ParameterType.Boolean;\r\n    } else if (Array.isArray(v)) {\r\n      p.type = ParameterType.Array;\r\n      p.value = transformArrayParameter(v);\r\n    } else if (typeof v === \"object\") {\r\n      p.type = ParameterType.Map;\r\n      p.value = transformMapParameter(v);\r\n    } else if (typeof v === \"string\") {\r\n      p = transferStringParameter(v);\r\n    }\r\n    list.push(p);\r\n  }\r\n  return list;\r\n}\r\n\r\nexport function transformParameter(arg: any) {\r\n  const name = arg.name;\r\n  const value = arg.value;\r\n  let p = new Parameter(name, ParameterType.ByteArray, value);\r\n  if (typeof value === \"number\") {\r\n    p.type = ParameterType.Integer;\r\n    p.value = Number(value);\r\n  } else if (typeof value === \"boolean\") {\r\n    p.type = ParameterType.Boolean;\r\n    p.value = Boolean(value);\r\n  } else if (Array.isArray(value)) {\r\n    p.type = ParameterType.Array;\r\n    p.value = transformArrayParameter(value);\r\n  } else if (typeof value === \"object\") {\r\n    p.type = ParameterType.Map;\r\n    p.value = transformMapParameter(value);\r\n  } else if (typeof value === \"string\") {\r\n    p = transferStringParameter(value);\r\n  }\r\n  return p;\r\n}\r\n\r\nexport function buildParamsByJson(json: any) {\r\n  const paramsList = [];\r\n  const functions = json.functions;\r\n  for (const obj of functions) {\r\n    const { operation, args } = obj;\r\n    const list = [];\r\n    list.push(str2hexstr(operation));\r\n    const temp = [];\r\n    for (const arg of args) {\r\n      temp.push(transformParameter(arg));\r\n    }\r\n    list.push(temp);\r\n    paramsList.push(list);\r\n  }\r\n  return paramsList;\r\n}\r\n\r\nexport function makeTransactionsByJson(json: any) {\r\n  if (!json) {\r\n    throw new Error(\"Invalid parameter. Expect JSON object\");\r\n  }\r\n  if (\r\n    !json.action ||\r\n    (json.action !== \"invoke\" &&\r\n      json.action !== \"invokeRead\" &&\r\n      json.action !== \"invokePasswordFree\")\r\n  ) {\r\n    throw new Error(\r\n      'Invalid parameter. The action type must be \"invoke or invokeRead\"'\r\n    );\r\n  }\r\n  if (!json.params || !json.params.invokeConfig) {\r\n    throw new Error(\"Invalid parameter. The params can not be empty.\");\r\n  }\r\n  const invokeConfig = json.params.invokeConfig;\r\n  // tslint:disable-next-line:prefer-const\r\n  let { payer, gasPrice, gasLimit, contractHash } = invokeConfig;\r\n  if (!contractHash) {\r\n    throw new Error(\"Invalid parameter. The contractHash can not be empty.\");\r\n  }\r\n  const contractAddr = new Address(reverseHex(contractHash));\r\n  payer = payer ? new Address(payer) : null;\r\n  gasPrice = gasPrice + \"\" || \"500\";\r\n  gasLimit = gasLimit + \"\" || \"200000\";\r\n\r\n  const parameters = buildParamsByJson(invokeConfig);\r\n  const txList = [];\r\n  for (const list of parameters) {\r\n    const params = createCodeParamsScript(list);\r\n    const tx = makeInvokeTransaction(\r\n      \"\",\r\n      params,\r\n      contractAddr,\r\n      gasPrice,\r\n      gasLimit,\r\n      payer\r\n    );\r\n    txList.push(tx);\r\n  }\r\n\r\n  return txList;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { Address } from '../crypto/address';\r\nimport { Transaction } from './transaction';\r\n\r\nexport class Transfer extends Transaction {\r\n    amount: number | string;\r\n    tokenType: string;\r\n    from: Address;\r\n    to: Address;\r\n    method: string;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { ERROR_CODE } from '../error';\r\nimport { hex2VarBytes, num2hexstring, StringReader } from '../utils';\r\n\r\nexport enum TransactionAttributeUsage {\r\n    Nonce           = 0x00,\r\n    Script          = 0x20,\r\n    DescriptionUrl  = 0x81,\r\n    Description     = 0x90\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * TransactionAttribute\r\n * @property {number} usage - Identifying byte\r\n * @property {string} data - Data\r\n */\r\nexport class TransactionAttribute {\r\n    usage: TransactionAttributeUsage;\r\n    // hexstring\r\n    data: string;\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        result += num2hexstring(this.usage);\r\n        if (this.usage === TransactionAttributeUsage.Script) {\r\n            result += this.data;\r\n        } else if (this.usage === TransactionAttributeUsage.DescriptionUrl\r\n                || this.usage === TransactionAttributeUsage.Description\r\n                || this.usage === TransactionAttributeUsage.Nonce) {\r\n            result += hex2VarBytes(this.data);\r\n        } else {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    deserialize(ss: StringReader): void {\r\n        // usage\r\n        const usage = parseInt(ss.read(1), 16);\r\n        // nonce\r\n        // const nonce = ss.read(8);\r\n        // get hash with publicKey;\r\n        const dataLen = ss.readNextLen();\r\n        const data = ss.read(dataLen);\r\n        this.usage = usage;\r\n        // this.nonce = nonce;\r\n        this.data = data;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { PrivateKey, PublicKey, Signable, SignatureScheme } from '../crypto';\r\nimport { hex2VarBytes, StringReader } from '../utils';\r\nimport { getParamsFromProgram, getProgramInfo,\r\n    programFromMultiPubKey, programFromParams, programFromPubKey } from './program';\r\n\r\n/**\r\n * Signature generated by signing transaction hash with Private Keys.\r\n */\r\nexport class TxSignature {\r\n\r\n    /**\r\n     * Deserializes hex representation to Transaction Signature\r\n     *\r\n     * @param sr Hex string reader\r\n     */\r\n    static deserialize(sr: StringReader) {\r\n        const sig = new TxSignature();\r\n        // sig.pubKeys = [];\r\n        // const pubKeyLength = sr.readNextLen();\r\n\r\n        // for (let i = 0; i < pubKeyLength; i++) {\r\n        //     const serializedLength = sr.readNextLen();\r\n        //     const pk = PublicKey.deserializeHex(sr, serializedLength);\r\n        //     sig.pubKeys.push(pk);\r\n        // }\r\n\r\n        // sig.M = sr.readNextLen();\r\n        // sig.sigData = [];\r\n\r\n        // const dataLength = sr.readNextLen();\r\n        // for (let i = 0; i < dataLength; i++) {\r\n        //     const data = sr.readNextBytes();\r\n        //     sig.sigData.push(data);\r\n        // }\r\n        const invocationScript = sr.readNextBytes();\r\n        const verificationScript = sr.readNextBytes();\r\n        const sigData = getParamsFromProgram(invocationScript);\r\n        const info = getProgramInfo(verificationScript);\r\n        sig.M = info.M;\r\n        sig.pubKeys = info.pubKeys;\r\n        sig.sigData = sigData;\r\n        return sig;\r\n    }\r\n\r\n    /**\r\n     * Creates Transaction signature of hash with supplied private key and scheme.\r\n     *\r\n     * If the signature schemas is not provided, the default schemes for the key types are used.\r\n     *\r\n     * @param hash hash of the transaction or signable transaction\r\n     * @param privateKey Private key to use\r\n     * @param scheme Signature scheme to use\r\n     */\r\n    static create(hash: string | Signable, privateKey: PrivateKey, scheme?: SignatureScheme) {\r\n        const signature = new TxSignature();\r\n\r\n        signature.M = 1;\r\n        signature.pubKeys = [privateKey.getPublicKey()];\r\n        signature.sigData = [privateKey.sign(hash, scheme).serializeHex()];\r\n\r\n        return signature;\r\n    }\r\n\r\n    /**\r\n     * Creates Transaction signature of hash with supplied private key and scheme asynchroniously.\r\n     *\r\n     * If the signature schemas is not provided, the default schemes for the key types are used.\r\n     *\r\n     * @param hash hash of the transaction or signable transaction\r\n     * @param privateKey Private key to use\r\n     * @param scheme Signature scheme to use\r\n     */\r\n    static async createAsync(hash: string | Signable, privateKey: PrivateKey, scheme?: SignatureScheme) {\r\n        const signature = new TxSignature();\r\n\r\n        signature.M = 1;\r\n        signature.pubKeys = [privateKey.getPublicKey()];\r\n        signature.sigData = [(await privateKey.signAsync(hash, scheme)).serializeHex()];\r\n\r\n        return signature;\r\n    }\r\n\r\n    /**\r\n     * Public keys used to create this signature.\r\n     */\r\n    pubKeys: PublicKey[];\r\n\r\n    // Cardinality of the signature\r\n    M: number;\r\n\r\n    // Signature values\r\n    sigData: string[];\r\n\r\n    /**\r\n     * Serializes signature to Hex representation.\r\n     *\r\n     */\r\n    serialize(): string {\r\n        let result = '';\r\n        // result += num2hexstring(this.pubKeys.length);\r\n\r\n        // // tslint:disable-next-line:prefer-for-of\r\n        // for (let i = 0; i < this.pubKeys.length; i++) {\r\n        //     const serialized = this.pubKeys[i].serializeHex();\r\n        //     result += num2hexstring(serialized.length / 2);\r\n        //     result += serialized;\r\n        // }\r\n\r\n        // result += num2hexstring(this.M);\r\n\r\n        // result += num2hexstring(this.sigData.length);\r\n\r\n        // // tslint:disable-next-line:prefer-for-of\r\n        // for (let i = 0; i < this.sigData.length; i++) {\r\n        //     result += hex2VarBytes(this.sigData[i]);\r\n        // }\r\n        const invocationScript = programFromParams(this.sigData);\r\n        let verificationScript = '';\r\n        if (this.pubKeys.length === 0) {\r\n            throw new Error('No pubkeys in sig');\r\n        } else if (this.pubKeys.length === 1) {\r\n            verificationScript = programFromPubKey(this.pubKeys[0]);\r\n        } else {\r\n            verificationScript = programFromMultiPubKey(this.pubKeys, this.M);\r\n        }\r\n        result += hex2VarBytes(invocationScript);\r\n        result += hex2VarBytes(verificationScript);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport axios from 'axios';\r\nimport * as bip39 from 'bip39';\r\nimport * as cryptoJS from 'crypto-js';\r\nimport * as Long from 'long';\r\nimport * as secureRandom from 'secure-random';\r\nimport { ONT_TOTAL_SUPPLY, UNBOUND_GENERATION_AMOUNT, UNBOUND_TIME_INTERVAL, WEBVIEW_SCHEME } from './consts';\r\nimport { ERROR_CODE } from './error';\r\n/**\r\n * Turn hex string into array buffer\r\n * @param str hex string\r\n */\r\nexport function hexstring2ab(str: string): number[] {\r\n    const result = [];\r\n\r\n    while (str.length >= 2) {\r\n        result.push(parseInt(str.substring(0, 2), 16));\r\n        str = str.substring(2, str.length);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Turn array buffer into hex string\r\n * @param arr Array like value\r\n */\r\nexport function ab2hexstring(arr: any): string {\r\n    let result: string = '';\r\n    const uint8Arr: Uint8Array = new Uint8Array(arr);\r\n    for (let i = 0; i < uint8Arr.byteLength; i++) {\r\n        let str = uint8Arr[i].toString(16);\r\n        str = str.length === 0\r\n            ? '00'\r\n            : str.length === 1\r\n                ? '0' + str\r\n                : str;\r\n        result += str;\r\n    }\r\n    return result;\r\n}\r\n\r\n /**\r\n  * Turn ArrayBuffer or array-like oject into normal string\r\n  * @param buf\r\n  */\r\nexport function ab2str(buf: ArrayBuffer | number[]): string {\r\n    return String.fromCharCode.apply(null, new Uint8Array(buf));\r\n}\r\n\r\n/**\r\n * Turn normal string into ArrayBuffer\r\n * @param str Normal string\r\n */\r\nexport function str2ab(str: string) {\r\n    const buf = new ArrayBuffer(str.length); // 每个字符占用1个字节\r\n    const bufView = new Uint8Array(buf);\r\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\r\n        bufView[i] = str.charCodeAt(i);\r\n    }\r\n    return buf;\r\n}\r\n\r\n/**\r\n * Turn normal string into hex string\r\n * @param str Normal string\r\n */\r\nexport function str2hexstr(str: string) {\r\n    return ab2hexstring(str2ab(str));\r\n}\r\n\r\n/**\r\n * Turn hex string into normal string\r\n * @param str Hex string\r\n */\r\nexport function hexstr2str(str: string) {\r\n    return ab2str(hexstring2ab(str));\r\n}\r\n\r\n/**\r\n * return the (length of bytes) + bytes\r\n * @param hex Hex string\r\n */\r\nexport function hex2VarBytes(hex: string) {\r\n    let result = '';\r\n    result += num2VarInt(hex.length / 2);\r\n    result += hex;\r\n    return result;\r\n}\r\n\r\n/**\r\n * return the length of string(bytes) + string(bytes)\r\n * @param str Normal string\r\n */\r\nexport function str2VarBytes(str: string) {\r\n    let result = '';\r\n    const hex = str2hexstr(str);\r\n    const hexLen = num2VarInt(hex.length / 2);\r\n    result += hexLen;\r\n    result += hex;\r\n    return result;\r\n}\r\n\r\n/**\r\n * return the byte of boolean value\r\n * @param v\r\n */\r\nexport function bool2VarByte(v: boolean) {\r\n    return v ? '01' : '00';\r\n}\r\n\r\n/**\r\n * Do xor operation with two strings\r\n * @param str1 Hex string\r\n * @param str2 Hex string\r\n */\r\nexport function hexXor(str1: string, str2: string): string {\r\n    if (str1.length !== str2.length) {\r\n        throw new Error('strings are disparate lengths');\r\n    }\r\n    if (str1.length % 2 !== 0) {\r\n        throw new Error('strings must be hex');\r\n    }\r\n\r\n    const result = new ArrayBuffer(str1.length / 2);\r\n    const result8 = new Uint8Array(result);\r\n    for (let i = 0; i < str1.length; i += 2) {\r\n        // tslint:disable-next-line:no-bitwise\r\n        result8[i / 2] = (parseInt(str1.substr(i, 2), 16) ^ parseInt(str2.substr(i, 2), 16));\r\n    }\r\n    return ab2hexstring(result);\r\n}\r\n\r\n/**\r\n * Converts a number to a big endian hexstring of a suitable size, optionally little endian\r\n * @param {number} num\r\n * @param {number} size - The required size in bytes, eg 1 for Uint8, 2 for Uint16. Defaults to 1.\r\n * @param {boolean} littleEndian - Encode the hex in little endian form\r\n * @return {string}\r\n */\r\nexport const num2hexstring = (num: number, size = 1, littleEndian = false) => {\r\n    if (num < 0) {\r\n        throw new RangeError('num must be >=0');\r\n    }\r\n    if (size % 1 !== 0) {\r\n        throw new Error('size must be a whole integer');\r\n    }\r\n    if (!Number.isSafeInteger(num)) {\r\n        throw new RangeError(`num (${num}) must be a safe integer`);\r\n    }\r\n\r\n    size = size * 2;\r\n    let hexstring = num.toString(16);\r\n    hexstring = hexstring.length % size === 0 ? hexstring : ('0'.repeat(size) + hexstring).substring(hexstring.length);\r\n    if (littleEndian) {\r\n        hexstring = reverseHex(hexstring);\r\n    }\r\n    return hexstring;\r\n};\r\n\r\n/**\r\n * Converts a number to a hex\r\n * @param {number} num - The number\r\n * @returns {string} hexstring of the variable Int.\r\n */\r\nexport const num2VarInt = (num: number) => {\r\n    if (num < 0xfd) {\r\n        return num2hexstring(num);\r\n    } else if (num <= 0xffff) {\r\n        // uint16\r\n        return 'fd' + num2hexstring(num, 2, true);\r\n    } else if (num <= 0xffffffff) {\r\n        // uint32\r\n        return 'fe' + num2hexstring(num, 4, true);\r\n    } else {\r\n        // uint64\r\n        return 'ff' + num2hexstring(num, 8, true);\r\n    }\r\n};\r\n\r\n/**\r\n * Reverses a hex string, 2 chars as 1 byte\r\n * @example\r\n * reverseHex('abcdef') = 'efcdab'\r\n * @param {string} hex - HEX string\r\n * @return {string} reversed hex string.\r\n */\r\nexport const reverseHex = (hex: string) => {\r\n    if (hex.length % 2 !== 0) {\r\n        throw new Error(`Incorrect Length: ${hex}`);\r\n    }\r\n    let out = '';\r\n    for (let i = hex.length - 2; i >= 0; i -= 2) {\r\n        out += hex.substr(i, 2);\r\n    }\r\n    return out;\r\n};\r\n\r\nexport function bigIntFromBytes(bytes: string): Long {\r\n    const buff = Buffer.from(bytes, 'hex');\r\n    let data = Array.from(buff.subarray(0));\r\n    const b = data[data.length - 1];\r\n\r\n    if (b >> 7 === 1) {\r\n        data = data.concat(Array(8 - data.length).fill(255));\r\n    }\r\n    return Long.fromBytesLE(data);\r\n}\r\n\r\nexport function bigIntToBytes(value: Long) {\r\n    let data = value.toBytesLE();\r\n    const negData = value.neg().toBytesLE();\r\n    let stop;\r\n    if (value.isNegative()) {\r\n        stop = 255;\r\n    } else {\r\n        stop = 0;\r\n    }\r\n    let b = stop;\r\n    let pos = 0;\r\n    for (let i = data.length - 1; i >= 0; i--) {\r\n        if (data[i] !== stop) {\r\n            b = value.isNegative() ? negData[i] : data[i];\r\n            pos = i + 1;\r\n            break;\r\n        }\r\n    }\r\n    data = data.slice(0, pos);\r\n\r\n    if (b >> 7 === 1) {\r\n        data.push(value.isNegative() ? 255 : 0);\r\n    }\r\n    return new Buffer(data).toString('hex');\r\n}\r\n\r\n/**\r\n * @class StringReader\r\n * @classdesc A string helper used to read given string as bytes.2 chars as one byte.\r\n * @param {string} str - The string to read.\r\n */\r\nexport class StringReader {\r\n    str: string;\r\n    pos: number;\r\n    size: number;\r\n    constructor(str = '') {\r\n        if (str.length % 2 !== 0) {\r\n            throw new Error('Param\\'s length is not even.');\r\n        }\r\n        this.str = str;\r\n        this.pos = 0;\r\n        this.size = this.str.length / 2;\r\n    }\r\n\r\n    /**\r\n     * Checks if reached the end of the string.\r\n     */\r\n    isEmpty() {\r\n        return this.pos >= this.str.length;\r\n    }\r\n\r\n    /**\r\n     * Reads some bytes.\r\n     * @param {number} bytes - Number of bytes to read\r\n     */\r\n    read(bytes: number) {\r\n        if (this.isEmpty()) {\r\n            throw new Error('StringReader reached the end.');\r\n        }\r\n        const out = this.str.substr(this.pos, bytes * 2);\r\n        this.pos += bytes * 2;\r\n        return out;\r\n    }\r\n\r\n    unreadBytes(bytes: number) {\r\n        if ( (this.pos - bytes * 2) < 0 ) {\r\n            throw new Error('Can not unread too many bytes.');\r\n        }\r\n        this.pos -= bytes * 2;\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Reads string terminated by NULL.\r\n     */\r\n    readNullTerminated(): string {\r\n        const index = this.str.indexOf('00', this.pos);\r\n        if (index === -1) {\r\n            throw new Error('No ending NULL found');\r\n        }\r\n\r\n        const out = this.str.substring(this.pos, index);\r\n        this.pos = index + 2;\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * First, read one byte as the length of bytes to read. Then read the following bytes.\r\n     */\r\n    readNextBytes() {\r\n        const bytesToRead = this.readNextLen();\r\n        if (bytesToRead === 0) {\r\n            return '';\r\n        }\r\n\r\n        return this.read(bytesToRead);\r\n    }\r\n\r\n    /**\r\n     * Reads one byte as int, which may indicates the length of following bytes to read.\r\n     * @returns {number}\r\n     */\r\n    readNextLen() {\r\n        let len = parseInt(this.read(1), 16);\r\n\r\n        if (len === 0xfd) {\r\n            len = parseInt(reverseHex(this.read(2)), 16);\r\n        } else if (len === 0xfe) {\r\n            len = parseInt(reverseHex(this.read(4)), 16);\r\n        } else if (len === 0xff) {\r\n            len = parseInt(reverseHex(this.read(8)), 16);\r\n        }\r\n\r\n        return len;\r\n    }\r\n\r\n    /**\r\n     * Read Uint8\r\n     */\r\n    readUint8() {\r\n        return parseInt(reverseHex(this.read(1)), 16);\r\n    }\r\n\r\n    /**\r\n     * read 2 bytes as uint16 in littleEndian\r\n     */\r\n    readUint16() {\r\n        return parseInt(reverseHex(this.read(2)), 16);\r\n    }\r\n\r\n    /**\r\n     * Read 4 bytes as uint32 in littleEndian\r\n     */\r\n    readUint32() {\r\n        return parseInt(reverseHex(this.read(4)), 16);\r\n    }\r\n\r\n    /**\r\n     * Read 4 bytes as int in littleEndian\r\n     */\r\n    readInt() {\r\n        return parseInt(reverseHex(this.read(4)), 16);\r\n    }\r\n\r\n    /**\r\n     * Read 8 bytes as long in littleEndian\r\n     */\r\n    readLong() {\r\n        return parseInt(reverseHex(this.read(8)), 16);\r\n    }\r\n\r\n    readBoolean() {\r\n        return parseInt(this.read(1), 16) !== 0;\r\n    }\r\n}\r\n\r\nexport class EventEmitter {\r\n    handlers: any = {};\r\n\r\n    // register event type and handler\r\n    on(type: string, handler: () => void) {\r\n        if (typeof this.handlers[type] === 'undefined') {\r\n            this.handlers[type] = [];\r\n        }\r\n        this.handlers[type].push(handler);\r\n    }\r\n\r\n    /**\r\n     * trigger event\r\n     * @param { string } type\r\n     * @param { any } event , is the parameter\r\n     */\r\n    trigger(type: string, event?: any) {\r\n        if (this.handlers[type] instanceof Array) {\r\n            const handlers = this.handlers[type];\r\n            for (let i = 0, len = handlers.length; i < len; i++) {\r\n                handlers[i](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    // remove event listener\r\n    off(type: string) {\r\n        delete this.handlers[type];\r\n    }\r\n}\r\n\r\nexport const sendBackResult2Native = (result: string, callback: string) => {\r\n    if (window && window.prompt) {\r\n        window.prompt(`${WEBVIEW_SCHEME}://${callback}?params=${result}`);\r\n    }\r\n};\r\n\r\nexport const axiosPost = (url: string, params: any) => {\r\n    return axios.post(url, params).then((res: any) => {\r\n        // tslint:disable-next-line:no-console\r\n        console.log('axios res:' + res);\r\n        return res;\r\n    }).catch((err: any) => {\r\n        // tslint:disable-next-line:no-console\r\n        console.log('axios res:' + JSON.stringify(err));\r\n\r\n        return err;\r\n    });\r\n};\r\n\r\n/**\r\n * Gets current time in unix timestamp format.\r\n */\r\nexport function now(): number {\r\n    return Math.floor(Date.now() / 1000);\r\n}\r\n\r\n/**\r\n * Computes sha-256 hash from hex encoded data.\r\n *\r\n * @param data Hex encoded data\r\n */\r\nexport function sha256(data: string) {\r\n    const hex = cryptoJS.enc.Hex.parse(data);\r\n    const sha = cryptoJS.SHA256(hex).toString();\r\n    return sha;\r\n}\r\n\r\n/**\r\n * Computes ripemd-160 hash from hex encoded data.\r\n *\r\n * @param data Hex encoded data\r\n */\r\nexport function ripemd160(data: string) {\r\n    const hex = cryptoJS.enc.Hex.parse(data);\r\n    const ripemd = cryptoJS.RIPEMD160(hex).toString();\r\n    return ripemd;\r\n}\r\n\r\n/**\r\n * Computes ripemd-160 hash of sha-256 hash from hex encoded data.\r\n *\r\n * @param data Hex encoded data\r\n */\r\nexport function hash160(SignatureScript: string): string {\r\n    return ripemd160(sha256(SignatureScript));\r\n}\r\n\r\n/**\r\n * Generates random ArrayBuffer of specified length.\r\n *\r\n * @param len Length of the array to generate\r\n */\r\nexport function generateRandomArray(len: number): ArrayBuffer {\r\n    return secureRandom(len);\r\n}\r\n\r\n/**\r\n * Generates random ArrayBuffer of specified length encoded as hex string\r\n *\r\n * @param len Length of the array to generate\r\n */\r\nexport function randomBytes(len: number) {\r\n    return ab2hexstring(generateRandomArray(len));\r\n}\r\n\r\nexport function generateMnemonic(size: number = 16): string {\r\n    const random = ab2hexstring(generateRandomArray(size));\r\n    return bip39.entropyToMnemonic(random);\r\n}\r\n\r\nexport function parseMnemonic(str: string) {\r\n    return bip39.mnemonicToEntropy(str);\r\n}\r\n\r\nexport function varifyPositiveInt(v: number) {\r\n    if (!/^[1-9]\\d*$/.test(v.toString())) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    return;\r\n}\r\n\r\nexport function isBase64(str: string): boolean {\r\n    return Buffer.from(str, 'base64').toString('base64') === str;\r\n}\r\n\r\nexport function isHexString(str: string): boolean {\r\n    const regexp = /^[0-9a-fA-F]+$/;\r\n    return regexp.test(str) && (str.length % 2 === 0);\r\n}\r\n\r\nexport function unboundDeadline() {\r\n    let count = 0;\r\n    for (const m of UNBOUND_GENERATION_AMOUNT) {\r\n        count += m;\r\n    }\r\n    count *= UNBOUND_TIME_INTERVAL;\r\n    const numInterval = UNBOUND_GENERATION_AMOUNT.length;\r\n    if (UNBOUND_GENERATION_AMOUNT[numInterval - 1] !== 1 ||\r\n        ! ((count - UNBOUND_TIME_INTERVAL < ONT_TOTAL_SUPPLY) && ONT_TOTAL_SUPPLY <= count)) {\r\n        throw new Error('incompatible constants setting');\r\n    }\r\n    return UNBOUND_TIME_INTERVAL * numInterval - (count - ONT_TOTAL_SUPPLY);\r\n}\r\n\r\nexport function calcUnboundOng(balance: number, startOffset: number, endOffset: number) {\r\n    let amount = 0;\r\n    if (startOffset >= endOffset) {\r\n        return 0;\r\n    }\r\n    const UNBOUND_DEADLINE = unboundDeadline();\r\n    if (startOffset < UNBOUND_DEADLINE) {\r\n        let ustart = Math.floor(startOffset / UNBOUND_TIME_INTERVAL);\r\n        let istart = startOffset % UNBOUND_TIME_INTERVAL;\r\n        if (endOffset >= UNBOUND_DEADLINE) {\r\n            endOffset = UNBOUND_DEADLINE;\r\n        }\r\n        const uend = Math.floor(endOffset / UNBOUND_TIME_INTERVAL);\r\n        const iend = endOffset % UNBOUND_TIME_INTERVAL;\r\n        while (ustart < uend) {\r\n            amount += (UNBOUND_TIME_INTERVAL - istart) * UNBOUND_GENERATION_AMOUNT[ustart];\r\n            ustart++;\r\n            istart = 0;\r\n        }\r\n        amount += (iend - istart) * UNBOUND_GENERATION_AMOUNT[ustart];\r\n    }\r\n    return amount * balance;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { Account } from './account';\r\nimport { DEFAULT_SCRYPT } from './consts';\r\nimport { Identity } from './identity';\r\n\r\n/**\r\n * Class to manage Accounts and Identity\r\n */\r\nexport class Wallet {\r\n\r\n    static parseJson(json: string): Wallet {\r\n        return Wallet.parseJsonObj(JSON.parse(json));\r\n    }\r\n\r\n    /**\r\n     * Deserializes JSON object.\r\n     *\r\n     * Object should be real object, not stringified.\r\n     *\r\n     * @param obj JSON object\r\n     */\r\n    static parseJsonObj(obj: any): Wallet {\r\n        const wallet = new Wallet();\r\n        wallet.name = obj.name;\r\n        wallet.defaultOntid = obj.defaultOntid;\r\n        wallet.defaultAccountAddress = obj.defaultAccountAddress;\r\n        wallet.createTime = obj.createTime;\r\n        wallet.version = obj.version;\r\n        wallet.scrypt = obj.scrypt;\r\n        wallet.identities = obj.identities && (obj.identities as any[]).map((i) => Identity.parseJsonObj(i));\r\n        wallet.accounts = obj.accounts && (obj.accounts as any[]).map((a) => Account.parseJsonObj(a));\r\n        wallet.extra = obj.extra;\r\n        return wallet;\r\n    }\r\n\r\n    static fromWalletFile(obj: any): Wallet {\r\n        const wallet = Wallet.parseJsonObj(obj);\r\n        return wallet;\r\n    }\r\n\r\n    /**\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     * import { Wallet } from 'ontology-ts-sdk';\r\n     * const wallet = Wallet.create('test');\r\n     * ```\r\n     *\r\n     * @param name Wallet's name\r\n     */\r\n    static create(name: string): Wallet {\r\n        const wallet = new Wallet();\r\n        wallet.name = name;\r\n\r\n        // createtime\r\n        wallet.createTime = (new Date()).toISOString();\r\n        wallet.version = '1.0';\r\n        wallet.scrypt = {\r\n            n: DEFAULT_SCRYPT.cost,\r\n            r: DEFAULT_SCRYPT.blockSize,\r\n            p: DEFAULT_SCRYPT.parallel,\r\n            dkLen: DEFAULT_SCRYPT.size\r\n        };\r\n\r\n        return wallet;\r\n    }\r\n\r\n    name: string;\r\n    defaultOntid: string = '';\r\n    defaultAccountAddress: string = '';\r\n    createTime: string;\r\n    version: string;\r\n    scrypt: {\r\n        n: number;\r\n        r: number;\r\n        p: number;\r\n        dkLen: number;\r\n    };\r\n    identities: Identity[] = [];\r\n    accounts: Account[] = [];\r\n    extra: null;\r\n\r\n    addAccount(account: Account): void {\r\n        for (const ac of this.accounts) {\r\n            if (ac.address.toBase58() === account.address.toBase58()) {\r\n                return;\r\n            }\r\n        }\r\n        this.accounts.push(account);\r\n    }\r\n\r\n    addIdentity(identity: Identity): void {\r\n        for (const item of this.identities) {\r\n            if (item.ontid === identity.ontid) {\r\n                return;\r\n            }\r\n        }\r\n        this.identities.push(identity);\r\n    }\r\n\r\n    setDefaultAccount(address: string): void {\r\n        this.defaultAccountAddress = address;\r\n    }\r\n\r\n    setDefaultIdentity(ontid: string): void {\r\n        this.defaultOntid = ontid;\r\n    }\r\n\r\n    toJson(): string {\r\n        return JSON.stringify(this.toJsonObj());\r\n    }\r\n\r\n    /**\r\n     * Serializes to JSON object.\r\n     *\r\n     * Returned object will not be stringified.\r\n     *\r\n     */\r\n    toJsonObj(): any {\r\n        const obj = {\r\n            name: this.name,\r\n            defaultOntid: this.defaultOntid,\r\n            defaultAccountAddress: this.defaultAccountAddress,\r\n            createTime: this.createTime,\r\n            version: this.version,\r\n            scrypt: this.scrypt,\r\n            identities: this.identities.map((i) => i.toJsonObj()),\r\n            accounts: this.accounts.map((a) => a.toJsonObj()),\r\n            extra: null\r\n        };\r\n\r\n        return obj;\r\n    }\r\n\r\n    signatureData(): string {\r\n        return '';\r\n    }\r\n\r\n    /*\r\n    *generate a wallet file that is compatible with cli wallet.\r\n    */\r\n    toWalletFile(): any {\r\n        const obj = this.toJsonObj();\r\n        return obj;\r\n    }\r\n}\r\n","module.exports = require(\"@ont-community/hdkey-secp256r1\");","module.exports = require(\"@ont-community/html5-websocket\");","module.exports = require(\"axios\");","module.exports = require(\"base-58\");","module.exports = require(\"base64-url\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"bip39\");","module.exports = require(\"crypto\");","module.exports = require(\"crypto-js\");","module.exports = require(\"elliptic\");","module.exports = require(\"js-sha3\");","module.exports = require(\"long\");","module.exports = require(\"milagro-crypto-js\");","module.exports = require(\"pkcs7\");","module.exports = require(\"scrypt-async\");","module.exports = require(\"secure-random\");","module.exports = require(\"sm.js\");","module.exports = require(\"uuid\");","module.exports = require(\"websocket-as-promised\");","module.exports = require(\"wif\");"],"sourceRoot":""}